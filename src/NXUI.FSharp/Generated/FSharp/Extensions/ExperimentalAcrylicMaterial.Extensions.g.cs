// <auto-generated />
namespace NXUI.FSharp.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.ExperimentalAcrylicMaterial"/> class property extension methods.
/// </summary>
public static partial class ExperimentalAcrylicMaterialExtensions
{
    // Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T tintColor<T>(this T obj, Avalonia.Media.Color value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T tintColor<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T tintColor<T>(
        this T obj,
        IObservable<Avalonia.Media.Color> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTintColor(
        this Avalonia.Media.ExperimentalAcrylicMaterial obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Color> ObserveTintColor(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTintColor<T>(this T obj, Action<Avalonia.Media.ExperimentalAcrylicMaterial, IObservable<Avalonia.Media.Color>> handler) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var observable = obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T backgroundSource<T>(this T obj, Avalonia.Media.AcrylicBackgroundSource value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T backgroundSource<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T backgroundSource<T>(
        this T obj,
        IObservable<Avalonia.Media.AcrylicBackgroundSource> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindBackgroundSource(
        this Avalonia.Media.ExperimentalAcrylicMaterial obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.AcrylicBackgroundSource> ObserveBackgroundSource(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBackgroundSource<T>(this T obj, Action<Avalonia.Media.ExperimentalAcrylicMaterial, IObservable<Avalonia.Media.AcrylicBackgroundSource>> handler) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var observable = obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty"/> property value to <see cref="Avalonia.Media.AcrylicBackgroundSource.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BackgroundSourceNone<T>(this T obj) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty] = Avalonia.Media.AcrylicBackgroundSource.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty"/> property value to <see cref="Avalonia.Media.AcrylicBackgroundSource.Digger"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BackgroundSourceDigger<T>(this T obj) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty] = Avalonia.Media.AcrylicBackgroundSource.Digger;
        return obj;
    }

    // Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T tintOpacity<T>(this T obj, System.Double value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T tintOpacity<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T tintOpacity<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTintOpacity(
        this Avalonia.Media.ExperimentalAcrylicMaterial obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveTintOpacity(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTintOpacity<T>(this T obj, Action<Avalonia.Media.ExperimentalAcrylicMaterial, IObservable<System.Double>> handler) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var observable = obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T materialOpacity<T>(this T obj, System.Double value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T materialOpacity<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T materialOpacity<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaterialOpacity(
        this Avalonia.Media.ExperimentalAcrylicMaterial obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMaterialOpacity(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaterialOpacity<T>(this T obj, Action<Avalonia.Media.ExperimentalAcrylicMaterial, IObservable<System.Double>> handler) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var observable = obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T platformTransparencyCompensationLevel<T>(this T obj, System.Double value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T platformTransparencyCompensationLevel<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T platformTransparencyCompensationLevel<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPlatformTransparencyCompensationLevel(
        this Avalonia.Media.ExperimentalAcrylicMaterial obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObservePlatformTransparencyCompensationLevel(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlatformTransparencyCompensationLevel<T>(this T obj, Action<Avalonia.Media.ExperimentalAcrylicMaterial, IObservable<System.Double>> handler) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var observable = obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T fallbackColor<T>(this T obj, Avalonia.Media.Color value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T fallbackColor<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T fallbackColor<T>(
        this T obj,
        IObservable<Avalonia.Media.Color> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFallbackColor(
        this Avalonia.Media.ExperimentalAcrylicMaterial obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Color> ObserveFallbackColor(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFallbackColor<T>(this T obj, Action<Avalonia.Media.ExperimentalAcrylicMaterial, IObservable<Avalonia.Media.Color>> handler) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        var observable = obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty);
        handler(obj, observable);
        return obj;
    }
}
