// <auto-generated />
namespace NXUI.FSharp.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Primitives.ColorSlider"/> class property extension methods.
/// </summary>
public static partial class ColorSliderExtensions
{
    // Avalonia.Controls.Primitives.ColorSlider.ColorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T color<T>(this T obj, Avalonia.Media.Color value) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.ColorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T color<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T color<T>(
        this T obj,
        IObservable<Avalonia.Media.Color> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColor(
        this Avalonia.Controls.Primitives.ColorSlider obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Color> ObserveColor(this Avalonia.Controls.Primitives.ColorSlider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColor<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSlider, IObservable<Avalonia.Media.Color>> handler) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T colorComponent<T>(this T obj, Avalonia.Controls.ColorComponent value) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T colorComponent<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T colorComponent<T>(
        this T obj,
        IObservable<Avalonia.Controls.ColorComponent> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColorComponent(
        this Avalonia.Controls.Primitives.ColorSlider obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ColorComponent> ObserveColorComponent(this Avalonia.Controls.Primitives.ColorSlider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorComponent<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSlider, IObservable<Avalonia.Controls.ColorComponent>> handler) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/> property value to <see cref="Avalonia.Controls.ColorComponent.Alpha"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorComponentAlpha<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty] = Avalonia.Controls.ColorComponent.Alpha;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/> property value to <see cref="Avalonia.Controls.ColorComponent.Component1"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorComponentComponent1<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty] = Avalonia.Controls.ColorComponent.Component1;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/> property value to <see cref="Avalonia.Controls.ColorComponent.Component2"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorComponentComponent2<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty] = Avalonia.Controls.ColorComponent.Component2;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty"/> property value to <see cref="Avalonia.Controls.ColorComponent.Component3"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorComponentComponent3<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.ColorComponentProperty] = Avalonia.Controls.ColorComponent.Component3;
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T colorModel<T>(this T obj, Avalonia.Controls.ColorModel value) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T colorModel<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T colorModel<T>(
        this T obj,
        IObservable<Avalonia.Controls.ColorModel> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColorModel(
        this Avalonia.Controls.Primitives.ColorSlider obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ColorModel> ObserveColorModel(this Avalonia.Controls.Primitives.ColorSlider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorModel<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSlider, IObservable<Avalonia.Controls.ColorModel>> handler) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty"/> property value to <see cref="Avalonia.Controls.ColorModel.Hsva"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorModelHsva<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty] = Avalonia.Controls.ColorModel.Hsva;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty"/> property value to <see cref="Avalonia.Controls.ColorModel.Rgba"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorModelRgba<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.ColorModelProperty] = Avalonia.Controls.ColorModel.Rgba;
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T hsvColor<T>(this T obj, Avalonia.Media.HsvColor value) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T hsvColor<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T hsvColor<T>(
        this T obj,
        IObservable<Avalonia.Media.HsvColor> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHsvColor(
        this Avalonia.Controls.Primitives.ColorSlider obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.HsvColor> ObserveHsvColor(this Avalonia.Controls.Primitives.ColorSlider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHsvColor<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSlider, IObservable<Avalonia.Media.HsvColor>> handler) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.HsvColorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T isAlphaVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T isAlphaVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T isAlphaVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsAlphaVisible(
        this Avalonia.Controls.Primitives.ColorSlider obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsAlphaVisible(this Avalonia.Controls.Primitives.ColorSlider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsAlphaVisible<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSlider, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.IsAlphaVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T isPerceptive<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T isPerceptive<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T isPerceptive<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsPerceptive(
        this Avalonia.Controls.Primitives.ColorSlider obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsPerceptive(this Avalonia.Controls.Primitives.ColorSlider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsPerceptive<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSlider, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.IsPerceptiveProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T isRoundingEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        obj[Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T isRoundingEnabled<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T isRoundingEnabled<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsRoundingEnabled(
        this Avalonia.Controls.Primitives.ColorSlider obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsRoundingEnabled(this Avalonia.Controls.Primitives.ColorSlider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsRoundingEnabled<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSlider, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.ColorSlider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSlider.IsRoundingEnabledProperty);
        handler(obj, observable);
        return obj;
    }
}
