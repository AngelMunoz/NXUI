// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ExperimentalAcrylicBorderExtensions
{
    // CornerRadiusProperty

    public static T CornerRadius<T>(this T obj, Avalonia.CornerRadius value) where T : Avalonia.Controls.ExperimentalAcrylicBorder
    {
        obj[Avalonia.Controls.ExperimentalAcrylicBorder.CornerRadiusProperty] = value;
        return obj;
    }

    public static T CornerRadius<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ExperimentalAcrylicBorder
    {
        obj[Avalonia.Controls.ExperimentalAcrylicBorder.CornerRadiusProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CornerRadius<T>(this T obj, IObservable<Avalonia.CornerRadius> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ExperimentalAcrylicBorder
    {
        obj[Avalonia.Controls.ExperimentalAcrylicBorder.CornerRadiusProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCornerRadius(this Avalonia.Controls.ExperimentalAcrylicBorder obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ExperimentalAcrylicBorder.CornerRadiusProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.CornerRadius> ObserveCornerRadius(this Avalonia.Controls.ExperimentalAcrylicBorder obj)
    {
        return obj.GetObservable(Avalonia.Controls.ExperimentalAcrylicBorder.CornerRadiusProperty);
    }

    public static T OnCornerRadius<T>(this T obj, Action<Avalonia.Controls.ExperimentalAcrylicBorder, IObservable<Avalonia.CornerRadius>> handler) where T : Avalonia.Controls.ExperimentalAcrylicBorder
    {
        var observable = obj.GetObservable(Avalonia.Controls.ExperimentalAcrylicBorder.CornerRadiusProperty);
        handler(obj, observable);
        return obj;
    }

    // MaterialProperty

    public static T Material<T>(this T obj, Avalonia.Media.ExperimentalAcrylicMaterial value) where T : Avalonia.Controls.ExperimentalAcrylicBorder
    {
        obj[Avalonia.Controls.ExperimentalAcrylicBorder.MaterialProperty] = value;
        return obj;
    }

    public static T Material<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ExperimentalAcrylicBorder
    {
        obj[Avalonia.Controls.ExperimentalAcrylicBorder.MaterialProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Material<T>(this T obj, IObservable<Avalonia.Media.ExperimentalAcrylicMaterial> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ExperimentalAcrylicBorder
    {
        obj[Avalonia.Controls.ExperimentalAcrylicBorder.MaterialProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaterial(this Avalonia.Controls.ExperimentalAcrylicBorder obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ExperimentalAcrylicBorder.MaterialProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.ExperimentalAcrylicMaterial> ObserveMaterial(this Avalonia.Controls.ExperimentalAcrylicBorder obj)
    {
        return obj.GetObservable(Avalonia.Controls.ExperimentalAcrylicBorder.MaterialProperty);
    }

    public static T OnMaterial<T>(this T obj, Action<Avalonia.Controls.ExperimentalAcrylicBorder, IObservable<Avalonia.Media.ExperimentalAcrylicMaterial>> handler) where T : Avalonia.Controls.ExperimentalAcrylicBorder
    {
        var observable = obj.GetObservable(Avalonia.Controls.ExperimentalAcrylicBorder.MaterialProperty);
        handler(obj, observable);
        return obj;
    }
}
