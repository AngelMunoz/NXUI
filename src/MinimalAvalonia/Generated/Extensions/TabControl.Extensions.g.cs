// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TabControlExtensions
{
    // TabStripPlacementProperty

    public static T TabStripPlacement<T>(this T obj, Avalonia.Controls.Dock value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = value;
        return obj;
    }

    public static T TabStripPlacement<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TabStripPlacement<T>(this T obj, IObservable<Avalonia.Controls.Dock> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTabStripPlacement(this Avalonia.Controls.TabControl obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TabControl.TabStripPlacementProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Dock> ObserveTabStripPlacement(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.TabStripPlacementProperty);
    }

    public static T OnTabStripPlacement<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Controls.Dock>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.TabStripPlacementProperty);
        handler(obj, observable);
        return obj;
    }

    public static T TabStripPlacementLeft<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Left;
        return obj;
    }

    public static T TabStripPlacementBottom<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Bottom;
        return obj;
    }

    public static T TabStripPlacementRight<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Right;
        return obj;
    }

    public static T TabStripPlacementTop<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.TabStripPlacementProperty] = Avalonia.Controls.Dock.Top;
        return obj;
    }

    // HorizontalContentAlignmentProperty

    public static T HorizontalContentAlignment<T>(this T obj, Avalonia.Layout.HorizontalAlignment value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = value;
        return obj;
    }

    public static T HorizontalContentAlignment<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T HorizontalContentAlignment<T>(this T obj, IObservable<Avalonia.Layout.HorizontalAlignment> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindHorizontalContentAlignment(this Avalonia.Controls.TabControl obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Layout.HorizontalAlignment> ObserveHorizontalContentAlignment(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty);
    }

    public static T OnHorizontalContentAlignment<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Layout.HorizontalAlignment>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static T HorizontalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Stretch;
        return obj;
    }

    public static T HorizontalContentAlignmentLeft<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Left;
        return obj;
    }

    public static T HorizontalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Center;
        return obj;
    }

    public static T HorizontalContentAlignmentRight<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Right;
        return obj;
    }

    // VerticalContentAlignmentProperty

    public static T VerticalContentAlignment<T>(this T obj, Avalonia.Layout.VerticalAlignment value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = value;
        return obj;
    }

    public static T VerticalContentAlignment<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T VerticalContentAlignment<T>(this T obj, IObservable<Avalonia.Layout.VerticalAlignment> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindVerticalContentAlignment(this Avalonia.Controls.TabControl obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Layout.VerticalAlignment> ObserveVerticalContentAlignment(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.VerticalContentAlignmentProperty);
    }

    public static T OnVerticalContentAlignment<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Layout.VerticalAlignment>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.VerticalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    public static T VerticalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Stretch;
        return obj;
    }

    public static T VerticalContentAlignmentTop<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Top;
        return obj;
    }

    public static T VerticalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Center;
        return obj;
    }

    public static T VerticalContentAlignmentBottom<T>(this T obj) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Bottom;
        return obj;
    }

    // ContentTemplateProperty

    public static T ContentTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.ContentTemplateProperty] = value;
        return obj;
    }

    public static T ContentTemplate<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.ContentTemplateProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ContentTemplate<T>(this T obj, IObservable<Avalonia.Controls.Templates.IDataTemplate> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.ContentTemplateProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindContentTemplate(this Avalonia.Controls.TabControl obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TabControl.ContentTemplateProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObserveContentTemplate(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.ContentTemplateProperty);
    }

    public static T OnContentTemplate<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.ContentTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    // SelectedContentProperty

    public static T SelectedContent<T>(this T obj, System.Object value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.SelectedContentProperty] = value;
        return obj;
    }

    public static T SelectedContent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.SelectedContentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectedContent<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.SelectedContentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectedContent(this Avalonia.Controls.TabControl obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TabControl.SelectedContentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveSelectedContent(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.SelectedContentProperty);
    }

    public static T OnSelectedContent<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<System.Object>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.SelectedContentProperty);
        handler(obj, observable);
        return obj;
    }

    // SelectedContentTemplateProperty

    public static T SelectedContentTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.SelectedContentTemplateProperty] = value;
        return obj;
    }

    public static T SelectedContentTemplate<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.SelectedContentTemplateProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectedContentTemplate<T>(this T obj, IObservable<Avalonia.Controls.Templates.IDataTemplate> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TabControl
    {
        obj[Avalonia.Controls.TabControl.SelectedContentTemplateProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectedContentTemplate(this Avalonia.Controls.TabControl obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TabControl.SelectedContentTemplateProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObserveSelectedContentTemplate(this Avalonia.Controls.TabControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TabControl.SelectedContentTemplateProperty);
    }

    public static T OnSelectedContentTemplate<T>(this T obj, Action<Avalonia.Controls.TabControl, IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.TabControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TabControl.SelectedContentTemplateProperty);
        handler(obj, observable);
        return obj;
    }
}
