// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ArcExtensions
{
    // StartAngleProperty

    public static T StartAngle<T>(this T obj, System.Double value) where T : Avalonia.Controls.Shapes.Arc
    {
        obj[Avalonia.Controls.Shapes.Arc.StartAngleProperty] = value;
        return obj;
    }

    public static T StartAngle<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Arc
    {
        obj[Avalonia.Controls.Shapes.Arc.StartAngleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T StartAngle<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Arc
    {
        obj[Avalonia.Controls.Shapes.Arc.StartAngleProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindStartAngle(this Avalonia.Controls.Shapes.Arc obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Arc.StartAngleProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveStartAngle(this Avalonia.Controls.Shapes.Arc obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Arc.StartAngleProperty);
    }

    public static T OnStartAngle<T>(this T obj, Action<Avalonia.Controls.Shapes.Arc, IObservable<System.Double>> handler) where T : Avalonia.Controls.Shapes.Arc
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Arc.StartAngleProperty);
        handler(obj, observable);
        return obj;
    }

    // SweepAngleProperty

    public static T SweepAngle<T>(this T obj, System.Double value) where T : Avalonia.Controls.Shapes.Arc
    {
        obj[Avalonia.Controls.Shapes.Arc.SweepAngleProperty] = value;
        return obj;
    }

    public static T SweepAngle<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Arc
    {
        obj[Avalonia.Controls.Shapes.Arc.SweepAngleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SweepAngle<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Arc
    {
        obj[Avalonia.Controls.Shapes.Arc.SweepAngleProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSweepAngle(this Avalonia.Controls.Shapes.Arc obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Arc.SweepAngleProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveSweepAngle(this Avalonia.Controls.Shapes.Arc obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Arc.SweepAngleProperty);
    }

    public static T OnSweepAngle<T>(this T obj, Action<Avalonia.Controls.Shapes.Arc, IObservable<System.Double>> handler) where T : Avalonia.Controls.Shapes.Arc
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Arc.SweepAngleProperty);
        handler(obj, observable);
        return obj;
    }
}
