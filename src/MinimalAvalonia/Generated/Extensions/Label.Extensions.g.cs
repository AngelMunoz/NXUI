// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class LabelExtensions
{
    // TargetProperty

    public static T Target<T>(this T obj, Avalonia.Input.IInputElement value) where T : Avalonia.Controls.Label
    {
        obj[Avalonia.Controls.Label.TargetProperty] = value;
        return obj;
    }

    public static T Target<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Label
    {
        obj[Avalonia.Controls.Label.TargetProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Target<T>(this T obj, IObservable<Avalonia.Input.IInputElement> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Label
    {
        obj[Avalonia.Controls.Label.TargetProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTarget(this Avalonia.Controls.Label obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Label.TargetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Input.IInputElement> ObserveTarget(this Avalonia.Controls.Label obj)
    {
        return obj.GetObservable(Avalonia.Controls.Label.TargetProperty);
    }

    public static T OnTarget<T>(this T obj, Action<Avalonia.Controls.Label, IObservable<Avalonia.Input.IInputElement>> handler) where T : Avalonia.Controls.Label
    {
        var observable = obj.GetObservable(Avalonia.Controls.Label.TargetProperty);
        handler(obj, observable);
        return obj;
    }
}
