// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class PolylineGeometryExtensions
{
    // PointsProperty

    public static T Points<T>(this T obj, Avalonia.Points value) where T : Avalonia.Media.PolylineGeometry
    {
        obj[Avalonia.Media.PolylineGeometry.PointsProperty] = value;
        return obj;
    }

    public static T Points<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.PolylineGeometry
    {
        obj[Avalonia.Media.PolylineGeometry.PointsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Points<T>(this T obj, IObservable<Avalonia.Points> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.PolylineGeometry
    {
        obj[Avalonia.Media.PolylineGeometry.PointsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPoints(this Avalonia.Media.PolylineGeometry obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.PolylineGeometry.PointsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Points> ObservePoints(this Avalonia.Media.PolylineGeometry obj)
    {
        return obj.GetObservable(Avalonia.Media.PolylineGeometry.PointsProperty);
    }

    public static T OnPoints<T>(this T obj, Action<IObservable<Avalonia.Points>> handler) where T : Avalonia.Media.PolylineGeometry
    {
        var observable = obj.GetObservable(Avalonia.Media.PolylineGeometry.PointsProperty);
        handler(observable);
        return obj;
    }

    // IsFilledProperty

    public static T IsFilled<T>(this T obj, System.Boolean value) where T : Avalonia.Media.PolylineGeometry
    {
        obj[Avalonia.Media.PolylineGeometry.IsFilledProperty] = value;
        return obj;
    }

    public static T IsFilled<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.PolylineGeometry
    {
        obj[Avalonia.Media.PolylineGeometry.IsFilledProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsFilled<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.PolylineGeometry
    {
        obj[Avalonia.Media.PolylineGeometry.IsFilledProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsFilled(this Avalonia.Media.PolylineGeometry obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.PolylineGeometry.IsFilledProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsFilled(this Avalonia.Media.PolylineGeometry obj)
    {
        return obj.GetObservable(Avalonia.Media.PolylineGeometry.IsFilledProperty);
    }

    public static T OnIsFilled<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Media.PolylineGeometry
    {
        var observable = obj.GetObservable(Avalonia.Media.PolylineGeometry.IsFilledProperty);
        handler(observable);
        return obj;
    }
}
