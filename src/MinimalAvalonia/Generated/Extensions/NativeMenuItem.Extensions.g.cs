// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class NativeMenuItemExtensions
{
    // MenuProperty

    public static T Menu<T>(this T obj, Avalonia.Controls.NativeMenu value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.MenuProperty] = value;
        return obj;
    }

    public static T Menu<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.MenuProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Menu<T>(this T obj, IObservable<Avalonia.Controls.NativeMenu> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.MenuProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMenu(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.MenuProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.NativeMenu> ObserveMenu(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.MenuProperty);
    }

    public static T OnMenu<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<Avalonia.Controls.NativeMenu>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.MenuProperty);
        handler(obj, observable);
        return obj;
    }

    // IconProperty

    public static T Icon<T>(this T obj, Avalonia.Media.Imaging.IBitmap value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IconProperty] = value;
        return obj;
    }

    public static T Icon<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IconProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Icon<T>(this T obj, IObservable<Avalonia.Media.Imaging.IBitmap> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IconProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIcon(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.IconProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Imaging.IBitmap> ObserveIcon(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.IconProperty);
    }

    public static T OnIcon<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<Avalonia.Media.Imaging.IBitmap>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.IconProperty);
        handler(obj, observable);
        return obj;
    }

    // HeaderProperty

    public static T Header<T>(this T obj, System.String value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.HeaderProperty] = value;
        return obj;
    }

    public static T Header<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.HeaderProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Header<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.HeaderProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindHeader(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.HeaderProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveHeader(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.HeaderProperty);
    }

    public static T OnHeader<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<System.String>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.HeaderProperty);
        handler(obj, observable);
        return obj;
    }

    // GestureProperty

    public static T Gesture<T>(this T obj, Avalonia.Input.KeyGesture value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.GestureProperty] = value;
        return obj;
    }

    public static T Gesture<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.GestureProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Gesture<T>(this T obj, IObservable<Avalonia.Input.KeyGesture> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.GestureProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindGesture(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.GestureProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Input.KeyGesture> ObserveGesture(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.GestureProperty);
    }

    public static T OnGesture<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<Avalonia.Input.KeyGesture>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.GestureProperty);
        handler(obj, observable);
        return obj;
    }

    // IsCheckedProperty

    public static T IsChecked<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsCheckedProperty] = value;
        return obj;
    }

    public static T IsChecked<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsCheckedProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsChecked<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsCheckedProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsChecked(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.IsCheckedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsChecked(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.IsCheckedProperty);
    }

    public static T OnIsChecked<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.IsCheckedProperty);
        handler(obj, observable);
        return obj;
    }

    // ToggleTypeProperty

    public static T ToggleType<T>(this T obj, Avalonia.Controls.NativeMenuItemToggleType value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = value;
        return obj;
    }

    public static T ToggleType<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ToggleType<T>(this T obj, IObservable<Avalonia.Controls.NativeMenuItemToggleType> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindToggleType(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.NativeMenuItemToggleType> ObserveToggleType(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty);
    }

    public static T OnToggleType<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<Avalonia.Controls.NativeMenuItemToggleType>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty);
        handler(obj, observable);
        return obj;
    }

    public static T ToggleTypeNone<T>(this T obj) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.None;
        return obj;
    }

    public static T ToggleTypeCheckBox<T>(this T obj) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.CheckBox;
        return obj;
    }

    public static T ToggleTypeRadio<T>(this T obj) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.Radio;
        return obj;
    }

    // CommandProperty

    public static T Command<T>(this T obj, System.Windows.Input.ICommand value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.CommandProperty] = value;
        return obj;
    }

    public static T Command<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.CommandProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Command<T>(this T obj, IObservable<System.Windows.Input.ICommand> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.CommandProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCommand(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.CommandProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Windows.Input.ICommand> ObserveCommand(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.CommandProperty);
    }

    public static T OnCommand<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<System.Windows.Input.ICommand>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.CommandProperty);
        handler(obj, observable);
        return obj;
    }

    // IsEnabledProperty

    public static T IsEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsEnabledProperty] = value;
        return obj;
    }

    public static T IsEnabled<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsEnabledProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsEnabled<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsEnabledProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsEnabled(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.IsEnabledProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsEnabled(this Avalonia.Controls.NativeMenuItem obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenuItem.IsEnabledProperty);
    }

    public static T OnIsEnabled<T>(this T obj, Action<Avalonia.Controls.NativeMenuItem, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.NativeMenuItem
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenuItem.IsEnabledProperty);
        handler(obj, observable);
        return obj;
    }
}
