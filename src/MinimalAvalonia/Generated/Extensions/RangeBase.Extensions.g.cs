// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class RangeBaseExtensions
{
    // MinimumProperty

    public static T Minimum<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.MinimumProperty] = value;
        return obj;
    }

    public static T Minimum<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.MinimumProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Minimum<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.MinimumProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMinimum(this Avalonia.Controls.Primitives.RangeBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.RangeBase.MinimumProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveMinimum(this Avalonia.Controls.Primitives.RangeBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.MinimumProperty);
    }

    public static T OnMinimum<T>(this T obj, Action<Avalonia.Controls.Primitives.RangeBase, IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.RangeBase
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.MinimumProperty);
        handler(obj, observable);
        return obj;
    }

    // MaximumProperty

    public static T Maximum<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.MaximumProperty] = value;
        return obj;
    }

    public static T Maximum<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.MaximumProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Maximum<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.MaximumProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaximum(this Avalonia.Controls.Primitives.RangeBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.RangeBase.MaximumProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveMaximum(this Avalonia.Controls.Primitives.RangeBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.MaximumProperty);
    }

    public static T OnMaximum<T>(this T obj, Action<Avalonia.Controls.Primitives.RangeBase, IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.RangeBase
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.MaximumProperty);
        handler(obj, observable);
        return obj;
    }

    // ValueProperty

    public static T Value<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.ValueProperty] = value;
        return obj;
    }

    public static T Value<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.ValueProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Value<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.ValueProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindValue(this Avalonia.Controls.Primitives.RangeBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.RangeBase.ValueProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveValue(this Avalonia.Controls.Primitives.RangeBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.ValueProperty);
    }

    public static T OnValue<T>(this T obj, Action<Avalonia.Controls.Primitives.RangeBase, IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.RangeBase
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.ValueProperty);
        handler(obj, observable);
        return obj;
    }

    // SmallChangeProperty

    public static T SmallChange<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.SmallChangeProperty] = value;
        return obj;
    }

    public static T SmallChange<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.SmallChangeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SmallChange<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.SmallChangeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSmallChange(this Avalonia.Controls.Primitives.RangeBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.RangeBase.SmallChangeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveSmallChange(this Avalonia.Controls.Primitives.RangeBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.SmallChangeProperty);
    }

    public static T OnSmallChange<T>(this T obj, Action<Avalonia.Controls.Primitives.RangeBase, IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.RangeBase
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.SmallChangeProperty);
        handler(obj, observable);
        return obj;
    }

    // LargeChangeProperty

    public static T LargeChange<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.LargeChangeProperty] = value;
        return obj;
    }

    public static T LargeChange<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.LargeChangeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T LargeChange<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.RangeBase
    {
        obj[Avalonia.Controls.Primitives.RangeBase.LargeChangeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindLargeChange(this Avalonia.Controls.Primitives.RangeBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.RangeBase.LargeChangeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveLargeChange(this Avalonia.Controls.Primitives.RangeBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.LargeChangeProperty);
    }

    public static T OnLargeChange<T>(this T obj, Action<Avalonia.Controls.Primitives.RangeBase, IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.RangeBase
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.RangeBase.LargeChangeProperty);
        handler(obj, observable);
        return obj;
    }
}
