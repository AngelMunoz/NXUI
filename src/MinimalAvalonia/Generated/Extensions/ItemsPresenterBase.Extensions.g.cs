// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ItemsPresenterBaseExtensions
{
    // ItemsProperty

    public static T Items<T>(this T obj, System.Collections.IEnumerable value) where T : Avalonia.Controls.Presenters.ItemsPresenterBase
    {
        obj[Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsProperty] = value;
        return obj;
    }

    public static T Items<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ItemsPresenterBase
    {
        obj[Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Items<T>(this T obj, IObservable<System.Collections.IEnumerable> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Presenters.ItemsPresenterBase
    {
        obj[Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindItems(this Avalonia.Controls.Presenters.ItemsPresenterBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Collections.IEnumerable> ObserveItems(this Avalonia.Controls.Presenters.ItemsPresenterBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsProperty);
    }

    public static T OnItems<T>(this T obj, Action<IObservable<System.Collections.IEnumerable>> handler) where T : Avalonia.Controls.Presenters.ItemsPresenterBase
    {
        var observable = obj.GetObservable(Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsProperty);
        handler(observable);
        return obj;
    }
}
