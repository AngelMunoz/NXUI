// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class OverlayPopupHostExtensions
{
    // TransformProperty

    public static T Transform<T>(this T obj, Avalonia.Media.Transform value) where T : Avalonia.Controls.Primitives.OverlayPopupHost
    {
        obj[Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty] = value;
        return obj;
    }

    public static T Transform<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.OverlayPopupHost
    {
        obj[Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Transform<T>(this T obj, IObservable<Avalonia.Media.Transform> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.OverlayPopupHost
    {
        obj[Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTransform(this Avalonia.Controls.Primitives.OverlayPopupHost obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Transform> ObserveTransform(this Avalonia.Controls.Primitives.OverlayPopupHost obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty);
    }

    public static T OnTransform<T>(this T obj, Action<Avalonia.Controls.Primitives.OverlayPopupHost, IObservable<Avalonia.Media.Transform>> handler) where T : Avalonia.Controls.Primitives.OverlayPopupHost
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty);
        handler(obj, observable);
        return obj;
    }
}
