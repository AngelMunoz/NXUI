// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ColumnDefinitionExtensions
{
    // MaxWidthProperty

    public static T MaxWidth<T>(this T obj, System.Double value) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.MaxWidthProperty] = value;
        return obj;
    }

    public static T MaxWidth<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.MaxWidthProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T MaxWidth<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.MaxWidthProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaxWidth(this Avalonia.Controls.ColumnDefinition obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ColumnDefinition.MaxWidthProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveMaxWidth(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColumnDefinition.MaxWidthProperty);
    }

    public static T OnMaxWidth<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<System.Double>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColumnDefinition.MaxWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // MinWidthProperty

    public static T MinWidth<T>(this T obj, System.Double value) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.MinWidthProperty] = value;
        return obj;
    }

    public static T MinWidth<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.MinWidthProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T MinWidth<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.MinWidthProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMinWidth(this Avalonia.Controls.ColumnDefinition obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ColumnDefinition.MinWidthProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveMinWidth(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColumnDefinition.MinWidthProperty);
    }

    public static T OnMinWidth<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<System.Double>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColumnDefinition.MinWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // WidthProperty

    public static T Width<T>(this T obj, Avalonia.Controls.GridLength value) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.WidthProperty] = value;
        return obj;
    }

    public static T Width<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.WidthProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Width<T>(this T obj, IObservable<Avalonia.Controls.GridLength> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.WidthProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindWidth(this Avalonia.Controls.ColumnDefinition obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ColumnDefinition.WidthProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.GridLength> ObserveWidth(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColumnDefinition.WidthProperty);
    }

    public static T OnWidth<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<Avalonia.Controls.GridLength>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColumnDefinition.WidthProperty);
        handler(obj, observable);
        return obj;
    }
}
