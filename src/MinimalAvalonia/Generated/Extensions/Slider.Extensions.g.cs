// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class SliderExtensions
{
    // OrientationProperty

    public static T Orientation<T>(this T obj, Avalonia.Layout.Orientation value) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.OrientationProperty] = value;
        return obj;
    }

    public static T Orientation<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.OrientationProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Orientation<T>(this T obj, IObservable<Avalonia.Layout.Orientation> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.OrientationProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOrientation(this Avalonia.Controls.Slider obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Slider.OrientationProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Layout.Orientation> ObserveOrientation(this Avalonia.Controls.Slider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Slider.OrientationProperty);
    }

    public static T OnOrientation<T>(this T obj, Action<IObservable<Avalonia.Layout.Orientation>> handler) where T : Avalonia.Controls.Slider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Slider.OrientationProperty);
        handler(observable);
        return obj;
    }

    public static T OrientationHorizontal<T>(this T obj) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.OrientationProperty] = Avalonia.Layout.Orientation.Horizontal;
        return obj;
    }

    public static T OrientationVertical<T>(this T obj) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.OrientationProperty] = Avalonia.Layout.Orientation.Vertical;
        return obj;
    }

    // IsDirectionReversedProperty

    public static T IsDirectionReversed<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.IsDirectionReversedProperty] = value;
        return obj;
    }

    public static T IsDirectionReversed<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.IsDirectionReversedProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsDirectionReversed<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.IsDirectionReversedProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsDirectionReversed(this Avalonia.Controls.Slider obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Slider.IsDirectionReversedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsDirectionReversed(this Avalonia.Controls.Slider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Slider.IsDirectionReversedProperty);
    }

    public static T OnIsDirectionReversed<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Slider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Slider.IsDirectionReversedProperty);
        handler(observable);
        return obj;
    }

    // IsSnapToTickEnabledProperty

    public static T IsSnapToTickEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.IsSnapToTickEnabledProperty] = value;
        return obj;
    }

    public static T IsSnapToTickEnabled<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.IsSnapToTickEnabledProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsSnapToTickEnabled<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.IsSnapToTickEnabledProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsSnapToTickEnabled(this Avalonia.Controls.Slider obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Slider.IsSnapToTickEnabledProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsSnapToTickEnabled(this Avalonia.Controls.Slider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Slider.IsSnapToTickEnabledProperty);
    }

    public static T OnIsSnapToTickEnabled<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Slider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Slider.IsSnapToTickEnabledProperty);
        handler(observable);
        return obj;
    }

    // TickFrequencyProperty

    public static T TickFrequency<T>(this T obj, System.Double value) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickFrequencyProperty] = value;
        return obj;
    }

    public static T TickFrequency<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickFrequencyProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TickFrequency<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickFrequencyProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTickFrequency(this Avalonia.Controls.Slider obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Slider.TickFrequencyProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveTickFrequency(this Avalonia.Controls.Slider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Slider.TickFrequencyProperty);
    }

    public static T OnTickFrequency<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Slider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Slider.TickFrequencyProperty);
        handler(observable);
        return obj;
    }

    // TickPlacementProperty

    public static T TickPlacement<T>(this T obj, Avalonia.Controls.TickPlacement value) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickPlacementProperty] = value;
        return obj;
    }

    public static T TickPlacement<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickPlacementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TickPlacement<T>(this T obj, IObservable<Avalonia.Controls.TickPlacement> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickPlacementProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTickPlacement(this Avalonia.Controls.Slider obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Slider.TickPlacementProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.TickPlacement> ObserveTickPlacement(this Avalonia.Controls.Slider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Slider.TickPlacementProperty);
    }

    public static T OnTickPlacement<T>(this T obj, Action<IObservable<Avalonia.Controls.TickPlacement>> handler) where T : Avalonia.Controls.Slider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Slider.TickPlacementProperty);
        handler(observable);
        return obj;
    }

    public static T TickPlacementNone<T>(this T obj) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickPlacementProperty] = Avalonia.Controls.TickPlacement.None;
        return obj;
    }

    public static T TickPlacementTopLeft<T>(this T obj) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickPlacementProperty] = Avalonia.Controls.TickPlacement.TopLeft;
        return obj;
    }

    public static T TickPlacementBottomRight<T>(this T obj) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickPlacementProperty] = Avalonia.Controls.TickPlacement.BottomRight;
        return obj;
    }

    public static T TickPlacementOutside<T>(this T obj) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TickPlacementProperty] = Avalonia.Controls.TickPlacement.Outside;
        return obj;
    }

    // TicksProperty

    public static T Ticks<T>(this T obj, Avalonia.Collections.AvaloniaList<System.Double> value) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TicksProperty] = value;
        return obj;
    }

    public static T Ticks<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TicksProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Ticks<T>(this T obj, IObservable<Avalonia.Collections.AvaloniaList<System.Double>> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Slider
    {
        obj[Avalonia.Controls.Slider.TicksProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTicks(this Avalonia.Controls.Slider obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Slider.TicksProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Collections.AvaloniaList<System.Double>> ObserveTicks(this Avalonia.Controls.Slider obj)
    {
        return obj.GetObservable(Avalonia.Controls.Slider.TicksProperty);
    }

    public static T OnTicks<T>(this T obj, Action<IObservable<Avalonia.Collections.AvaloniaList<System.Double>>> handler) where T : Avalonia.Controls.Slider
    {
        var observable = obj.GetObservable(Avalonia.Controls.Slider.TicksProperty);
        handler(observable);
        return obj;
    }
}
