// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TileBrushExtensions
{
    // AlignmentXProperty

    public static T AlignmentX<T>(this T obj, Avalonia.Media.AlignmentX value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty] = value;
        return obj;
    }

    public static T AlignmentX<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T AlignmentX<T>(this T obj, IObservable<Avalonia.Media.AlignmentX> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindAlignmentX(this Avalonia.Media.TileBrush obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.TileBrush.AlignmentXProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.AlignmentX> ObserveAlignmentX(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.AlignmentXProperty);
    }

    public static T OnAlignmentX<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.Media.AlignmentX>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.AlignmentXProperty);
        handler(obj, observable);
        return obj;
    }

    public static T AlignmentXLeft<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty] = Avalonia.Media.AlignmentX.Left;
        return obj;
    }

    public static T AlignmentXCenter<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty] = Avalonia.Media.AlignmentX.Center;
        return obj;
    }

    public static T AlignmentXRight<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty] = Avalonia.Media.AlignmentX.Right;
        return obj;
    }

    // AlignmentYProperty

    public static T AlignmentY<T>(this T obj, Avalonia.Media.AlignmentY value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty] = value;
        return obj;
    }

    public static T AlignmentY<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T AlignmentY<T>(this T obj, IObservable<Avalonia.Media.AlignmentY> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindAlignmentY(this Avalonia.Media.TileBrush obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.TileBrush.AlignmentYProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.AlignmentY> ObserveAlignmentY(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.AlignmentYProperty);
    }

    public static T OnAlignmentY<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.Media.AlignmentY>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.AlignmentYProperty);
        handler(obj, observable);
        return obj;
    }

    public static T AlignmentYTop<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty] = Avalonia.Media.AlignmentY.Top;
        return obj;
    }

    public static T AlignmentYCenter<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty] = Avalonia.Media.AlignmentY.Center;
        return obj;
    }

    public static T AlignmentYBottom<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty] = Avalonia.Media.AlignmentY.Bottom;
        return obj;
    }

    // DestinationRectProperty

    public static T DestinationRect<T>(this T obj, Avalonia.RelativeRect value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.DestinationRectProperty] = value;
        return obj;
    }

    public static T DestinationRect<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.DestinationRectProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T DestinationRect<T>(this T obj, IObservable<Avalonia.RelativeRect> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.DestinationRectProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindDestinationRect(this Avalonia.Media.TileBrush obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.TileBrush.DestinationRectProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.RelativeRect> ObserveDestinationRect(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.DestinationRectProperty);
    }

    public static T OnDestinationRect<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.RelativeRect>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.DestinationRectProperty);
        handler(obj, observable);
        return obj;
    }

    // SourceRectProperty

    public static T SourceRect<T>(this T obj, Avalonia.RelativeRect value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.SourceRectProperty] = value;
        return obj;
    }

    public static T SourceRect<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.SourceRectProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SourceRect<T>(this T obj, IObservable<Avalonia.RelativeRect> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.SourceRectProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSourceRect(this Avalonia.Media.TileBrush obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.TileBrush.SourceRectProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.RelativeRect> ObserveSourceRect(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.SourceRectProperty);
    }

    public static T OnSourceRect<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.RelativeRect>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.SourceRectProperty);
        handler(obj, observable);
        return obj;
    }

    // StretchProperty

    public static T Stretch<T>(this T obj, Avalonia.Media.Stretch value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = value;
        return obj;
    }

    public static T Stretch<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Stretch<T>(this T obj, IObservable<Avalonia.Media.Stretch> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindStretch(this Avalonia.Media.TileBrush obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.TileBrush.StretchProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Stretch> ObserveStretch(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.StretchProperty);
    }

    public static T OnStretch<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.Media.Stretch>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.StretchProperty);
        handler(obj, observable);
        return obj;
    }

    public static T StretchNone<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = Avalonia.Media.Stretch.None;
        return obj;
    }

    public static T StretchFill<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = Avalonia.Media.Stretch.Fill;
        return obj;
    }

    public static T StretchUniform<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = Avalonia.Media.Stretch.Uniform;
        return obj;
    }

    public static T StretchUniformToFill<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = Avalonia.Media.Stretch.UniformToFill;
        return obj;
    }

    // TileModeProperty

    public static T TileMode<T>(this T obj, Avalonia.Media.TileMode value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = value;
        return obj;
    }

    public static T TileMode<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TileMode<T>(this T obj, IObservable<Avalonia.Media.TileMode> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTileMode(this Avalonia.Media.TileBrush obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.TileBrush.TileModeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.TileMode> ObserveTileMode(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.TileModeProperty);
    }

    public static T OnTileMode<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.Media.TileMode>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.TileModeProperty);
        handler(obj, observable);
        return obj;
    }

    public static T TileModeNone<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.None;
        return obj;
    }

    public static T TileModeFlipX<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.FlipX;
        return obj;
    }

    public static T TileModeFlipY<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.FlipY;
        return obj;
    }

    public static T TileModeFlipXY<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.FlipXY;
        return obj;
    }

    public static T TileModeTile<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.Tile;
        return obj;
    }
}
