// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class DrawingImageExtensions
{
    // DrawingProperty

    public static T Drawing<T>(this T obj, Avalonia.Media.Drawing value) where T : Avalonia.Media.DrawingImage
    {
        obj[Avalonia.Media.DrawingImage.DrawingProperty] = value;
        return obj;
    }

    public static T Drawing<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingImage
    {
        obj[Avalonia.Media.DrawingImage.DrawingProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Drawing<T>(this T obj, IObservable<Avalonia.Media.Drawing> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingImage
    {
        obj[Avalonia.Media.DrawingImage.DrawingProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindDrawing(this Avalonia.Media.DrawingImage obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.DrawingImage.DrawingProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Drawing> ObserveDrawing(this Avalonia.Media.DrawingImage obj)
    {
        return obj.GetObservable(Avalonia.Media.DrawingImage.DrawingProperty);
    }

    public static T OnDrawing<T>(this T obj, Action<IObservable<Avalonia.Media.Drawing>> handler) where T : Avalonia.Media.DrawingImage
    {
        var observable = obj.GetObservable(Avalonia.Media.DrawingImage.DrawingProperty);
        handler(observable);
        return obj;
    }
}
