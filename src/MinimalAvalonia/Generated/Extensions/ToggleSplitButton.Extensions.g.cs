// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ToggleSplitButtonExtensions
{
    // IsCheckedProperty

    public static T IsChecked<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ToggleSplitButton
    {
        obj[Avalonia.Controls.ToggleSplitButton.IsCheckedProperty] = value;
        return obj;
    }

    public static T IsChecked<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ToggleSplitButton
    {
        obj[Avalonia.Controls.ToggleSplitButton.IsCheckedProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsChecked<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ToggleSplitButton
    {
        obj[Avalonia.Controls.ToggleSplitButton.IsCheckedProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsChecked(this Avalonia.Controls.ToggleSplitButton obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ToggleSplitButton.IsCheckedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsChecked(this Avalonia.Controls.ToggleSplitButton obj)
    {
        return obj.GetObservable(Avalonia.Controls.ToggleSplitButton.IsCheckedProperty);
    }

    public static T OnIsChecked<T>(this T obj, Action<Avalonia.Controls.ToggleSplitButton, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ToggleSplitButton
    {
        var observable = obj.GetObservable(Avalonia.Controls.ToggleSplitButton.IsCheckedProperty);
        handler(obj, observable);
        return obj;
    }

    // IsCheckedChangedEvent

    public static Avalonia.Controls.ToggleSplitButton OnIsCheckedChangedHandler(this Avalonia.Controls.ToggleSplitButton obj, Action<Avalonia.Controls.ToggleSplitButton, Avalonia.Interactivity.RoutedEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        obj.AddHandler(Avalonia.Controls.ToggleSplitButton.IsCheckedChangedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static Avalonia.Controls.ToggleSplitButton OnIsCheckedChanged(this Avalonia.Controls.ToggleSplitButton obj, Action<Avalonia.Controls.ToggleSplitButton, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ToggleSplitButton.IsCheckedChangedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnIsCheckedChanged(this Avalonia.Controls.ToggleSplitButton obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.IsCheckedChanged += h, 
                h => obj.IsCheckedChanged -= h)
            .Select(x => x.EventArgs);
    }
}
