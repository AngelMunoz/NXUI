// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ThumbExtensions
{
    // DragStartedEvent

    public static Avalonia.Controls.Primitives.Thumb OnDragStartedHandler(this Avalonia.Controls.Primitives.Thumb obj, Action<Avalonia.Controls.Primitives.Thumb, Avalonia.Input.VectorEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        obj.AddHandler(Avalonia.Controls.Primitives.Thumb.DragStartedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static Avalonia.Controls.Primitives.Thumb OnDragStarted(this Avalonia.Controls.Primitives.Thumb obj, Action<Avalonia.Controls.Primitives.Thumb, IObservable<Avalonia.Input.VectorEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Thumb.DragStartedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragStarted(this Avalonia.Controls.Primitives.Thumb obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragStarted += h, 
                h => obj.DragStarted -= h)
            .Select(x => x.EventArgs);
    }

    // DragDeltaEvent

    public static Avalonia.Controls.Primitives.Thumb OnDragDeltaHandler(this Avalonia.Controls.Primitives.Thumb obj, Action<Avalonia.Controls.Primitives.Thumb, Avalonia.Input.VectorEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        obj.AddHandler(Avalonia.Controls.Primitives.Thumb.DragDeltaEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static Avalonia.Controls.Primitives.Thumb OnDragDelta(this Avalonia.Controls.Primitives.Thumb obj, Action<Avalonia.Controls.Primitives.Thumb, IObservable<Avalonia.Input.VectorEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Thumb.DragDeltaEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragDelta(this Avalonia.Controls.Primitives.Thumb obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragDelta += h, 
                h => obj.DragDelta -= h)
            .Select(x => x.EventArgs);
    }

    // DragCompletedEvent

    public static Avalonia.Controls.Primitives.Thumb OnDragCompletedHandler(this Avalonia.Controls.Primitives.Thumb obj, Action<Avalonia.Controls.Primitives.Thumb, Avalonia.Input.VectorEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        obj.AddHandler(Avalonia.Controls.Primitives.Thumb.DragCompletedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static Avalonia.Controls.Primitives.Thumb OnDragCompleted(this Avalonia.Controls.Primitives.Thumb obj, Action<Avalonia.Controls.Primitives.Thumb, IObservable<Avalonia.Input.VectorEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Thumb.DragCompletedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragCompleted(this Avalonia.Controls.Primitives.Thumb obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragCompleted += h, 
                h => obj.DragCompleted -= h)
            .Select(x => x.EventArgs);
    }
}
