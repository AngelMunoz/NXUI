// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ThumbExtensions
{
    // DragStartedEvent

    public static T OnDragStartedHandler<T>(this T obj, Action<T, Avalonia.Input.VectorEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        obj.AddHandler((Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs>)Avalonia.Controls.Primitives.Thumb.DragStartedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnDragStarted<T>(this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = obj.GetObservable((Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs>)Avalonia.Controls.Primitives.Thumb.DragStartedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragStarted(this Avalonia.Controls.Primitives.Thumb obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable((Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs>)Avalonia.Controls.Primitives.Thumb.DragStartedEvent, routes);
    }

    // DragDeltaEvent

    public static T OnDragDeltaHandler<T>(this T obj, Action<T, Avalonia.Input.VectorEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        obj.AddHandler((Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs>)Avalonia.Controls.Primitives.Thumb.DragDeltaEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnDragDelta<T>(this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = obj.GetObservable((Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs>)Avalonia.Controls.Primitives.Thumb.DragDeltaEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragDelta(this Avalonia.Controls.Primitives.Thumb obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable((Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs>)Avalonia.Controls.Primitives.Thumb.DragDeltaEvent, routes);
    }

    // DragCompletedEvent

    public static T OnDragCompletedHandler<T>(this T obj, Action<T, Avalonia.Input.VectorEventArgs> action, Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        obj.AddHandler((Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs>)Avalonia.Controls.Primitives.Thumb.DragCompletedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnDragCompleted<T>(this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = obj.GetObservable((Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs>)Avalonia.Controls.Primitives.Thumb.DragCompletedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragCompleted(this Avalonia.Controls.Primitives.Thumb obj,  Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable((Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs>)Avalonia.Controls.Primitives.Thumb.DragCompletedEvent, routes);
    }

    // DragStarted

    public static T OnDragStartedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragStarted += h, 
                h => obj.DragStarted -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragStartedEvent(this Avalonia.Controls.Primitives.Thumb obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragStarted += h, 
                h => obj.DragStarted -= h)
            .Select(x => x.EventArgs);
    }

    // DragDelta

    public static T OnDragDeltaEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragDelta += h, 
                h => obj.DragDelta -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragDeltaEvent(this Avalonia.Controls.Primitives.Thumb obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragDelta += h, 
                h => obj.DragDelta -= h)
            .Select(x => x.EventArgs);
    }

    // DragCompleted

    public static T OnDragCompletedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragCompleted += h, 
                h => obj.DragCompleted -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragCompletedEvent(this Avalonia.Controls.Primitives.Thumb obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragCompleted += h, 
                h => obj.DragCompleted -= h)
            .Select(x => x.EventArgs);
    }
}
