// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TextElementExtensions
{
    // BackgroundProperty

    public static T Background<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Documents.TextElement
    {
        obj[Avalonia.Controls.Documents.TextElement.BackgroundProperty] = value;
        return obj;
    }

    public static T Background<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Documents.TextElement
    {
        obj[Avalonia.Controls.Documents.TextElement.BackgroundProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Background<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Documents.TextElement
    {
        obj[Avalonia.Controls.Documents.TextElement.BackgroundProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindBackground(this Avalonia.Controls.Documents.TextElement obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Documents.TextElement.BackgroundProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveBackground(this Avalonia.Controls.Documents.TextElement obj)
    {
        return obj.GetObservable(Avalonia.Controls.Documents.TextElement.BackgroundProperty);
    }

    public static T OnBackground<T>(this T obj, Action<IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Documents.TextElement
    {
        var observable = obj.GetObservable(Avalonia.Controls.Documents.TextElement.BackgroundProperty);
        handler(observable);
        return obj;
    }

    // FontFamilyProperty

    public static T FontFamily<T>(this T obj, Avalonia.Media.FontFamily value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontFamilyProperty] = value;
        return obj;
    }

    public static T FontFamily<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontFamilyProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T FontFamily<T>(this T obj, IObservable<Avalonia.Media.FontFamily> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontFamilyProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFontFamily(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Documents.TextElement.FontFamilyProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.FontFamily> ObserveFontFamily(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontFamilyProperty);
    }

    public static T OnFontFamily<T>(this T obj, Action<IObservable<Avalonia.Media.FontFamily>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontFamilyProperty);
        handler(observable);
        return obj;
    }

    // FontSizeProperty

    public static T FontSize<T>(this T obj, System.Double value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontSizeProperty] = value;
        return obj;
    }

    public static T FontSize<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontSizeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T FontSize<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontSizeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFontSize(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Documents.TextElement.FontSizeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveFontSize(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontSizeProperty);
    }

    public static T OnFontSize<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontSizeProperty);
        handler(observable);
        return obj;
    }

    // FontStyleProperty

    public static T FontStyle<T>(this T obj, Avalonia.Media.FontStyle value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStyleProperty] = value;
        return obj;
    }

    public static T FontStyle<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStyleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T FontStyle<T>(this T obj, IObservable<Avalonia.Media.FontStyle> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStyleProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFontStyle(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Documents.TextElement.FontStyleProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.FontStyle> ObserveFontStyle(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontStyleProperty);
    }

    public static T OnFontStyle<T>(this T obj, Action<IObservable<Avalonia.Media.FontStyle>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontStyleProperty);
        handler(observable);
        return obj;
    }

    public static T FontStyleNormal<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStyleProperty] = Avalonia.Media.FontStyle.Normal;
        return obj;
    }

    public static T FontStyleItalic<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStyleProperty] = Avalonia.Media.FontStyle.Italic;
        return obj;
    }

    public static T FontStyleOblique<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStyleProperty] = Avalonia.Media.FontStyle.Oblique;
        return obj;
    }

    // FontWeightProperty

    public static T FontWeight<T>(this T obj, Avalonia.Media.FontWeight value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = value;
        return obj;
    }

    public static T FontWeight<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T FontWeight<T>(this T obj, IObservable<Avalonia.Media.FontWeight> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFontWeight(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.FontWeight> ObserveFontWeight(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontWeightProperty);
    }

    public static T OnFontWeight<T>(this T obj, Action<IObservable<Avalonia.Media.FontWeight>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontWeightProperty);
        handler(observable);
        return obj;
    }

    public static T FontWeightThin<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.Thin;
        return obj;
    }

    public static T FontWeightExtraLight<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.ExtraLight;
        return obj;
    }

    public static T FontWeightUltraLight<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.UltraLight;
        return obj;
    }

    public static T FontWeightLight<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.Light;
        return obj;
    }

    public static T FontWeightSemiLight<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.SemiLight;
        return obj;
    }

    public static T FontWeightNormal<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.Normal;
        return obj;
    }

    public static T FontWeightRegular<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.Regular;
        return obj;
    }

    public static T FontWeightMedium<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.Medium;
        return obj;
    }

    public static T FontWeightDemiBold<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.DemiBold;
        return obj;
    }

    public static T FontWeightSemiBold<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.SemiBold;
        return obj;
    }

    public static T FontWeightBold<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.Bold;
        return obj;
    }

    public static T FontWeightExtraBold<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.ExtraBold;
        return obj;
    }

    public static T FontWeightUltraBold<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.UltraBold;
        return obj;
    }

    public static T FontWeightBlack<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.Black;
        return obj;
    }

    public static T FontWeightHeavy<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.Heavy;
        return obj;
    }

    public static T FontWeightExtraBlack<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.ExtraBlack;
        return obj;
    }

    public static T FontWeightUltraBlack<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontWeightProperty] = Avalonia.Media.FontWeight.UltraBlack;
        return obj;
    }

    // FontStretchProperty

    public static T FontStretch<T>(this T obj, Avalonia.Media.FontStretch value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = value;
        return obj;
    }

    public static T FontStretch<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T FontStretch<T>(this T obj, IObservable<Avalonia.Media.FontStretch> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFontStretch(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.FontStretch> ObserveFontStretch(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontStretchProperty);
    }

    public static T OnFontStretch<T>(this T obj, Action<IObservable<Avalonia.Media.FontStretch>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Documents.TextElement.FontStretchProperty);
        handler(observable);
        return obj;
    }

    public static T FontStretchUltraCondensed<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = Avalonia.Media.FontStretch.UltraCondensed;
        return obj;
    }

    public static T FontStretchExtraCondensed<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = Avalonia.Media.FontStretch.ExtraCondensed;
        return obj;
    }

    public static T FontStretchCondensed<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = Avalonia.Media.FontStretch.Condensed;
        return obj;
    }

    public static T FontStretchSemiCondensed<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = Avalonia.Media.FontStretch.SemiCondensed;
        return obj;
    }

    public static T FontStretchNormal<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = Avalonia.Media.FontStretch.Normal;
        return obj;
    }

    public static T FontStretchSemiExpanded<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = Avalonia.Media.FontStretch.SemiExpanded;
        return obj;
    }

    public static T FontStretchExpanded<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = Avalonia.Media.FontStretch.Expanded;
        return obj;
    }

    public static T FontStretchExtraExpanded<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = Avalonia.Media.FontStretch.ExtraExpanded;
        return obj;
    }

    public static T FontStretchUltraExpanded<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.FontStretchProperty] = Avalonia.Media.FontStretch.UltraExpanded;
        return obj;
    }

    // ForegroundProperty

    public static T Foreground<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.ForegroundProperty] = value;
        return obj;
    }

    public static T Foreground<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.ForegroundProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Foreground<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Documents.TextElement.ForegroundProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindForeground(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Documents.TextElement.ForegroundProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveForeground(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Documents.TextElement.ForegroundProperty);
    }

    public static T OnForeground<T>(this T obj, Action<IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Documents.TextElement.ForegroundProperty);
        handler(observable);
        return obj;
    }
}
