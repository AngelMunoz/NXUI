// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class FlyoutBaseExtensions
{
    // IsOpenProperty

    public static Avalonia.Data.IBinding BindIsOpen(this Avalonia.Controls.Primitives.FlyoutBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsOpen(this Avalonia.Controls.Primitives.FlyoutBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty);
    }

    public static Avalonia.Controls.Primitives.FlyoutBase OnIsOpen(this Avalonia.Controls.Primitives.FlyoutBase obj, Action<Avalonia.Controls.Primitives.FlyoutBase, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty);
        handler(obj, observable);
        return obj;
    }

    // TargetProperty

    public static Avalonia.Data.IBinding BindTarget(this Avalonia.Controls.Primitives.FlyoutBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.Primitives.FlyoutBase.TargetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Control> ObserveTarget(this Avalonia.Controls.Primitives.FlyoutBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.TargetProperty);
    }

    public static Avalonia.Controls.Primitives.FlyoutBase OnTarget(this Avalonia.Controls.Primitives.FlyoutBase obj, Action<Avalonia.Controls.Primitives.FlyoutBase, IObservable<Avalonia.Controls.Control>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.TargetProperty);
        handler(obj, observable);
        return obj;
    }

    // PlacementProperty

    public static T Placement<T>(this T obj, Avalonia.Controls.FlyoutPlacementMode value) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = value;
        return obj;
    }

    public static T Placement<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Placement<T>(this T obj, IObservable<Avalonia.Controls.FlyoutPlacementMode> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlacement(this Avalonia.Controls.Primitives.FlyoutBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.FlyoutPlacementMode> ObservePlacement(this Avalonia.Controls.Primitives.FlyoutBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty);
    }

    public static T OnPlacement<T>(this T obj, Action<Avalonia.Controls.Primitives.FlyoutBase, IObservable<Avalonia.Controls.FlyoutPlacementMode>> handler) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty);
        handler(obj, observable);
        return obj;
    }

    public static T PlacementTop<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.Top;
        return obj;
    }

    public static T PlacementBottom<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.Bottom;
        return obj;
    }

    public static T PlacementLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.Left;
        return obj;
    }

    public static T PlacementRight<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.Right;
        return obj;
    }

    public static T PlacementTopEdgeAlignedLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.TopEdgeAlignedLeft;
        return obj;
    }

    public static T PlacementTopEdgeAlignedRight<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.TopEdgeAlignedRight;
        return obj;
    }

    public static T PlacementBottomEdgeAlignedLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.BottomEdgeAlignedLeft;
        return obj;
    }

    public static T PlacementBottomEdgeAlignedRight<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.BottomEdgeAlignedRight;
        return obj;
    }

    public static T PlacementLeftEdgeAlignedTop<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.LeftEdgeAlignedTop;
        return obj;
    }

    public static T PlacementLeftEdgeAlignedBottom<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.LeftEdgeAlignedBottom;
        return obj;
    }

    public static T PlacementRightEdgeAlignedTop<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.RightEdgeAlignedTop;
        return obj;
    }

    public static T PlacementRightEdgeAlignedBottom<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.RightEdgeAlignedBottom;
        return obj;
    }

    public static T PlacementAuto<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty] = Avalonia.Controls.FlyoutPlacementMode.Auto;
        return obj;
    }

    // ShowModeProperty

    public static T ShowMode<T>(this T obj, Avalonia.Controls.FlyoutShowMode value) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty] = value;
        return obj;
    }

    public static T ShowMode<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ShowMode<T>(this T obj, IObservable<Avalonia.Controls.FlyoutShowMode> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindShowMode(this Avalonia.Controls.Primitives.FlyoutBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.FlyoutShowMode> ObserveShowMode(this Avalonia.Controls.Primitives.FlyoutBase obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty);
    }

    public static T OnShowMode<T>(this T obj, Action<Avalonia.Controls.Primitives.FlyoutBase, IObservable<Avalonia.Controls.FlyoutShowMode>> handler) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty);
        handler(obj, observable);
        return obj;
    }

    public static T ShowModeStandard<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty] = Avalonia.Controls.FlyoutShowMode.Standard;
        return obj;
    }

    public static T ShowModeTransient<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty] = Avalonia.Controls.FlyoutShowMode.Transient;
        return obj;
    }

    public static T ShowModeTransientWithDismissOnPointerMoveAway<T>(this T obj) where T : Avalonia.Controls.Primitives.FlyoutBase
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty] = Avalonia.Controls.FlyoutShowMode.TransientWithDismissOnPointerMoveAway;
        return obj;
    }

    // AttachedFlyoutProperty

    public static T AttachedFlyout<T>(this T obj, Avalonia.Controls.Primitives.FlyoutBase value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty] = value;
        return obj;
    }

    public static T AttachedFlyout<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T AttachedFlyout<T>(this T obj, IObservable<Avalonia.Controls.Primitives.FlyoutBase> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindAttachedFlyout(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.FlyoutBase> ObserveAttachedFlyout(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty);
    }

    public static T OnAttachedFlyout<T>(this T obj, Action<Avalonia.Controls.Control, IObservable<Avalonia.Controls.Primitives.FlyoutBase>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty);
        handler(obj, observable);
        return obj;
    }
}
