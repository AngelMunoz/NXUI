// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ButtonExtensions
{
    // ClickModeProperty

    public static T ClickMode<T>(this T obj, Avalonia.Controls.ClickMode value) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.ClickModeProperty] = value;
        return obj;
    }

    public static T ClickMode<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.ClickModeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ClickMode<T>(this T obj, IObservable<Avalonia.Controls.ClickMode> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.ClickModeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindClickMode(this Avalonia.Controls.Button obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Button.ClickModeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.ClickMode> ObserveClickMode(this Avalonia.Controls.Button obj)
    {
        return obj.GetObservable(Avalonia.Controls.Button.ClickModeProperty);
    }

    public static T OnClickMode<T>(this T obj, Action<Avalonia.Controls.Button, IObservable<Avalonia.Controls.ClickMode>> handler) where T : Avalonia.Controls.Button
    {
        var observable = obj.GetObservable(Avalonia.Controls.Button.ClickModeProperty);
        handler(obj, observable);
        return obj;
    }

    public static T ClickModeRelease<T>(this T obj) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.ClickModeProperty] = Avalonia.Controls.ClickMode.Release;
        return obj;
    }

    public static T ClickModePress<T>(this T obj) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.ClickModeProperty] = Avalonia.Controls.ClickMode.Press;
        return obj;
    }

    // CommandProperty

    public static T Command<T>(this T obj, System.Windows.Input.ICommand value) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.CommandProperty] = value;
        return obj;
    }

    public static T Command<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.CommandProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Command<T>(this T obj, IObservable<System.Windows.Input.ICommand> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.CommandProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCommand(this Avalonia.Controls.Button obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Button.CommandProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Windows.Input.ICommand> ObserveCommand(this Avalonia.Controls.Button obj)
    {
        return obj.GetObservable(Avalonia.Controls.Button.CommandProperty);
    }

    public static T OnCommand<T>(this T obj, Action<Avalonia.Controls.Button, IObservable<System.Windows.Input.ICommand>> handler) where T : Avalonia.Controls.Button
    {
        var observable = obj.GetObservable(Avalonia.Controls.Button.CommandProperty);
        handler(obj, observable);
        return obj;
    }

    // CommandParameterProperty

    public static T CommandParameter<T>(this T obj, System.Object value) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.CommandParameterProperty] = value;
        return obj;
    }

    public static T CommandParameter<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.CommandParameterProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CommandParameter<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.CommandParameterProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCommandParameter(this Avalonia.Controls.Button obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Button.CommandParameterProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveCommandParameter(this Avalonia.Controls.Button obj)
    {
        return obj.GetObservable(Avalonia.Controls.Button.CommandParameterProperty);
    }

    public static T OnCommandParameter<T>(this T obj, Action<Avalonia.Controls.Button, IObservable<System.Object>> handler) where T : Avalonia.Controls.Button
    {
        var observable = obj.GetObservable(Avalonia.Controls.Button.CommandParameterProperty);
        handler(obj, observable);
        return obj;
    }

    // IsDefaultProperty

    public static T IsDefault<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.IsDefaultProperty] = value;
        return obj;
    }

    public static T IsDefault<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.IsDefaultProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsDefault<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.IsDefaultProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsDefault(this Avalonia.Controls.Button obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Button.IsDefaultProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsDefault(this Avalonia.Controls.Button obj)
    {
        return obj.GetObservable(Avalonia.Controls.Button.IsDefaultProperty);
    }

    public static T OnIsDefault<T>(this T obj, Action<Avalonia.Controls.Button, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Button
    {
        var observable = obj.GetObservable(Avalonia.Controls.Button.IsDefaultProperty);
        handler(obj, observable);
        return obj;
    }

    // IsCancelProperty

    public static T IsCancel<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.IsCancelProperty] = value;
        return obj;
    }

    public static T IsCancel<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.IsCancelProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsCancel<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.IsCancelProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsCancel(this Avalonia.Controls.Button obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Button.IsCancelProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsCancel(this Avalonia.Controls.Button obj)
    {
        return obj.GetObservable(Avalonia.Controls.Button.IsCancelProperty);
    }

    public static T OnIsCancel<T>(this T obj, Action<Avalonia.Controls.Button, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Button
    {
        var observable = obj.GetObservable(Avalonia.Controls.Button.IsCancelProperty);
        handler(obj, observable);
        return obj;
    }

    // IsPressedProperty

    public static T IsPressed<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.IsPressedProperty] = value;
        return obj;
    }

    public static T IsPressed<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.IsPressedProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsPressed<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.IsPressedProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsPressed(this Avalonia.Controls.Button obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Button.IsPressedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsPressed(this Avalonia.Controls.Button obj)
    {
        return obj.GetObservable(Avalonia.Controls.Button.IsPressedProperty);
    }

    public static T OnIsPressed<T>(this T obj, Action<Avalonia.Controls.Button, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Button
    {
        var observable = obj.GetObservable(Avalonia.Controls.Button.IsPressedProperty);
        handler(obj, observable);
        return obj;
    }

    // FlyoutProperty

    public static T Flyout<T>(this T obj, Avalonia.Controls.Primitives.FlyoutBase value) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.FlyoutProperty] = value;
        return obj;
    }

    public static T Flyout<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.FlyoutProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Flyout<T>(this T obj, IObservable<Avalonia.Controls.Primitives.FlyoutBase> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Button
    {
        obj[Avalonia.Controls.Button.FlyoutProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFlyout(this Avalonia.Controls.Button obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Button.FlyoutProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.FlyoutBase> ObserveFlyout(this Avalonia.Controls.Button obj)
    {
        return obj.GetObservable(Avalonia.Controls.Button.FlyoutProperty);
    }

    public static T OnFlyout<T>(this T obj, Action<Avalonia.Controls.Button, IObservable<Avalonia.Controls.Primitives.FlyoutBase>> handler) where T : Avalonia.Controls.Button
    {
        var observable = obj.GetObservable(Avalonia.Controls.Button.FlyoutProperty);
        handler(obj, observable);
        return obj;
    }
}
