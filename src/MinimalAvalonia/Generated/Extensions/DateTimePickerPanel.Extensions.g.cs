// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class DateTimePickerPanelExtensions
{
    // ItemHeightProperty

    public static T ItemHeight<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ItemHeightProperty] = value;
        return obj;
    }

    public static T ItemHeight<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ItemHeightProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ItemHeight<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ItemHeightProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindItemHeight(this Avalonia.Controls.Primitives.DateTimePickerPanel obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ItemHeightProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveItemHeight(this Avalonia.Controls.Primitives.DateTimePickerPanel obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.DateTimePickerPanel.ItemHeightProperty);
    }

    public static T OnItemHeight<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.DateTimePickerPanel.ItemHeightProperty);
        handler(observable);
        return obj;
    }

    // PanelTypeProperty

    public static T PanelType<T>(this T obj, Avalonia.Controls.Primitives.DateTimePickerPanelType value) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty] = value;
        return obj;
    }

    public static T PanelType<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PanelType<T>(this T obj, IObservable<Avalonia.Controls.Primitives.DateTimePickerPanelType> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPanelType(this Avalonia.Controls.Primitives.DateTimePickerPanel obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.DateTimePickerPanelType> ObservePanelType(this Avalonia.Controls.Primitives.DateTimePickerPanel obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty);
    }

    public static T OnPanelType<T>(this T obj, Action<IObservable<Avalonia.Controls.Primitives.DateTimePickerPanelType>> handler) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty);
        handler(observable);
        return obj;
    }

    public static T PanelTypeYear<T>(this T obj) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty] = Avalonia.Controls.Primitives.DateTimePickerPanelType.Year;
        return obj;
    }

    public static T PanelTypeMonth<T>(this T obj) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty] = Avalonia.Controls.Primitives.DateTimePickerPanelType.Month;
        return obj;
    }

    public static T PanelTypeDay<T>(this T obj) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty] = Avalonia.Controls.Primitives.DateTimePickerPanelType.Day;
        return obj;
    }

    public static T PanelTypeHour<T>(this T obj) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty] = Avalonia.Controls.Primitives.DateTimePickerPanelType.Hour;
        return obj;
    }

    public static T PanelTypeMinute<T>(this T obj) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty] = Avalonia.Controls.Primitives.DateTimePickerPanelType.Minute;
        return obj;
    }

    public static T PanelTypeTimePeriod<T>(this T obj) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.PanelTypeProperty] = Avalonia.Controls.Primitives.DateTimePickerPanelType.TimePeriod;
        return obj;
    }

    // ItemFormatProperty

    public static T ItemFormat<T>(this T obj, System.String value) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ItemFormatProperty] = value;
        return obj;
    }

    public static T ItemFormat<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ItemFormatProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ItemFormat<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ItemFormatProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindItemFormat(this Avalonia.Controls.Primitives.DateTimePickerPanel obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ItemFormatProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveItemFormat(this Avalonia.Controls.Primitives.DateTimePickerPanel obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.DateTimePickerPanel.ItemFormatProperty);
    }

    public static T OnItemFormat<T>(this T obj, Action<IObservable<System.String>> handler) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.DateTimePickerPanel.ItemFormatProperty);
        handler(observable);
        return obj;
    }

    // ShouldLoopProperty

    public static T ShouldLoop<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ShouldLoopProperty] = value;
        return obj;
    }

    public static T ShouldLoop<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ShouldLoopProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ShouldLoop<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ShouldLoopProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindShouldLoop(this Avalonia.Controls.Primitives.DateTimePickerPanel obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.DateTimePickerPanel.ShouldLoopProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveShouldLoop(this Avalonia.Controls.Primitives.DateTimePickerPanel obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.DateTimePickerPanel.ShouldLoopProperty);
    }

    public static T OnShouldLoop<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.DateTimePickerPanel
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.DateTimePickerPanel.ShouldLoopProperty);
        handler(observable);
        return obj;
    }
}
