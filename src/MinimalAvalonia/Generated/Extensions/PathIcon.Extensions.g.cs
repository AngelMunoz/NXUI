// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class PathIconExtensions
{
    // DataProperty

    public static T Data<T>(this T obj, Avalonia.Media.Geometry value) where T : Avalonia.Controls.PathIcon
    {
        obj[Avalonia.Controls.PathIcon.DataProperty] = value;
        return obj;
    }

    public static T Data<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.PathIcon
    {
        obj[Avalonia.Controls.PathIcon.DataProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Data<T>(this T obj, IObservable<Avalonia.Media.Geometry> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.PathIcon
    {
        obj[Avalonia.Controls.PathIcon.DataProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindData(this Avalonia.Controls.PathIcon obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.PathIcon.DataProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Geometry> ObserveData(this Avalonia.Controls.PathIcon obj)
    {
        return obj.GetObservable(Avalonia.Controls.PathIcon.DataProperty);
    }

    public static T OnData<T>(this T obj, Action<IObservable<Avalonia.Media.Geometry>> handler) where T : Avalonia.Controls.PathIcon
    {
        var observable = obj.GetObservable(Avalonia.Controls.PathIcon.DataProperty);
        handler(observable);
        return obj;
    }
}
