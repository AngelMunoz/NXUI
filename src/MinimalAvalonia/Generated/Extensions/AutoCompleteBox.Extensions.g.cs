// <auto-generated />
namespace MinimalAvalonia.Extensions;

/// <summary>
/// The minimal avalonia <see cref="Avalonia.Controls.AutoCompleteBox"/> class property extension methods.
/// </summary>
public static partial class AutoCompleteBoxExtensions
{
    // Avalonia.Controls.AutoCompleteBox.WatermarkProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.WatermarkProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Watermark<T>(this T obj, System.String value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.WatermarkProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.WatermarkProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Watermark<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.WatermarkProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.WatermarkProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Watermark<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.WatermarkProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.WatermarkProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.WatermarkProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindWatermark(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.WatermarkProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.WatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveWatermark(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.WatermarkProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.WatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWatermark<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.String>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.WatermarkProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinimumPrefixLength<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinimumPrefixLength<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinimumPrefixLength<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinimumPrefixLength(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMinimumPrefixLength(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinimumPrefixLength<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.Int32>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.MinimumPrefixLengthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinimumPopulateDelay<T>(this T obj, System.TimeSpan value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinimumPopulateDelay<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinimumPopulateDelay<T>(
        this T obj,
        IObservable<System.TimeSpan> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinimumPopulateDelay(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.TimeSpan> ObserveMinimumPopulateDelay(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinimumPopulateDelay<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.TimeSpan>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.MinimumPopulateDelayProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxDropDownHeight<T>(this T obj, System.Double value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxDropDownHeight<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxDropDownHeight<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxDropDownHeight(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMaxDropDownHeight(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxDropDownHeight<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.Double>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.MaxDropDownHeightProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTextCompletionEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTextCompletionEnabled<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTextCompletionEnabled<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsTextCompletionEnabled(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsTextCompletionEnabled(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsTextCompletionEnabled<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.IsTextCompletionEnabledProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemTemplate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemTemplate<T>(
        this T obj,
        IObservable<Avalonia.Controls.Templates.IDataTemplate> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindItemTemplate(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObserveItemTemplate(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemTemplate<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.ItemTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsDropDownOpen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsDropDownOpen<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsDropDownOpen<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsDropDownOpen(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsDropDownOpen(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsDropDownOpen<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.IsDropDownOpenProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.SelectedItemProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.SelectedItemProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItem<T>(this T obj, System.Object value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.SelectedItemProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.SelectedItemProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItem<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.SelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.SelectedItemProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItem<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.SelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.SelectedItemProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.SelectedItemProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedItem(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.SelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveSelectedItem(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.SelectedItemProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedItem<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.Object>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.SelectedItemProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.TextProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.TextProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Text<T>(this T obj, System.String value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.TextProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.TextProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Text<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.TextProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.TextProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Text<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.TextProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.TextProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.TextProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindText(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.TextProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.TextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveText(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.TextProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.TextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnText<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.String>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.TextProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.SearchTextProperty

    public static Avalonia.Data.IBinding BindSearchText(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.SearchTextProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    public static IObservable<System.String> ObserveSearchText(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.SearchTextProperty);
    }

    public static Avalonia.Controls.AutoCompleteBox OnSearchText(this Avalonia.Controls.AutoCompleteBox obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.String>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.SearchTextProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.FilterModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.FilterModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FilterMode<T>(this T obj, Avalonia.Controls.AutoCompleteFilterMode value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.FilterModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FilterMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.FilterModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.FilterModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FilterMode<T>(
        this T obj,
        IObservable<Avalonia.Controls.AutoCompleteFilterMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.FilterModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.FilterModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.FilterModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFilterMode(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.FilterModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.FilterModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.AutoCompleteFilterMode> ObserveFilterMode(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.FilterModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.FilterModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFilterMode<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<Avalonia.Controls.AutoCompleteFilterMode>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.FilterModeProperty);
        handler(obj, observable);
        return obj;
    }

    public static T FilterModeNone<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.None;
        return obj;
    }

    public static T FilterModeStartsWith<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.StartsWith;
        return obj;
    }

    public static T FilterModeStartsWithCaseSensitive<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.StartsWithCaseSensitive;
        return obj;
    }

    public static T FilterModeStartsWithOrdinal<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.StartsWithOrdinal;
        return obj;
    }

    public static T FilterModeStartsWithOrdinalCaseSensitive<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.StartsWithOrdinalCaseSensitive;
        return obj;
    }

    public static T FilterModeContains<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.Contains;
        return obj;
    }

    public static T FilterModeContainsCaseSensitive<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.ContainsCaseSensitive;
        return obj;
    }

    public static T FilterModeContainsOrdinal<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.ContainsOrdinal;
        return obj;
    }

    public static T FilterModeContainsOrdinalCaseSensitive<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.ContainsOrdinalCaseSensitive;
        return obj;
    }

    public static T FilterModeEquals<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.Equals;
        return obj;
    }

    public static T FilterModeEqualsCaseSensitive<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.EqualsCaseSensitive;
        return obj;
    }

    public static T FilterModeEqualsOrdinal<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.EqualsOrdinal;
        return obj;
    }

    public static T FilterModeEqualsOrdinalCaseSensitive<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.EqualsOrdinalCaseSensitive;
        return obj;
    }

    public static T FilterModeCustom<T>(this T obj) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.FilterModeProperty] = Avalonia.Controls.AutoCompleteFilterMode.Custom;
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.ItemFilterProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.ItemFilterProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemFilter<T>(this T obj, Avalonia.Controls.AutoCompleteFilterPredicate<System.Object> value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.ItemFilterProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.ItemFilterProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemFilter<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemFilterProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.ItemFilterProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemFilter<T>(
        this T obj,
        IObservable<Avalonia.Controls.AutoCompleteFilterPredicate<System.Object>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemFilterProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.ItemFilterProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.ItemFilterProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindItemFilter(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemFilterProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.ItemFilterProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.AutoCompleteFilterPredicate<System.Object>> ObserveItemFilter(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.ItemFilterProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.ItemFilterProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemFilter<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<Avalonia.Controls.AutoCompleteFilterPredicate<System.Object>>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.ItemFilterProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.TextFilterProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.TextFilterProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextFilter<T>(this T obj, Avalonia.Controls.AutoCompleteFilterPredicate<System.String> value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.TextFilterProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.TextFilterProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextFilter<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.TextFilterProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.TextFilterProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextFilter<T>(
        this T obj,
        IObservable<Avalonia.Controls.AutoCompleteFilterPredicate<System.String>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.TextFilterProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.TextFilterProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.TextFilterProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTextFilter(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.TextFilterProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.TextFilterProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.AutoCompleteFilterPredicate<System.String>> ObserveTextFilter(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.TextFilterProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.TextFilterProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTextFilter<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<Avalonia.Controls.AutoCompleteFilterPredicate<System.String>>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.TextFilterProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemSelector<T>(this T obj, Avalonia.Controls.AutoCompleteSelector<System.Object> value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemSelector<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemSelector<T>(
        this T obj,
        IObservable<Avalonia.Controls.AutoCompleteSelector<System.Object>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindItemSelector(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.AutoCompleteSelector<System.Object>> ObserveItemSelector(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemSelector<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<Avalonia.Controls.AutoCompleteSelector<System.Object>>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.ItemSelectorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.TextSelectorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.TextSelectorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextSelector<T>(this T obj, Avalonia.Controls.AutoCompleteSelector<System.String> value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.TextSelectorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.TextSelectorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextSelector<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.TextSelectorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.TextSelectorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextSelector<T>(
        this T obj,
        IObservable<Avalonia.Controls.AutoCompleteSelector<System.String>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.TextSelectorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.TextSelectorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.TextSelectorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTextSelector(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.TextSelectorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.TextSelectorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.AutoCompleteSelector<System.String>> ObserveTextSelector(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.TextSelectorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.TextSelectorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTextSelector<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<Avalonia.Controls.AutoCompleteSelector<System.String>>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.TextSelectorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.ItemsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.ItemsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Items<T>(this T obj, System.Collections.IEnumerable value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.ItemsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.ItemsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Items<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.ItemsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Items<T>(
        this T obj,
        IObservable<System.Collections.IEnumerable> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.ItemsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.ItemsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindItems(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.ItemsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.ItemsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Collections.IEnumerable> ObserveItems(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.ItemsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.ItemsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItems<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.Collections.IEnumerable>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.ItemsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AsyncPopulator<T>(this T obj, System.Func<System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.Object>>> value) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj[Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AsyncPopulator<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AsyncPopulator<T>(
        this T obj,
        IObservable<System.Func<System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.Object>>>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.AutoCompleteBox
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAsyncPopulator(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Func<System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.Object>>>> ObserveAsyncPopulator(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAsyncPopulator<T>(this T obj, Action<Avalonia.Controls.AutoCompleteBox, IObservable<System.Func<System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.Object>>>>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.AsyncPopulatorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.AutoCompleteBox.SelectionChangedEvent

    public static T OnSelectionChangedHandler<T>(
        this T obj,
        Action<T, Avalonia.Controls.SelectionChangedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.AutoCompleteBox
    {
        obj.AddHandler(Avalonia.Controls.AutoCompleteBox.SelectionChangedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    public static T OnSelectionChanged<T>(
        this T obj, Action<T, IObservable<Avalonia.Controls.SelectionChangedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.AutoCompleteBox.SelectionChangedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Controls.SelectionChangedEventArgs> ObserveOnSelectionChanged(
        this Avalonia.Controls.AutoCompleteBox obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.AutoCompleteBox.SelectionChangedEvent, routes);
    }

    // Avalonia.Controls.AutoCompleteBox.TextChanged

    public static T OnTextChangedEvent<T>(this T obj, Action<T, IObservable<EventArgs>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler, EventArgs>(
                h => obj.TextChanged += h, 
                h => obj.TextChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<EventArgs> ObserveOnTextChangedEvent(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler, EventArgs>(
                h => obj.TextChanged += h, 
                h => obj.TextChanged -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.AutoCompleteBox.Populating

    public static T OnPopulatingEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.PopulatingEventArgs>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.PopulatingEventArgs>, Avalonia.Controls.PopulatingEventArgs>(
                h => obj.Populating += h, 
                h => obj.Populating -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Controls.PopulatingEventArgs> ObserveOnPopulatingEvent(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.PopulatingEventArgs>, Avalonia.Controls.PopulatingEventArgs>(
                h => obj.Populating += h, 
                h => obj.Populating -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.AutoCompleteBox.Populated

    public static T OnPopulatedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.PopulatedEventArgs>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.PopulatedEventArgs>, Avalonia.Controls.PopulatedEventArgs>(
                h => obj.Populated += h, 
                h => obj.Populated -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Controls.PopulatedEventArgs> ObserveOnPopulatedEvent(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.PopulatedEventArgs>, Avalonia.Controls.PopulatedEventArgs>(
                h => obj.Populated += h, 
                h => obj.Populated -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.AutoCompleteBox.DropDownOpening

    public static T OnDropDownOpeningEvent<T>(this T obj, Action<T, IObservable<System.ComponentModel.CancelEventArgs>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler<System.ComponentModel.CancelEventArgs>, System.ComponentModel.CancelEventArgs>(
                h => obj.DropDownOpening += h, 
                h => obj.DropDownOpening -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<System.ComponentModel.CancelEventArgs> ObserveOnDropDownOpeningEvent(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler<System.ComponentModel.CancelEventArgs>, System.ComponentModel.CancelEventArgs>(
                h => obj.DropDownOpening += h, 
                h => obj.DropDownOpening -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.AutoCompleteBox.DropDownOpened

    public static T OnDropDownOpenedEvent<T>(this T obj, Action<T, IObservable<EventArgs>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler, EventArgs>(
                h => obj.DropDownOpened += h, 
                h => obj.DropDownOpened -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<EventArgs> ObserveOnDropDownOpenedEvent(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler, EventArgs>(
                h => obj.DropDownOpened += h, 
                h => obj.DropDownOpened -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.AutoCompleteBox.DropDownClosing

    public static T OnDropDownClosingEvent<T>(this T obj, Action<T, IObservable<System.ComponentModel.CancelEventArgs>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler<System.ComponentModel.CancelEventArgs>, System.ComponentModel.CancelEventArgs>(
                h => obj.DropDownClosing += h, 
                h => obj.DropDownClosing -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<System.ComponentModel.CancelEventArgs> ObserveOnDropDownClosingEvent(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler<System.ComponentModel.CancelEventArgs>, System.ComponentModel.CancelEventArgs>(
                h => obj.DropDownClosing += h, 
                h => obj.DropDownClosing -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.AutoCompleteBox.DropDownClosed

    public static T OnDropDownClosedEvent<T>(this T obj, Action<T, IObservable<EventArgs>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler, EventArgs>(
                h => obj.DropDownClosed += h, 
                h => obj.DropDownClosed -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<EventArgs> ObserveOnDropDownClosedEvent(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler, EventArgs>(
                h => obj.DropDownClosed += h, 
                h => obj.DropDownClosed -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.AutoCompleteBox.SelectionChanged

    public static T OnSelectionChangedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.SelectionChangedEventArgs>> handler) where T : Avalonia.Controls.AutoCompleteBox
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.SelectionChangedEventArgs>, Avalonia.Controls.SelectionChangedEventArgs>(
                h => obj.SelectionChanged += h, 
                h => obj.SelectionChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    public static IObservable<Avalonia.Controls.SelectionChangedEventArgs> ObserveOnSelectionChangedEvent(this Avalonia.Controls.AutoCompleteBox obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.SelectionChangedEventArgs>, Avalonia.Controls.SelectionChangedEventArgs>(
                h => obj.SelectionChanged += h, 
                h => obj.SelectionChanged -= h)
            .Select(x => x.EventArgs);
    }
}
