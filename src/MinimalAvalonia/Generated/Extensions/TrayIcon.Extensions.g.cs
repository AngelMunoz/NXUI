// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TrayIconExtensions
{
    // CommandProperty

    public static T Command<T>(this T obj, System.Windows.Input.ICommand value) where T : Avalonia.Controls.TrayIcon
    {
        obj[Avalonia.Controls.TrayIcon.CommandProperty] = value;
        return obj;
    }

    public static T Command<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TrayIcon
    {
        obj[Avalonia.Controls.TrayIcon.CommandProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Command<T>(this T obj, IObservable<System.Windows.Input.ICommand> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TrayIcon
    {
        obj[Avalonia.Controls.TrayIcon.CommandProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCommand(this Avalonia.Controls.TrayIcon obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TrayIcon.CommandProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Windows.Input.ICommand> ObserveCommand(this Avalonia.Controls.TrayIcon obj)
    {
        return obj.GetObservable(Avalonia.Controls.TrayIcon.CommandProperty);
    }

    public static T OnCommand<T>(this T obj, Action<IObservable<System.Windows.Input.ICommand>> handler) where T : Avalonia.Controls.TrayIcon
    {
        var observable = obj.GetObservable(Avalonia.Controls.TrayIcon.CommandProperty);
        handler(observable);
        return obj;
    }

    // IconsProperty

    public static T Icons<T>(this T obj, Avalonia.Controls.TrayIcons value) where T : Avalonia.Application
    {
        obj[Avalonia.Controls.TrayIcon.IconsProperty] = value;
        return obj;
    }

    public static T Icons<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Application
    {
        obj[Avalonia.Controls.TrayIcon.IconsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Icons<T>(this T obj, IObservable<Avalonia.Controls.TrayIcons> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Application
    {
        obj[Avalonia.Controls.TrayIcon.IconsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIcons(this Avalonia.Application obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TrayIcon.IconsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.TrayIcons> ObserveIcons(this Avalonia.Application obj)
    {
        return obj.GetObservable(Avalonia.Controls.TrayIcon.IconsProperty);
    }

    public static T OnIcons<T>(this T obj, Action<IObservable<Avalonia.Controls.TrayIcons>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetObservable(Avalonia.Controls.TrayIcon.IconsProperty);
        handler(observable);
        return obj;
    }

    // MenuProperty

    public static T Menu<T>(this T obj, Avalonia.Controls.NativeMenu value) where T : Avalonia.Controls.TrayIcon
    {
        obj[Avalonia.Controls.TrayIcon.MenuProperty] = value;
        return obj;
    }

    public static T Menu<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TrayIcon
    {
        obj[Avalonia.Controls.TrayIcon.MenuProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Menu<T>(this T obj, IObservable<Avalonia.Controls.NativeMenu> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TrayIcon
    {
        obj[Avalonia.Controls.TrayIcon.MenuProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMenu(this Avalonia.Controls.TrayIcon obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TrayIcon.MenuProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.NativeMenu> ObserveMenu(this Avalonia.Controls.TrayIcon obj)
    {
        return obj.GetObservable(Avalonia.Controls.TrayIcon.MenuProperty);
    }

    public static T OnMenu<T>(this T obj, Action<IObservable<Avalonia.Controls.NativeMenu>> handler) where T : Avalonia.Controls.TrayIcon
    {
        var observable = obj.GetObservable(Avalonia.Controls.TrayIcon.MenuProperty);
        handler(observable);
        return obj;
    }

    // ToolTipTextProperty

    public static T ToolTipText<T>(this T obj, System.String value) where T : Avalonia.Controls.TrayIcon
    {
        obj[Avalonia.Controls.TrayIcon.ToolTipTextProperty] = value;
        return obj;
    }

    public static T ToolTipText<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TrayIcon
    {
        obj[Avalonia.Controls.TrayIcon.ToolTipTextProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ToolTipText<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TrayIcon
    {
        obj[Avalonia.Controls.TrayIcon.ToolTipTextProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindToolTipText(this Avalonia.Controls.TrayIcon obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TrayIcon.ToolTipTextProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveToolTipText(this Avalonia.Controls.TrayIcon obj)
    {
        return obj.GetObservable(Avalonia.Controls.TrayIcon.ToolTipTextProperty);
    }

    public static T OnToolTipText<T>(this T obj, Action<IObservable<System.String>> handler) where T : Avalonia.Controls.TrayIcon
    {
        var observable = obj.GetObservable(Avalonia.Controls.TrayIcon.ToolTipTextProperty);
        handler(observable);
        return obj;
    }
}
