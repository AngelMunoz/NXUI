// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ComboBoxExtensions
{
    // IsDropDownOpenProperty

    public static T IsDropDownOpen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.IsDropDownOpenProperty] = value;
        return obj;
    }

    public static T IsDropDownOpen<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.IsDropDownOpenProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsDropDownOpen<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.IsDropDownOpenProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsDropDownOpen(this Avalonia.Controls.ComboBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ComboBox.IsDropDownOpenProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsDropDownOpen(this Avalonia.Controls.ComboBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.ComboBox.IsDropDownOpenProperty);
    }

    public static T OnIsDropDownOpen<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ComboBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.ComboBox.IsDropDownOpenProperty);
        handler(observable);
        return obj;
    }

    // MaxDropDownHeightProperty

    public static T MaxDropDownHeight<T>(this T obj, System.Double value) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.MaxDropDownHeightProperty] = value;
        return obj;
    }

    public static T MaxDropDownHeight<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.MaxDropDownHeightProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T MaxDropDownHeight<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.MaxDropDownHeightProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaxDropDownHeight(this Avalonia.Controls.ComboBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ComboBox.MaxDropDownHeightProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveMaxDropDownHeight(this Avalonia.Controls.ComboBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.ComboBox.MaxDropDownHeightProperty);
    }

    public static T OnMaxDropDownHeight<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.ComboBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.ComboBox.MaxDropDownHeightProperty);
        handler(observable);
        return obj;
    }

    // SelectionBoxItemProperty

    public static Avalonia.Data.IBinding BindSelectionBoxItem(this Avalonia.Controls.ComboBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.ComboBox.SelectionBoxItemProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveSelectionBoxItem(this Avalonia.Controls.ComboBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.ComboBox.SelectionBoxItemProperty);
    }

    public static Avalonia.Controls.ComboBox OnSelectionBoxItem(this Avalonia.Controls.ComboBox obj, Action<IObservable<System.Object>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.ComboBox.SelectionBoxItemProperty);
        handler(observable);
        return obj;
    }

    // PlaceholderTextProperty

    public static T PlaceholderText<T>(this T obj, System.String value) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.PlaceholderTextProperty] = value;
        return obj;
    }

    public static T PlaceholderText<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.PlaceholderTextProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlaceholderText<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.PlaceholderTextProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlaceholderText(this Avalonia.Controls.ComboBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ComboBox.PlaceholderTextProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObservePlaceholderText(this Avalonia.Controls.ComboBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.ComboBox.PlaceholderTextProperty);
    }

    public static T OnPlaceholderText<T>(this T obj, Action<IObservable<System.String>> handler) where T : Avalonia.Controls.ComboBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.ComboBox.PlaceholderTextProperty);
        handler(observable);
        return obj;
    }

    // PlaceholderForegroundProperty

    public static T PlaceholderForeground<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.PlaceholderForegroundProperty] = value;
        return obj;
    }

    public static T PlaceholderForeground<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.PlaceholderForegroundProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlaceholderForeground<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.ComboBox
    {
        obj[Avalonia.Controls.ComboBox.PlaceholderForegroundProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlaceholderForeground(this Avalonia.Controls.ComboBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ComboBox.PlaceholderForegroundProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObservePlaceholderForeground(this Avalonia.Controls.ComboBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.ComboBox.PlaceholderForegroundProperty);
    }

    public static T OnPlaceholderForeground<T>(this T obj, Action<IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.ComboBox
    {
        var observable = obj.GetObservable(Avalonia.Controls.ComboBox.PlaceholderForegroundProperty);
        handler(observable);
        return obj;
    }
}
