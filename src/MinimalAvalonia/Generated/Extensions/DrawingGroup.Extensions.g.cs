// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class DrawingGroupExtensions
{
    // OpacityProperty

    public static T Opacity<T>(this T obj, System.Double value) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.OpacityProperty] = value;
        return obj;
    }

    public static T Opacity<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.OpacityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Opacity<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.OpacityProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOpacity(this Avalonia.Media.DrawingGroup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.DrawingGroup.OpacityProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveOpacity(this Avalonia.Media.DrawingGroup obj)
    {
        return obj.GetObservable(Avalonia.Media.DrawingGroup.OpacityProperty);
    }

    public static T OnOpacity<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Media.DrawingGroup
    {
        var observable = obj.GetObservable(Avalonia.Media.DrawingGroup.OpacityProperty);
        handler(observable);
        return obj;
    }

    // TransformProperty

    public static T Transform<T>(this T obj, Avalonia.Media.Transform value) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.TransformProperty] = value;
        return obj;
    }

    public static T Transform<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.TransformProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Transform<T>(this T obj, IObservable<Avalonia.Media.Transform> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.TransformProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTransform(this Avalonia.Media.DrawingGroup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.DrawingGroup.TransformProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Transform> ObserveTransform(this Avalonia.Media.DrawingGroup obj)
    {
        return obj.GetObservable(Avalonia.Media.DrawingGroup.TransformProperty);
    }

    public static T OnTransform<T>(this T obj, Action<IObservable<Avalonia.Media.Transform>> handler) where T : Avalonia.Media.DrawingGroup
    {
        var observable = obj.GetObservable(Avalonia.Media.DrawingGroup.TransformProperty);
        handler(observable);
        return obj;
    }

    // ClipGeometryProperty

    public static T ClipGeometry<T>(this T obj, Avalonia.Media.Geometry value) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.ClipGeometryProperty] = value;
        return obj;
    }

    public static T ClipGeometry<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.ClipGeometryProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ClipGeometry<T>(this T obj, IObservable<Avalonia.Media.Geometry> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.ClipGeometryProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindClipGeometry(this Avalonia.Media.DrawingGroup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.DrawingGroup.ClipGeometryProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Geometry> ObserveClipGeometry(this Avalonia.Media.DrawingGroup obj)
    {
        return obj.GetObservable(Avalonia.Media.DrawingGroup.ClipGeometryProperty);
    }

    public static T OnClipGeometry<T>(this T obj, Action<IObservable<Avalonia.Media.Geometry>> handler) where T : Avalonia.Media.DrawingGroup
    {
        var observable = obj.GetObservable(Avalonia.Media.DrawingGroup.ClipGeometryProperty);
        handler(observable);
        return obj;
    }

    // OpacityMaskProperty

    public static T OpacityMask<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.OpacityMaskProperty] = value;
        return obj;
    }

    public static T OpacityMask<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.OpacityMaskProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T OpacityMask<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.DrawingGroup
    {
        obj[Avalonia.Media.DrawingGroup.OpacityMaskProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOpacityMask(this Avalonia.Media.DrawingGroup obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.DrawingGroup.OpacityMaskProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveOpacityMask(this Avalonia.Media.DrawingGroup obj)
    {
        return obj.GetObservable(Avalonia.Media.DrawingGroup.OpacityMaskProperty);
    }

    public static T OnOpacityMask<T>(this T obj, Action<IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Media.DrawingGroup
    {
        var observable = obj.GetObservable(Avalonia.Media.DrawingGroup.OpacityMaskProperty);
        handler(observable);
        return obj;
    }
}
