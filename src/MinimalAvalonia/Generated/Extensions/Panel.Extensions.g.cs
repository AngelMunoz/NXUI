// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class PanelExtensions
{
    // BackgroundProperty

    public static T Background<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Panel
    {
        obj[Avalonia.Controls.Panel.BackgroundProperty] = value;
        return obj;
    }

    public static T Background<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Panel
    {
        obj[Avalonia.Controls.Panel.BackgroundProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Background<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Panel
    {
        obj[Avalonia.Controls.Panel.BackgroundProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindBackground(this Avalonia.Controls.Panel obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Panel.BackgroundProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveBackground(this Avalonia.Controls.Panel obj)
    {
        return obj.GetObservable(Avalonia.Controls.Panel.BackgroundProperty);
    }

    public static T OnBackground<T>(this T obj, Action<Avalonia.Controls.Panel, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Panel
    {
        var observable = obj.GetObservable(Avalonia.Controls.Panel.BackgroundProperty);
        handler(obj, observable);
        return obj;
    }
}
