// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ShapeExtensions
{
    // FillProperty

    public static T Fill<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.FillProperty] = value;
        return obj;
    }

    public static T Fill<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.FillProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Fill<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.FillProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFill(this Avalonia.Controls.Shapes.Shape obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Shape.FillProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveFill(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.FillProperty);
    }

    public static T OnFill<T>(this T obj, Action<IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.FillProperty);
        handler(observable);
        return obj;
    }

    // StretchProperty

    public static T Stretch<T>(this T obj, Avalonia.Media.Stretch value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = value;
        return obj;
    }

    public static T Stretch<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Stretch<T>(this T obj, IObservable<Avalonia.Media.Stretch> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindStretch(this Avalonia.Controls.Shapes.Shape obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Shape.StretchProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Stretch> ObserveStretch(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StretchProperty);
    }

    public static T OnStretch<T>(this T obj, Action<IObservable<Avalonia.Media.Stretch>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StretchProperty);
        handler(observable);
        return obj;
    }

    public static T StretchNone<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.None;
        return obj;
    }

    public static T StretchFill<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.Fill;
        return obj;
    }

    public static T StretchUniform<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.Uniform;
        return obj;
    }

    public static T StretchUniformToFill<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StretchProperty] = Avalonia.Media.Stretch.UniformToFill;
        return obj;
    }

    // StrokeProperty

    public static T Stroke<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeProperty] = value;
        return obj;
    }

    public static T Stroke<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Stroke<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindStroke(this Avalonia.Controls.Shapes.Shape obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Shape.StrokeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveStroke(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeProperty);
    }

    public static T OnStroke<T>(this T obj, Action<IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeProperty);
        handler(observable);
        return obj;
    }

    // StrokeDashArrayProperty

    public static T StrokeDashArray<T>(this T obj, Avalonia.Collections.AvaloniaList<System.Double> value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty] = value;
        return obj;
    }

    public static T StrokeDashArray<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T StrokeDashArray<T>(this T obj, IObservable<Avalonia.Collections.AvaloniaList<System.Double>> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindStrokeDashArray(this Avalonia.Controls.Shapes.Shape obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Collections.AvaloniaList<System.Double>> ObserveStrokeDashArray(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty);
    }

    public static T OnStrokeDashArray<T>(this T obj, Action<IObservable<Avalonia.Collections.AvaloniaList<System.Double>>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeDashArrayProperty);
        handler(observable);
        return obj;
    }

    // StrokeDashOffsetProperty

    public static T StrokeDashOffset<T>(this T obj, System.Double value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty] = value;
        return obj;
    }

    public static T StrokeDashOffset<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T StrokeDashOffset<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindStrokeDashOffset(this Avalonia.Controls.Shapes.Shape obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveStrokeDashOffset(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty);
    }

    public static T OnStrokeDashOffset<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeDashOffsetProperty);
        handler(observable);
        return obj;
    }

    // StrokeThicknessProperty

    public static T StrokeThickness<T>(this T obj, System.Double value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty] = value;
        return obj;
    }

    public static T StrokeThickness<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T StrokeThickness<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindStrokeThickness(this Avalonia.Controls.Shapes.Shape obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveStrokeThickness(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty);
    }

    public static T OnStrokeThickness<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeThicknessProperty);
        handler(observable);
        return obj;
    }

    // StrokeLineCapProperty

    public static T StrokeLineCap<T>(this T obj, Avalonia.Media.PenLineCap value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = value;
        return obj;
    }

    public static T StrokeLineCap<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T StrokeLineCap<T>(this T obj, IObservable<Avalonia.Media.PenLineCap> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindStrokeLineCap(this Avalonia.Controls.Shapes.Shape obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.PenLineCap> ObserveStrokeLineCap(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty);
    }

    public static T OnStrokeLineCap<T>(this T obj, Action<IObservable<Avalonia.Media.PenLineCap>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty);
        handler(observable);
        return obj;
    }

    public static T StrokeLineCapFlat<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Flat;
        return obj;
    }

    public static T StrokeLineCapRound<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Round;
        return obj;
    }

    public static T StrokeLineCapSquare<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Square;
        return obj;
    }

    // StrokeJoinProperty

    public static T StrokeJoin<T>(this T obj, Avalonia.Media.PenLineJoin value) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = value;
        return obj;
    }

    public static T StrokeJoin<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T StrokeJoin<T>(this T obj, IObservable<Avalonia.Media.PenLineJoin> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindStrokeJoin(this Avalonia.Controls.Shapes.Shape obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.PenLineJoin> ObserveStrokeJoin(this Avalonia.Controls.Shapes.Shape obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeJoinProperty);
    }

    public static T OnStrokeJoin<T>(this T obj, Action<IObservable<Avalonia.Media.PenLineJoin>> handler) where T : Avalonia.Controls.Shapes.Shape
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Shape.StrokeJoinProperty);
        handler(observable);
        return obj;
    }

    public static T StrokeJoinBevel<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = Avalonia.Media.PenLineJoin.Bevel;
        return obj;
    }

    public static T StrokeJoinMiter<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = Avalonia.Media.PenLineJoin.Miter;
        return obj;
    }

    public static T StrokeJoinRound<T>(this T obj) where T : Avalonia.Controls.Shapes.Shape
    {
        obj[Avalonia.Controls.Shapes.Shape.StrokeJoinProperty] = Avalonia.Media.PenLineJoin.Round;
        return obj;
    }
}
