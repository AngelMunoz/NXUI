// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class InputElementSetters
{
    // FocusableProperty

    public static Style SetInputElementFocusable(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.FocusableProperty, value));
        return style;
    }

    public static Style SetInputElementFocusable(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.FocusableProperty, binding));
        return style;
    }

    public static Style SetInputElementFocusable(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.FocusableProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetInputElementFocusable(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.FocusableProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetInputElementFocusable(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.FocusableProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetInputElementFocusable(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.FocusableProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsEnabledProperty

    public static Style SetInputElementIsEnabled(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEnabledProperty, value));
        return style;
    }

    public static Style SetInputElementIsEnabled(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEnabledProperty, binding));
        return style;
    }

    public static Style SetInputElementIsEnabled(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEnabledProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetInputElementIsEnabled(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEnabledProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsEnabled(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEnabledProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsEnabled(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEnabledProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsEffectivelyEnabledProperty

    public static Style SetInputElementIsEffectivelyEnabled(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEffectivelyEnabledProperty, value));
        return style;
    }

    public static Style SetInputElementIsEffectivelyEnabled(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEffectivelyEnabledProperty, binding));
        return style;
    }

    public static Style SetInputElementIsEffectivelyEnabled(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEffectivelyEnabledProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetInputElementIsEffectivelyEnabled(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEffectivelyEnabledProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsEffectivelyEnabled(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEffectivelyEnabledProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsEffectivelyEnabled(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsEffectivelyEnabledProperty, observable.ToBinding()));
        return keyFrame;
    }

    // CursorProperty

    public static Style SetInputElementCursor(this Style style, Avalonia.Input.Cursor value)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.CursorProperty, value));
        return style;
    }

    public static Style SetInputElementCursor(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.CursorProperty, binding));
        return style;
    }

    public static Style SetInputElementCursor(this Style style, IObservable<Avalonia.Input.Cursor> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.CursorProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetInputElementCursor(this KeyFrame keyFrame, Avalonia.Input.Cursor value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.CursorProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetInputElementCursor(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.CursorProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetInputElementCursor(this KeyFrame keyFrame, IObservable<Avalonia.Input.Cursor> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.CursorProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsKeyboardFocusWithinProperty

    public static Style SetInputElementIsKeyboardFocusWithin(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty, value));
        return style;
    }

    public static Style SetInputElementIsKeyboardFocusWithin(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty, binding));
        return style;
    }

    public static Style SetInputElementIsKeyboardFocusWithin(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetInputElementIsKeyboardFocusWithin(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsKeyboardFocusWithin(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsKeyboardFocusWithin(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsKeyboardFocusWithinProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsFocusedProperty

    public static Style SetInputElementIsFocused(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsFocusedProperty, value));
        return style;
    }

    public static Style SetInputElementIsFocused(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsFocusedProperty, binding));
        return style;
    }

    public static Style SetInputElementIsFocused(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsFocusedProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetInputElementIsFocused(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsFocusedProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsFocused(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsFocusedProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsFocused(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsFocusedProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsHitTestVisibleProperty

    public static Style SetInputElementIsHitTestVisible(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsHitTestVisibleProperty, value));
        return style;
    }

    public static Style SetInputElementIsHitTestVisible(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsHitTestVisibleProperty, binding));
        return style;
    }

    public static Style SetInputElementIsHitTestVisible(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsHitTestVisibleProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetInputElementIsHitTestVisible(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsHitTestVisibleProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsHitTestVisible(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsHitTestVisibleProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsHitTestVisible(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsHitTestVisibleProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsPointerOverProperty

    public static Style SetInputElementIsPointerOver(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsPointerOverProperty, value));
        return style;
    }

    public static Style SetInputElementIsPointerOver(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsPointerOverProperty, binding));
        return style;
    }

    public static Style SetInputElementIsPointerOver(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Input.InputElement.IsPointerOverProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetInputElementIsPointerOver(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsPointerOverProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsPointerOver(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsPointerOverProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetInputElementIsPointerOver(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Input.InputElement.IsPointerOverProperty, observable.ToBinding()));
        return keyFrame;
    }

}
