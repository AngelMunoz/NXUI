// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class OverlayPopupHostSetters
{
    // TransformProperty

    public static Style SetOverlayPopupHostTransform(this Style style, Avalonia.Media.Transform value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty, value));
        return style;
    }

    public static Style SetOverlayPopupHostTransform(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty, binding));
        return style;
    }

    public static Style SetOverlayPopupHostTransform(this Style style, IObservable<Avalonia.Media.Transform> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetOverlayPopupHostTransform(this KeyFrame keyFrame, Avalonia.Media.Transform value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetOverlayPopupHostTransform(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetOverlayPopupHostTransform(this KeyFrame keyFrame, IObservable<Avalonia.Media.Transform> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.OverlayPopupHost.TransformProperty, observable.ToBinding()));
        return keyFrame;
    }
}
