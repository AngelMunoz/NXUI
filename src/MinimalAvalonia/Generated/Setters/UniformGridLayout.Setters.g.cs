// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class UniformGridLayoutSetters
{
    // ItemsJustificationProperty

    public static Style SetUniformGridLayoutItemsJustification(this Style style, Avalonia.Layout.UniformGridLayoutItemsJustification value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty, value));
        return style;
    }

    public static Style SetUniformGridLayoutItemsJustification(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty, binding));
        return style;
    }

    public static Style SetUniformGridLayoutItemsJustification(this Style style, IObservable<Avalonia.Layout.UniformGridLayoutItemsJustification> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetUniformGridLayoutItemsJustification(this KeyFrame keyFrame, Avalonia.Layout.UniformGridLayoutItemsJustification value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutItemsJustification(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutItemsJustification(this KeyFrame keyFrame, IObservable<Avalonia.Layout.UniformGridLayoutItemsJustification> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ItemsStretchProperty

    public static Style SetUniformGridLayoutItemsStretch(this Style style, Avalonia.Layout.UniformGridLayoutItemsStretch value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty, value));
        return style;
    }

    public static Style SetUniformGridLayoutItemsStretch(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty, binding));
        return style;
    }

    public static Style SetUniformGridLayoutItemsStretch(this Style style, IObservable<Avalonia.Layout.UniformGridLayoutItemsStretch> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetUniformGridLayoutItemsStretch(this KeyFrame keyFrame, Avalonia.Layout.UniformGridLayoutItemsStretch value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutItemsStretch(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutItemsStretch(this KeyFrame keyFrame, IObservable<Avalonia.Layout.UniformGridLayoutItemsStretch> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty, observable.ToBinding()));
        return keyFrame;
    }

    // MinColumnSpacingProperty

    public static Style SetUniformGridLayoutMinColumnSpacing(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty, value));
        return style;
    }

    public static Style SetUniformGridLayoutMinColumnSpacing(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty, binding));
        return style;
    }

    public static Style SetUniformGridLayoutMinColumnSpacing(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetUniformGridLayoutMinColumnSpacing(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMinColumnSpacing(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMinColumnSpacing(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty, observable.ToBinding()));
        return keyFrame;
    }

    // MinItemHeightProperty

    public static Style SetUniformGridLayoutMinItemHeight(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty, value));
        return style;
    }

    public static Style SetUniformGridLayoutMinItemHeight(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty, binding));
        return style;
    }

    public static Style SetUniformGridLayoutMinItemHeight(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetUniformGridLayoutMinItemHeight(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMinItemHeight(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMinItemHeight(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty, observable.ToBinding()));
        return keyFrame;
    }

    // MinItemWidthProperty

    public static Style SetUniformGridLayoutMinItemWidth(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty, value));
        return style;
    }

    public static Style SetUniformGridLayoutMinItemWidth(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty, binding));
        return style;
    }

    public static Style SetUniformGridLayoutMinItemWidth(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetUniformGridLayoutMinItemWidth(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMinItemWidth(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMinItemWidth(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty, observable.ToBinding()));
        return keyFrame;
    }

    // MinRowSpacingProperty

    public static Style SetUniformGridLayoutMinRowSpacing(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty, value));
        return style;
    }

    public static Style SetUniformGridLayoutMinRowSpacing(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty, binding));
        return style;
    }

    public static Style SetUniformGridLayoutMinRowSpacing(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetUniformGridLayoutMinRowSpacing(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMinRowSpacing(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMinRowSpacing(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty, observable.ToBinding()));
        return keyFrame;
    }

    // MaximumRowsOrColumnsProperty

    public static Style SetUniformGridLayoutMaximumRowsOrColumns(this Style style, System.Int32 value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty, value));
        return style;
    }

    public static Style SetUniformGridLayoutMaximumRowsOrColumns(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty, binding));
        return style;
    }

    public static Style SetUniformGridLayoutMaximumRowsOrColumns(this Style style, IObservable<System.Int32> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetUniformGridLayoutMaximumRowsOrColumns(this KeyFrame keyFrame, System.Int32 value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMaximumRowsOrColumns(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutMaximumRowsOrColumns(this KeyFrame keyFrame, IObservable<System.Int32> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty, observable.ToBinding()));
        return keyFrame;
    }

    // OrientationProperty

    public static Style SetUniformGridLayoutOrientation(this Style style, Avalonia.Layout.Orientation value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.OrientationProperty, value));
        return style;
    }

    public static Style SetUniformGridLayoutOrientation(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.OrientationProperty, binding));
        return style;
    }

    public static Style SetUniformGridLayoutOrientation(this Style style, IObservable<Avalonia.Layout.Orientation> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.OrientationProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetUniformGridLayoutOrientation(this KeyFrame keyFrame, Avalonia.Layout.Orientation value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.OrientationProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutOrientation(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.OrientationProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetUniformGridLayoutOrientation(this KeyFrame keyFrame, IObservable<Avalonia.Layout.Orientation> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.UniformGridLayout.OrientationProperty, observable.ToBinding()));
        return keyFrame;
    }
}
