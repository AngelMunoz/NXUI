// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class FlyoutBaseSetters
{
    // IsOpenProperty

    public static Style SetFlyoutBaseIsOpen(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty, value));
        return style;
    }

    public static Style SetFlyoutBaseIsOpen(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty, binding));
        return style;
    }

    public static Style SetFlyoutBaseIsOpen(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetFlyoutBaseIsOpen(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBaseIsOpen(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBaseIsOpen(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.IsOpenProperty, observable.ToBinding()));
        return keyFrame;
    }

    // TargetProperty

    public static Style SetFlyoutBaseTarget(this Style style, Avalonia.Controls.Control value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.TargetProperty, value));
        return style;
    }

    public static Style SetFlyoutBaseTarget(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.TargetProperty, binding));
        return style;
    }

    public static Style SetFlyoutBaseTarget(this Style style, IObservable<Avalonia.Controls.Control> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.TargetProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetFlyoutBaseTarget(this KeyFrame keyFrame, Avalonia.Controls.Control value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.TargetProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBaseTarget(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.TargetProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBaseTarget(this KeyFrame keyFrame, IObservable<Avalonia.Controls.Control> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.TargetProperty, observable.ToBinding()));
        return keyFrame;
    }

    // PlacementProperty

    public static Style SetFlyoutBasePlacement(this Style style, Avalonia.Controls.FlyoutPlacementMode value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty, value));
        return style;
    }

    public static Style SetFlyoutBasePlacement(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty, binding));
        return style;
    }

    public static Style SetFlyoutBasePlacement(this Style style, IObservable<Avalonia.Controls.FlyoutPlacementMode> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetFlyoutBasePlacement(this KeyFrame keyFrame, Avalonia.Controls.FlyoutPlacementMode value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBasePlacement(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBasePlacement(this KeyFrame keyFrame, IObservable<Avalonia.Controls.FlyoutPlacementMode> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.PlacementProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ShowModeProperty

    public static Style SetFlyoutBaseShowMode(this Style style, Avalonia.Controls.FlyoutShowMode value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty, value));
        return style;
    }

    public static Style SetFlyoutBaseShowMode(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty, binding));
        return style;
    }

    public static Style SetFlyoutBaseShowMode(this Style style, IObservable<Avalonia.Controls.FlyoutShowMode> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetFlyoutBaseShowMode(this KeyFrame keyFrame, Avalonia.Controls.FlyoutShowMode value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBaseShowMode(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBaseShowMode(this KeyFrame keyFrame, IObservable<Avalonia.Controls.FlyoutShowMode> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.ShowModeProperty, observable.ToBinding()));
        return keyFrame;
    }

    // AttachedFlyoutProperty

    public static Style SetFlyoutBaseAttachedFlyout(this Style style, Avalonia.Controls.Primitives.FlyoutBase value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty, value));
        return style;
    }

    public static Style SetFlyoutBaseAttachedFlyout(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty, binding));
        return style;
    }

    public static Style SetFlyoutBaseAttachedFlyout(this Style style, IObservable<Avalonia.Controls.Primitives.FlyoutBase> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetFlyoutBaseAttachedFlyout(this KeyFrame keyFrame, Avalonia.Controls.Primitives.FlyoutBase value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBaseAttachedFlyout(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetFlyoutBaseAttachedFlyout(this KeyFrame keyFrame, IObservable<Avalonia.Controls.Primitives.FlyoutBase> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty, observable.ToBinding()));
        return keyFrame;
    }
}
