// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class SliderSetters
{
    // OrientationProperty

    public static Style SetSliderOrientation(this Style style, Avalonia.Layout.Orientation value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.OrientationProperty, value));
        return style;
    }

    public static Style SetSliderOrientation(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.OrientationProperty, binding));
        return style;
    }

    public static Style SetSliderOrientation(this Style style, IObservable<Avalonia.Layout.Orientation> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.OrientationProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetSliderOrientation(this KeyFrame keyFrame, Avalonia.Layout.Orientation value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.OrientationProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetSliderOrientation(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.OrientationProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetSliderOrientation(this KeyFrame keyFrame, IObservable<Avalonia.Layout.Orientation> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.OrientationProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsDirectionReversedProperty

    public static Style SetSliderIsDirectionReversed(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.IsDirectionReversedProperty, value));
        return style;
    }

    public static Style SetSliderIsDirectionReversed(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.IsDirectionReversedProperty, binding));
        return style;
    }

    public static Style SetSliderIsDirectionReversed(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.IsDirectionReversedProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetSliderIsDirectionReversed(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.IsDirectionReversedProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetSliderIsDirectionReversed(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.IsDirectionReversedProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetSliderIsDirectionReversed(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.IsDirectionReversedProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsSnapToTickEnabledProperty

    public static Style SetSliderIsSnapToTickEnabled(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.IsSnapToTickEnabledProperty, value));
        return style;
    }

    public static Style SetSliderIsSnapToTickEnabled(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.IsSnapToTickEnabledProperty, binding));
        return style;
    }

    public static Style SetSliderIsSnapToTickEnabled(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.IsSnapToTickEnabledProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetSliderIsSnapToTickEnabled(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.IsSnapToTickEnabledProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetSliderIsSnapToTickEnabled(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.IsSnapToTickEnabledProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetSliderIsSnapToTickEnabled(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.IsSnapToTickEnabledProperty, observable.ToBinding()));
        return keyFrame;
    }

    // TickFrequencyProperty

    public static Style SetSliderTickFrequency(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.TickFrequencyProperty, value));
        return style;
    }

    public static Style SetSliderTickFrequency(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.TickFrequencyProperty, binding));
        return style;
    }

    public static Style SetSliderTickFrequency(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.TickFrequencyProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetSliderTickFrequency(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.TickFrequencyProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetSliderTickFrequency(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.TickFrequencyProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetSliderTickFrequency(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.TickFrequencyProperty, observable.ToBinding()));
        return keyFrame;
    }

    // TickPlacementProperty

    public static Style SetSliderTickPlacement(this Style style, Avalonia.Controls.TickPlacement value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.TickPlacementProperty, value));
        return style;
    }

    public static Style SetSliderTickPlacement(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.TickPlacementProperty, binding));
        return style;
    }

    public static Style SetSliderTickPlacement(this Style style, IObservable<Avalonia.Controls.TickPlacement> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.TickPlacementProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetSliderTickPlacement(this KeyFrame keyFrame, Avalonia.Controls.TickPlacement value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.TickPlacementProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetSliderTickPlacement(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.TickPlacementProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetSliderTickPlacement(this KeyFrame keyFrame, IObservable<Avalonia.Controls.TickPlacement> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.TickPlacementProperty, observable.ToBinding()));
        return keyFrame;
    }

    // TicksProperty

    public static Style SetSliderTicks(this Style style, Avalonia.Collections.AvaloniaList<System.Double> value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.TicksProperty, value));
        return style;
    }

    public static Style SetSliderTicks(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.TicksProperty, binding));
        return style;
    }

    public static Style SetSliderTicks(this Style style, IObservable<Avalonia.Collections.AvaloniaList<System.Double>> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Slider.TicksProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetSliderTicks(this KeyFrame keyFrame, Avalonia.Collections.AvaloniaList<System.Double> value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.TicksProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetSliderTicks(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.TicksProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetSliderTicks(this KeyFrame keyFrame, IObservable<Avalonia.Collections.AvaloniaList<System.Double>> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Slider.TicksProperty, observable.ToBinding()));
        return keyFrame;
    }
}
