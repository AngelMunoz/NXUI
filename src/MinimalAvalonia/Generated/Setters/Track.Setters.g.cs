// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TrackSetters
{
    // MinimumProperty

    public static Style SetTrackMinimum(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MinimumProperty, value));
        return style;
    }

    public static Style SetTrackMinimum(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MinimumProperty, binding));
        return style;
    }

    public static Style SetTrackMinimum(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MinimumProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackMinimum(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MinimumProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackMinimum(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MinimumProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackMinimum(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MinimumProperty, observable.ToBinding()));
        return keyFrame;
    }

    // MaximumProperty

    public static Style SetTrackMaximum(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MaximumProperty, value));
        return style;
    }

    public static Style SetTrackMaximum(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MaximumProperty, binding));
        return style;
    }

    public static Style SetTrackMaximum(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MaximumProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackMaximum(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MaximumProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackMaximum(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MaximumProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackMaximum(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.MaximumProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ValueProperty

    public static Style SetTrackValue(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ValueProperty, value));
        return style;
    }

    public static Style SetTrackValue(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ValueProperty, binding));
        return style;
    }

    public static Style SetTrackValue(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ValueProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackValue(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ValueProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackValue(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ValueProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackValue(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ValueProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ViewportSizeProperty

    public static Style SetTrackViewportSize(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ViewportSizeProperty, value));
        return style;
    }

    public static Style SetTrackViewportSize(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ViewportSizeProperty, binding));
        return style;
    }

    public static Style SetTrackViewportSize(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ViewportSizeProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackViewportSize(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ViewportSizeProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackViewportSize(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ViewportSizeProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackViewportSize(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ViewportSizeProperty, observable.ToBinding()));
        return keyFrame;
    }

    // OrientationProperty

    public static Style SetTrackOrientation(this Style style, Avalonia.Layout.Orientation value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.OrientationProperty, value));
        return style;
    }

    public static Style SetTrackOrientation(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.OrientationProperty, binding));
        return style;
    }

    public static Style SetTrackOrientation(this Style style, IObservable<Avalonia.Layout.Orientation> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.OrientationProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackOrientation(this KeyFrame keyFrame, Avalonia.Layout.Orientation value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.OrientationProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackOrientation(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.OrientationProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackOrientation(this KeyFrame keyFrame, IObservable<Avalonia.Layout.Orientation> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.OrientationProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ThumbProperty

    public static Style SetTrackThumb(this Style style, Avalonia.Controls.Primitives.Thumb value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ThumbProperty, value));
        return style;
    }

    public static Style SetTrackThumb(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ThumbProperty, binding));
        return style;
    }

    public static Style SetTrackThumb(this Style style, IObservable<Avalonia.Controls.Primitives.Thumb> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ThumbProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackThumb(this KeyFrame keyFrame, Avalonia.Controls.Primitives.Thumb value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ThumbProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackThumb(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ThumbProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackThumb(this KeyFrame keyFrame, IObservable<Avalonia.Controls.Primitives.Thumb> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.ThumbProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IncreaseButtonProperty

    public static Style SetTrackIncreaseButton(this Style style, Avalonia.Controls.Button value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IncreaseButtonProperty, value));
        return style;
    }

    public static Style SetTrackIncreaseButton(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IncreaseButtonProperty, binding));
        return style;
    }

    public static Style SetTrackIncreaseButton(this Style style, IObservable<Avalonia.Controls.Button> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IncreaseButtonProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackIncreaseButton(this KeyFrame keyFrame, Avalonia.Controls.Button value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IncreaseButtonProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackIncreaseButton(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IncreaseButtonProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackIncreaseButton(this KeyFrame keyFrame, IObservable<Avalonia.Controls.Button> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IncreaseButtonProperty, observable.ToBinding()));
        return keyFrame;
    }

    // DecreaseButtonProperty

    public static Style SetTrackDecreaseButton(this Style style, Avalonia.Controls.Button value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.DecreaseButtonProperty, value));
        return style;
    }

    public static Style SetTrackDecreaseButton(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.DecreaseButtonProperty, binding));
        return style;
    }

    public static Style SetTrackDecreaseButton(this Style style, IObservable<Avalonia.Controls.Button> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.DecreaseButtonProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackDecreaseButton(this KeyFrame keyFrame, Avalonia.Controls.Button value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.DecreaseButtonProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackDecreaseButton(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.DecreaseButtonProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackDecreaseButton(this KeyFrame keyFrame, IObservable<Avalonia.Controls.Button> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.DecreaseButtonProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsDirectionReversedProperty

    public static Style SetTrackIsDirectionReversed(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty, value));
        return style;
    }

    public static Style SetTrackIsDirectionReversed(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty, binding));
        return style;
    }

    public static Style SetTrackIsDirectionReversed(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackIsDirectionReversed(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackIsDirectionReversed(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackIsDirectionReversed(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IgnoreThumbDragProperty

    public static Style SetTrackIgnoreThumbDrag(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty, value));
        return style;
    }

    public static Style SetTrackIgnoreThumbDrag(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty, binding));
        return style;
    }

    public static Style SetTrackIgnoreThumbDrag(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetTrackIgnoreThumbDrag(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetTrackIgnoreThumbDrag(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetTrackIgnoreThumbDrag(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty, observable.ToBinding()));
        return keyFrame;
    }
}
