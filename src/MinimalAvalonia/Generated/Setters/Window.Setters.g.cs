// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class WindowSetters
{
    // SizeToContentProperty

    public static Style SetWindowSizeToContent(this Style style, Avalonia.Controls.SizeToContent value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.SizeToContentProperty, value));
        return style;
    }

    public static Style SetWindowSizeToContent(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.SizeToContentProperty, binding));
        return style;
    }

    public static Style SetWindowSizeToContent(this Style style, IObservable<Avalonia.Controls.SizeToContent> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.SizeToContentProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowSizeToContent(this KeyFrame keyFrame, Avalonia.Controls.SizeToContent value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.SizeToContentProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowSizeToContent(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.SizeToContentProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowSizeToContent(this KeyFrame keyFrame, IObservable<Avalonia.Controls.SizeToContent> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.SizeToContentProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ExtendClientAreaToDecorationsHintProperty

    public static Style SetWindowExtendClientAreaToDecorationsHint(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty, value));
        return style;
    }

    public static Style SetWindowExtendClientAreaToDecorationsHint(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty, binding));
        return style;
    }

    public static Style SetWindowExtendClientAreaToDecorationsHint(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowExtendClientAreaToDecorationsHint(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowExtendClientAreaToDecorationsHint(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowExtendClientAreaToDecorationsHint(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ExtendClientAreaChromeHintsProperty

    public static Style SetWindowExtendClientAreaChromeHints(this Style style, Avalonia.Platform.ExtendClientAreaChromeHints value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty, value));
        return style;
    }

    public static Style SetWindowExtendClientAreaChromeHints(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty, binding));
        return style;
    }

    public static Style SetWindowExtendClientAreaChromeHints(this Style style, IObservable<Avalonia.Platform.ExtendClientAreaChromeHints> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowExtendClientAreaChromeHints(this KeyFrame keyFrame, Avalonia.Platform.ExtendClientAreaChromeHints value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowExtendClientAreaChromeHints(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowExtendClientAreaChromeHints(this KeyFrame keyFrame, IObservable<Avalonia.Platform.ExtendClientAreaChromeHints> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ExtendClientAreaTitleBarHeightHintProperty

    public static Style SetWindowExtendClientAreaTitleBarHeightHint(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty, value));
        return style;
    }

    public static Style SetWindowExtendClientAreaTitleBarHeightHint(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty, binding));
        return style;
    }

    public static Style SetWindowExtendClientAreaTitleBarHeightHint(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowExtendClientAreaTitleBarHeightHint(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowExtendClientAreaTitleBarHeightHint(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowExtendClientAreaTitleBarHeightHint(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsExtendedIntoWindowDecorationsProperty

    public static Style SetWindowIsExtendedIntoWindowDecorations(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty, value));
        return style;
    }

    public static Style SetWindowIsExtendedIntoWindowDecorations(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty, binding));
        return style;
    }

    public static Style SetWindowIsExtendedIntoWindowDecorations(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowIsExtendedIntoWindowDecorations(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowIsExtendedIntoWindowDecorations(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowIsExtendedIntoWindowDecorations(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty, observable.ToBinding()));
        return keyFrame;
    }

    // WindowDecorationMarginProperty

    public static Style SetWindowWindowDecorationMargin(this Style style, Avalonia.Thickness value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.WindowDecorationMarginProperty, value));
        return style;
    }

    public static Style SetWindowWindowDecorationMargin(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.WindowDecorationMarginProperty, binding));
        return style;
    }

    public static Style SetWindowWindowDecorationMargin(this Style style, IObservable<Avalonia.Thickness> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.WindowDecorationMarginProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowWindowDecorationMargin(this KeyFrame keyFrame, Avalonia.Thickness value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.WindowDecorationMarginProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowWindowDecorationMargin(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.WindowDecorationMarginProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowWindowDecorationMargin(this KeyFrame keyFrame, IObservable<Avalonia.Thickness> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.WindowDecorationMarginProperty, observable.ToBinding()));
        return keyFrame;
    }

    // OffScreenMarginProperty

    public static Style SetWindowOffScreenMargin(this Style style, Avalonia.Thickness value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.OffScreenMarginProperty, value));
        return style;
    }

    public static Style SetWindowOffScreenMargin(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.OffScreenMarginProperty, binding));
        return style;
    }

    public static Style SetWindowOffScreenMargin(this Style style, IObservable<Avalonia.Thickness> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.OffScreenMarginProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowOffScreenMargin(this KeyFrame keyFrame, Avalonia.Thickness value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.OffScreenMarginProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowOffScreenMargin(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.OffScreenMarginProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowOffScreenMargin(this KeyFrame keyFrame, IObservable<Avalonia.Thickness> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.OffScreenMarginProperty, observable.ToBinding()));
        return keyFrame;
    }

    // SystemDecorationsProperty

    public static Style SetWindowSystemDecorations(this Style style, Avalonia.Controls.SystemDecorations value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.SystemDecorationsProperty, value));
        return style;
    }

    public static Style SetWindowSystemDecorations(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.SystemDecorationsProperty, binding));
        return style;
    }

    public static Style SetWindowSystemDecorations(this Style style, IObservable<Avalonia.Controls.SystemDecorations> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.SystemDecorationsProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowSystemDecorations(this KeyFrame keyFrame, Avalonia.Controls.SystemDecorations value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.SystemDecorationsProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowSystemDecorations(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.SystemDecorationsProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowSystemDecorations(this KeyFrame keyFrame, IObservable<Avalonia.Controls.SystemDecorations> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.SystemDecorationsProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ShowActivatedProperty

    public static Style SetWindowShowActivated(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ShowActivatedProperty, value));
        return style;
    }

    public static Style SetWindowShowActivated(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ShowActivatedProperty, binding));
        return style;
    }

    public static Style SetWindowShowActivated(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ShowActivatedProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowShowActivated(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ShowActivatedProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowShowActivated(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ShowActivatedProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowShowActivated(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ShowActivatedProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ShowInTaskbarProperty

    public static Style SetWindowShowInTaskbar(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ShowInTaskbarProperty, value));
        return style;
    }

    public static Style SetWindowShowInTaskbar(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ShowInTaskbarProperty, binding));
        return style;
    }

    public static Style SetWindowShowInTaskbar(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.ShowInTaskbarProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowShowInTaskbar(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ShowInTaskbarProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowShowInTaskbar(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ShowInTaskbarProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowShowInTaskbar(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.ShowInTaskbarProperty, observable.ToBinding()));
        return keyFrame;
    }

    // WindowStateProperty

    public static Style SetWindowWindowState(this Style style, Avalonia.Controls.WindowState value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStateProperty, value));
        return style;
    }

    public static Style SetWindowWindowState(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStateProperty, binding));
        return style;
    }

    public static Style SetWindowWindowState(this Style style, IObservable<Avalonia.Controls.WindowState> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStateProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowWindowState(this KeyFrame keyFrame, Avalonia.Controls.WindowState value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStateProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowWindowState(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStateProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowWindowState(this KeyFrame keyFrame, IObservable<Avalonia.Controls.WindowState> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStateProperty, observable.ToBinding()));
        return keyFrame;
    }

    // TitleProperty

    public static Style SetWindowTitle(this Style style, System.String value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.TitleProperty, value));
        return style;
    }

    public static Style SetWindowTitle(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.TitleProperty, binding));
        return style;
    }

    public static Style SetWindowTitle(this Style style, IObservable<System.String> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.TitleProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowTitle(this KeyFrame keyFrame, System.String value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.TitleProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowTitle(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.TitleProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowTitle(this KeyFrame keyFrame, IObservable<System.String> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.TitleProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IconProperty

    public static Style SetWindowIcon(this Style style, Avalonia.Controls.WindowIcon value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.IconProperty, value));
        return style;
    }

    public static Style SetWindowIcon(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.IconProperty, binding));
        return style;
    }

    public static Style SetWindowIcon(this Style style, IObservable<Avalonia.Controls.WindowIcon> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.IconProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowIcon(this KeyFrame keyFrame, Avalonia.Controls.WindowIcon value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.IconProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowIcon(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.IconProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowIcon(this KeyFrame keyFrame, IObservable<Avalonia.Controls.WindowIcon> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.IconProperty, observable.ToBinding()));
        return keyFrame;
    }

    // WindowStartupLocationProperty

    public static Style SetWindowWindowStartupLocation(this Style style, Avalonia.Controls.WindowStartupLocation value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStartupLocationProperty, value));
        return style;
    }

    public static Style SetWindowWindowStartupLocation(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStartupLocationProperty, binding));
        return style;
    }

    public static Style SetWindowWindowStartupLocation(this Style style, IObservable<Avalonia.Controls.WindowStartupLocation> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStartupLocationProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowWindowStartupLocation(this KeyFrame keyFrame, Avalonia.Controls.WindowStartupLocation value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStartupLocationProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowWindowStartupLocation(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStartupLocationProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowWindowStartupLocation(this KeyFrame keyFrame, IObservable<Avalonia.Controls.WindowStartupLocation> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.WindowStartupLocationProperty, observable.ToBinding()));
        return keyFrame;
    }

    // CanResizeProperty

    public static Style SetWindowCanResize(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.CanResizeProperty, value));
        return style;
    }

    public static Style SetWindowCanResize(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.CanResizeProperty, binding));
        return style;
    }

    public static Style SetWindowCanResize(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Window.CanResizeProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowCanResize(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.CanResizeProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowCanResize(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.CanResizeProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowCanResize(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Window.CanResizeProperty, observable.ToBinding()));
        return keyFrame;
    }

}
