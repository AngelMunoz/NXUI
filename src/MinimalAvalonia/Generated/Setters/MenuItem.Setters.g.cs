// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class MenuItemSetters
{
    // CommandProperty

    public static Style SetMenuItemCommand(this Style style, System.Windows.Input.ICommand value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandProperty, value));
        return style;
    }

    public static Style SetMenuItemCommand(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandProperty, binding));
        return style;
    }

    public static Style SetMenuItemCommand(this Style style, IObservable<System.Windows.Input.ICommand> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetMenuItemCommand(this KeyFrame keyFrame, System.Windows.Input.ICommand value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemCommand(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemCommand(this KeyFrame keyFrame, IObservable<System.Windows.Input.ICommand> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandProperty, observable.ToBinding()));
        return keyFrame;
    }

    // CommandParameterProperty

    public static Style SetMenuItemCommandParameter(this Style style, System.Object value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandParameterProperty, value));
        return style;
    }

    public static Style SetMenuItemCommandParameter(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandParameterProperty, binding));
        return style;
    }

    public static Style SetMenuItemCommandParameter(this Style style, IObservable<System.Object> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandParameterProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetMenuItemCommandParameter(this KeyFrame keyFrame, System.Object value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandParameterProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemCommandParameter(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandParameterProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemCommandParameter(this KeyFrame keyFrame, IObservable<System.Object> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.CommandParameterProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IconProperty

    public static Style SetMenuItemIcon(this Style style, System.Object value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IconProperty, value));
        return style;
    }

    public static Style SetMenuItemIcon(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IconProperty, binding));
        return style;
    }

    public static Style SetMenuItemIcon(this Style style, IObservable<System.Object> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IconProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetMenuItemIcon(this KeyFrame keyFrame, System.Object value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IconProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemIcon(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IconProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemIcon(this KeyFrame keyFrame, IObservable<System.Object> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IconProperty, observable.ToBinding()));
        return keyFrame;
    }

    // InputGestureProperty

    public static Style SetMenuItemInputGesture(this Style style, Avalonia.Input.KeyGesture value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.InputGestureProperty, value));
        return style;
    }

    public static Style SetMenuItemInputGesture(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.InputGestureProperty, binding));
        return style;
    }

    public static Style SetMenuItemInputGesture(this Style style, IObservable<Avalonia.Input.KeyGesture> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.InputGestureProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetMenuItemInputGesture(this KeyFrame keyFrame, Avalonia.Input.KeyGesture value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.InputGestureProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemInputGesture(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.InputGestureProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemInputGesture(this KeyFrame keyFrame, IObservable<Avalonia.Input.KeyGesture> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.InputGestureProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsSelectedProperty

    public static Style SetMenuItemIsSelected(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSelectedProperty, value));
        return style;
    }

    public static Style SetMenuItemIsSelected(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSelectedProperty, binding));
        return style;
    }

    public static Style SetMenuItemIsSelected(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSelectedProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetMenuItemIsSelected(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSelectedProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemIsSelected(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSelectedProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemIsSelected(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSelectedProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsSubMenuOpenProperty

    public static Style SetMenuItemIsSubMenuOpen(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSubMenuOpenProperty, value));
        return style;
    }

    public static Style SetMenuItemIsSubMenuOpen(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSubMenuOpenProperty, binding));
        return style;
    }

    public static Style SetMenuItemIsSubMenuOpen(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSubMenuOpenProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetMenuItemIsSubMenuOpen(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSubMenuOpenProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemIsSubMenuOpen(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSubMenuOpenProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemIsSubMenuOpen(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.IsSubMenuOpenProperty, observable.ToBinding()));
        return keyFrame;
    }

    // StaysOpenOnClickProperty

    public static Style SetMenuItemStaysOpenOnClick(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.StaysOpenOnClickProperty, value));
        return style;
    }

    public static Style SetMenuItemStaysOpenOnClick(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.StaysOpenOnClickProperty, binding));
        return style;
    }

    public static Style SetMenuItemStaysOpenOnClick(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.MenuItem.StaysOpenOnClickProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetMenuItemStaysOpenOnClick(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.StaysOpenOnClickProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemStaysOpenOnClick(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.StaysOpenOnClickProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetMenuItemStaysOpenOnClick(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.MenuItem.StaysOpenOnClickProperty, observable.ToBinding()));
        return keyFrame;
    }

}
