// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class AnimatableSetters
{
    // ClockProperty

    public static Style SetAnimatableClock(this Style style, Avalonia.Animation.IClock value)
    {
        style.Setters.Add(new Setter(Avalonia.Animation.Animatable.ClockProperty, value));
        return style;
    }

    public static Style SetAnimatableClock(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Animation.Animatable.ClockProperty, binding));
        return style;
    }

    public static Style SetAnimatableClock(this Style style, IObservable<Avalonia.Animation.IClock> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Animation.Animatable.ClockProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetAnimatableClock(this KeyFrame keyFrame, Avalonia.Animation.IClock value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Animation.Animatable.ClockProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetAnimatableClock(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Animation.Animatable.ClockProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetAnimatableClock(this KeyFrame keyFrame, IObservable<Avalonia.Animation.IClock> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Animation.Animatable.ClockProperty, observable.ToBinding()));
        return keyFrame;
    }

    // TransitionsProperty

    public static Style SetAnimatableTransitions(this Style style, Avalonia.Animation.Transitions value)
    {
        style.Setters.Add(new Setter(Avalonia.Animation.Animatable.TransitionsProperty, value));
        return style;
    }

    public static Style SetAnimatableTransitions(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Animation.Animatable.TransitionsProperty, binding));
        return style;
    }

    public static Style SetAnimatableTransitions(this Style style, IObservable<Avalonia.Animation.Transitions> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Animation.Animatable.TransitionsProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetAnimatableTransitions(this KeyFrame keyFrame, Avalonia.Animation.Transitions value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Animation.Animatable.TransitionsProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetAnimatableTransitions(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Animation.Animatable.TransitionsProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetAnimatableTransitions(this KeyFrame keyFrame, IObservable<Avalonia.Animation.Transitions> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Animation.Animatable.TransitionsProperty, observable.ToBinding()));
        return keyFrame;
    }
}
