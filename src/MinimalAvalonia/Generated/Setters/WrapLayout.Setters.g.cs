// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class WrapLayoutSetters
{
    // HorizontalSpacingProperty

    public static Style SetWrapLayoutHorizontalSpacing(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.HorizontalSpacingProperty, value));
        return style;
    }

    public static Style SetWrapLayoutHorizontalSpacing(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.HorizontalSpacingProperty, binding));
        return style;
    }

    public static Style SetWrapLayoutHorizontalSpacing(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.HorizontalSpacingProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWrapLayoutHorizontalSpacing(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.HorizontalSpacingProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWrapLayoutHorizontalSpacing(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.HorizontalSpacingProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWrapLayoutHorizontalSpacing(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.HorizontalSpacingProperty, observable.ToBinding()));
        return keyFrame;
    }

    // VerticalSpacingProperty

    public static Style SetWrapLayoutVerticalSpacing(this Style style, System.Double value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.VerticalSpacingProperty, value));
        return style;
    }

    public static Style SetWrapLayoutVerticalSpacing(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.VerticalSpacingProperty, binding));
        return style;
    }

    public static Style SetWrapLayoutVerticalSpacing(this Style style, IObservable<System.Double> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.VerticalSpacingProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWrapLayoutVerticalSpacing(this KeyFrame keyFrame, System.Double value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.VerticalSpacingProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWrapLayoutVerticalSpacing(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.VerticalSpacingProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWrapLayoutVerticalSpacing(this KeyFrame keyFrame, IObservable<System.Double> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.VerticalSpacingProperty, observable.ToBinding()));
        return keyFrame;
    }

    // OrientationProperty

    public static Style SetWrapLayoutOrientation(this Style style, Avalonia.Layout.Orientation value)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.OrientationProperty, value));
        return style;
    }

    public static Style SetWrapLayoutOrientation(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.OrientationProperty, binding));
        return style;
    }

    public static Style SetWrapLayoutOrientation(this Style style, IObservable<Avalonia.Layout.Orientation> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.OrientationProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWrapLayoutOrientation(this KeyFrame keyFrame, Avalonia.Layout.Orientation value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.OrientationProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWrapLayoutOrientation(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.OrientationProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWrapLayoutOrientation(this KeyFrame keyFrame, IObservable<Avalonia.Layout.Orientation> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Layout.WrapLayout.OrientationProperty, observable.ToBinding()));
        return keyFrame;
    }
}
