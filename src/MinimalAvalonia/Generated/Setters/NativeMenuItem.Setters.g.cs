// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class NativeMenuItemSetters
{
    // MenuProperty

    public static Style SetNativeMenuItemMenu(this Style style, Avalonia.Controls.NativeMenu value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.MenuProperty, value));
        return style;
    }

    public static Style SetNativeMenuItemMenu(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.MenuProperty, binding));
        return style;
    }

    public static Style SetNativeMenuItemMenu(this Style style, IObservable<Avalonia.Controls.NativeMenu> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.MenuProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetNativeMenuItemMenu(this KeyFrame keyFrame, Avalonia.Controls.NativeMenu value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.MenuProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemMenu(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.MenuProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemMenu(this KeyFrame keyFrame, IObservable<Avalonia.Controls.NativeMenu> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.MenuProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IconProperty

    public static Style SetNativeMenuItemIcon(this Style style, Avalonia.Media.Imaging.IBitmap value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IconProperty, value));
        return style;
    }

    public static Style SetNativeMenuItemIcon(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IconProperty, binding));
        return style;
    }

    public static Style SetNativeMenuItemIcon(this Style style, IObservable<Avalonia.Media.Imaging.IBitmap> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IconProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetNativeMenuItemIcon(this KeyFrame keyFrame, Avalonia.Media.Imaging.IBitmap value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IconProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemIcon(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IconProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemIcon(this KeyFrame keyFrame, IObservable<Avalonia.Media.Imaging.IBitmap> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IconProperty, observable.ToBinding()));
        return keyFrame;
    }

    // HeaderProperty

    public static Style SetNativeMenuItemHeader(this Style style, System.String value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.HeaderProperty, value));
        return style;
    }

    public static Style SetNativeMenuItemHeader(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.HeaderProperty, binding));
        return style;
    }

    public static Style SetNativeMenuItemHeader(this Style style, IObservable<System.String> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.HeaderProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetNativeMenuItemHeader(this KeyFrame keyFrame, System.String value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.HeaderProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemHeader(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.HeaderProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemHeader(this KeyFrame keyFrame, IObservable<System.String> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.HeaderProperty, observable.ToBinding()));
        return keyFrame;
    }

    // GestureProperty

    public static Style SetNativeMenuItemGesture(this Style style, Avalonia.Input.KeyGesture value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.GestureProperty, value));
        return style;
    }

    public static Style SetNativeMenuItemGesture(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.GestureProperty, binding));
        return style;
    }

    public static Style SetNativeMenuItemGesture(this Style style, IObservable<Avalonia.Input.KeyGesture> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.GestureProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetNativeMenuItemGesture(this KeyFrame keyFrame, Avalonia.Input.KeyGesture value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.GestureProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemGesture(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.GestureProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemGesture(this KeyFrame keyFrame, IObservable<Avalonia.Input.KeyGesture> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.GestureProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsCheckedProperty

    public static Style SetNativeMenuItemIsChecked(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsCheckedProperty, value));
        return style;
    }

    public static Style SetNativeMenuItemIsChecked(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsCheckedProperty, binding));
        return style;
    }

    public static Style SetNativeMenuItemIsChecked(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsCheckedProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetNativeMenuItemIsChecked(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsCheckedProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemIsChecked(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsCheckedProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemIsChecked(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsCheckedProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ToggleTypeProperty

    public static Style SetNativeMenuItemToggleType(this Style style, Avalonia.Controls.NativeMenuItemToggleType value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty, value));
        return style;
    }

    public static Style SetNativeMenuItemToggleType(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty, binding));
        return style;
    }

    public static Style SetNativeMenuItemToggleType(this Style style, IObservable<Avalonia.Controls.NativeMenuItemToggleType> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetNativeMenuItemToggleType(this KeyFrame keyFrame, Avalonia.Controls.NativeMenuItemToggleType value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemToggleType(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemToggleType(this KeyFrame keyFrame, IObservable<Avalonia.Controls.NativeMenuItemToggleType> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.ToggleTypeProperty, observable.ToBinding()));
        return keyFrame;
    }

    // CommandProperty

    public static Style SetNativeMenuItemCommand(this Style style, System.Windows.Input.ICommand value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.CommandProperty, value));
        return style;
    }

    public static Style SetNativeMenuItemCommand(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.CommandProperty, binding));
        return style;
    }

    public static Style SetNativeMenuItemCommand(this Style style, IObservable<System.Windows.Input.ICommand> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.CommandProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetNativeMenuItemCommand(this KeyFrame keyFrame, System.Windows.Input.ICommand value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.CommandProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemCommand(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.CommandProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemCommand(this KeyFrame keyFrame, IObservable<System.Windows.Input.ICommand> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.CommandProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsEnabledProperty

    public static Style SetNativeMenuItemIsEnabled(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsEnabledProperty, value));
        return style;
    }

    public static Style SetNativeMenuItemIsEnabled(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsEnabledProperty, binding));
        return style;
    }

    public static Style SetNativeMenuItemIsEnabled(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsEnabledProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetNativeMenuItemIsEnabled(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsEnabledProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemIsEnabled(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsEnabledProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetNativeMenuItemIsEnabled(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.NativeMenuItem.IsEnabledProperty, observable.ToBinding()));
        return keyFrame;
    }
}
