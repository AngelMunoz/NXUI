// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ProgressBarSetters
{
    // IsIndeterminateProperty

    public static Style SetProgressBarIsIndeterminate(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.IsIndeterminateProperty, value));
        return style;
    }

    public static Style SetProgressBarIsIndeterminate(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.IsIndeterminateProperty, binding));
        return style;
    }

    public static Style SetProgressBarIsIndeterminate(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.IsIndeterminateProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetProgressBarIsIndeterminate(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.IsIndeterminateProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetProgressBarIsIndeterminate(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.IsIndeterminateProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetProgressBarIsIndeterminate(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.IsIndeterminateProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ShowProgressTextProperty

    public static Style SetProgressBarShowProgressText(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.ShowProgressTextProperty, value));
        return style;
    }

    public static Style SetProgressBarShowProgressText(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.ShowProgressTextProperty, binding));
        return style;
    }

    public static Style SetProgressBarShowProgressText(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.ShowProgressTextProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetProgressBarShowProgressText(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.ShowProgressTextProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetProgressBarShowProgressText(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.ShowProgressTextProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetProgressBarShowProgressText(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.ShowProgressTextProperty, observable.ToBinding()));
        return keyFrame;
    }

    // OrientationProperty

    public static Style SetProgressBarOrientation(this Style style, Avalonia.Layout.Orientation value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.OrientationProperty, value));
        return style;
    }

    public static Style SetProgressBarOrientation(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.OrientationProperty, binding));
        return style;
    }

    public static Style SetProgressBarOrientation(this Style style, IObservable<Avalonia.Layout.Orientation> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.OrientationProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetProgressBarOrientation(this KeyFrame keyFrame, Avalonia.Layout.Orientation value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.OrientationProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetProgressBarOrientation(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.OrientationProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetProgressBarOrientation(this KeyFrame keyFrame, IObservable<Avalonia.Layout.Orientation> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.ProgressBar.OrientationProperty, observable.ToBinding()));
        return keyFrame;
    }
}
