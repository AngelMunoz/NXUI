// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class WindowBaseSetters
{
    // IsActiveProperty

    public static Style SetWindowBaseIsActive(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.WindowBase.IsActiveProperty, value));
        return style;
    }

    public static Style SetWindowBaseIsActive(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.WindowBase.IsActiveProperty, binding));
        return style;
    }

    public static Style SetWindowBaseIsActive(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.WindowBase.IsActiveProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowBaseIsActive(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.WindowBase.IsActiveProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowBaseIsActive(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.WindowBase.IsActiveProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowBaseIsActive(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.WindowBase.IsActiveProperty, observable.ToBinding()));
        return keyFrame;
    }

    // OwnerProperty

    public static Style SetWindowBaseOwner(this Style style, Avalonia.Controls.WindowBase value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.WindowBase.OwnerProperty, value));
        return style;
    }

    public static Style SetWindowBaseOwner(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.WindowBase.OwnerProperty, binding));
        return style;
    }

    public static Style SetWindowBaseOwner(this Style style, IObservable<Avalonia.Controls.WindowBase> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.WindowBase.OwnerProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowBaseOwner(this KeyFrame keyFrame, Avalonia.Controls.WindowBase value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.WindowBase.OwnerProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowBaseOwner(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.WindowBase.OwnerProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowBaseOwner(this KeyFrame keyFrame, IObservable<Avalonia.Controls.WindowBase> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.WindowBase.OwnerProperty, observable.ToBinding()));
        return keyFrame;
    }

    // TopmostProperty

    public static Style SetWindowBaseTopmost(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.WindowBase.TopmostProperty, value));
        return style;
    }

    public static Style SetWindowBaseTopmost(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.WindowBase.TopmostProperty, binding));
        return style;
    }

    public static Style SetWindowBaseTopmost(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.WindowBase.TopmostProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetWindowBaseTopmost(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.WindowBase.TopmostProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetWindowBaseTopmost(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.WindowBase.TopmostProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetWindowBaseTopmost(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.WindowBase.TopmostProperty, observable.ToBinding()));
        return keyFrame;
    }
}
