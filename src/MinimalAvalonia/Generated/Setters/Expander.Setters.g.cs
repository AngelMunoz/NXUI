// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ExpanderSetters
{
    // ContentTransitionProperty

    public static Style SetExpanderContentTransition(this Style style, Avalonia.Animation.IPageTransition value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, value));
        return style;
    }

    public static Style SetExpanderContentTransition(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, binding));
        return style;
    }

    public static Style SetExpanderContentTransition(this Style style, IObservable<Avalonia.Animation.IPageTransition> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetExpanderContentTransition(this KeyFrame keyFrame, Avalonia.Animation.IPageTransition value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetExpanderContentTransition(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetExpanderContentTransition(this KeyFrame keyFrame, IObservable<Avalonia.Animation.IPageTransition> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ContentTransitionProperty, observable.ToBinding()));
        return keyFrame;
    }

    // ExpandDirectionProperty

    public static Style SetExpanderExpandDirection(this Style style, Avalonia.Controls.ExpandDirection value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, value));
        return style;
    }

    public static Style SetExpanderExpandDirection(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, binding));
        return style;
    }

    public static Style SetExpanderExpandDirection(this Style style, IObservable<Avalonia.Controls.ExpandDirection> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetExpanderExpandDirection(this KeyFrame keyFrame, Avalonia.Controls.ExpandDirection value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetExpanderExpandDirection(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetExpanderExpandDirection(this KeyFrame keyFrame, IObservable<Avalonia.Controls.ExpandDirection> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.ExpandDirectionProperty, observable.ToBinding()));
        return keyFrame;
    }

    // IsExpandedProperty

    public static Style SetExpanderIsExpanded(this Style style, System.Boolean value)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, value));
        return style;
    }

    public static Style SetExpanderIsExpanded(this Style style, Avalonia.Data.IBinding binding)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, binding));
        return style;
    }

    public static Style SetExpanderIsExpanded(this Style style, IObservable<System.Boolean> observable)
    {
        style.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, observable.ToBinding()));
        return style;
    }

    public static KeyFrame SetExpanderIsExpanded(this KeyFrame keyFrame, System.Boolean value)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, value));
        return keyFrame;
    }

    public static KeyFrame SetExpanderIsExpanded(this KeyFrame keyFrame, Avalonia.Data.IBinding binding)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, binding));
        return keyFrame;
    }

    public static KeyFrame SetExpanderIsExpanded(this KeyFrame keyFrame, IObservable<System.Boolean> observable)
    {
        keyFrame.Setters.Add(new Setter(Avalonia.Controls.Expander.IsExpandedProperty, observable.ToBinding()));
        return keyFrame;
    }
}
