// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The minimal avalonia <see cref="Avalonia.Media.ArcSegment"/> class property extension methods.
/// </summary>
public static partial class ArcSegmentExtensions
{
    // Avalonia.Media.ArcSegment.IsLargeArcProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ArcSegment.IsLargeArcProperty"/> value on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment IsLargeArc(this Avalonia.Media.ArcSegment obj, System.Boolean value)
    {
        obj[Avalonia.Media.ArcSegment.IsLargeArcProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.IsLargeArcProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment IsLargeArc(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.IsLargeArcProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.IsLargeArcProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment IsLargeArc(
        this Avalonia.Media.ArcSegment obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.IsLargeArcProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ArcSegment.IsLargeArcProperty"/> binding on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ArcSegment.IsLargeArcProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsLargeArc(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.IsLargeArcProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ArcSegment.IsLargeArcProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsLargeArc(this Avalonia.Media.ArcSegment obj)
    {
        return obj.GetObservable(Avalonia.Media.ArcSegment.IsLargeArcProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.ArcSegment.IsLargeArcProperty"/> property on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ArcSegment OnIsLargeArc(this Avalonia.Media.ArcSegment obj, Action<Avalonia.Media.ArcSegment, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.ArcSegment.IsLargeArcProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.ArcSegment.PointProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ArcSegment.PointProperty"/> value on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment Point(this Avalonia.Media.ArcSegment obj, Avalonia.Point value)
    {
        obj[Avalonia.Media.ArcSegment.PointProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.PointProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment Point(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.PointProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.PointProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment Point(
        this Avalonia.Media.ArcSegment obj,
        IObservable<Avalonia.Point> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.PointProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ArcSegment.PointProperty"/> binding on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ArcSegment.PointProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPoint(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.PointProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ArcSegment.PointProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Point> ObservePoint(this Avalonia.Media.ArcSegment obj)
    {
        return obj.GetObservable(Avalonia.Media.ArcSegment.PointProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.ArcSegment.PointProperty"/> property on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ArcSegment OnPoint(this Avalonia.Media.ArcSegment obj, Action<Avalonia.Media.ArcSegment, IObservable<Avalonia.Point>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.ArcSegment.PointProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.ArcSegment.RotationAngleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ArcSegment.RotationAngleProperty"/> value on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment RotationAngle(this Avalonia.Media.ArcSegment obj, System.Double value)
    {
        obj[Avalonia.Media.ArcSegment.RotationAngleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.RotationAngleProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment RotationAngle(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.RotationAngleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.RotationAngleProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment RotationAngle(
        this Avalonia.Media.ArcSegment obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.RotationAngleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ArcSegment.RotationAngleProperty"/> binding on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ArcSegment.RotationAngleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRotationAngle(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.RotationAngleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ArcSegment.RotationAngleProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveRotationAngle(this Avalonia.Media.ArcSegment obj)
    {
        return obj.GetObservable(Avalonia.Media.ArcSegment.RotationAngleProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.ArcSegment.RotationAngleProperty"/> property on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ArcSegment OnRotationAngle(this Avalonia.Media.ArcSegment obj, Action<Avalonia.Media.ArcSegment, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.ArcSegment.RotationAngleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.ArcSegment.SizeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ArcSegment.SizeProperty"/> value on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment Size(this Avalonia.Media.ArcSegment obj, Avalonia.Size value)
    {
        obj[Avalonia.Media.ArcSegment.SizeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.SizeProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment Size(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.SizeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.SizeProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment Size(
        this Avalonia.Media.ArcSegment obj,
        IObservable<Avalonia.Size> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.SizeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ArcSegment.SizeProperty"/> binding on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ArcSegment.SizeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSize(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.SizeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ArcSegment.SizeProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Size> ObserveSize(this Avalonia.Media.ArcSegment obj)
    {
        return obj.GetObservable(Avalonia.Media.ArcSegment.SizeProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.ArcSegment.SizeProperty"/> property on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ArcSegment OnSize(this Avalonia.Media.ArcSegment obj, Action<Avalonia.Media.ArcSegment, IObservable<Avalonia.Size>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.ArcSegment.SizeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.ArcSegment.SweepDirectionProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ArcSegment.SweepDirectionProperty"/> value on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment SweepDirection(this Avalonia.Media.ArcSegment obj, Avalonia.Media.SweepDirection value)
    {
        obj[Avalonia.Media.ArcSegment.SweepDirectionProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.SweepDirectionProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment SweepDirection(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.SweepDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ArcSegment.SweepDirectionProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment SweepDirection(
        this Avalonia.Media.ArcSegment obj,
        IObservable<Avalonia.Media.SweepDirection> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.SweepDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ArcSegment.SweepDirectionProperty"/> binding on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ArcSegment.SweepDirectionProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSweepDirection(
        this Avalonia.Media.ArcSegment obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ArcSegment.SweepDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ArcSegment.SweepDirectionProperty"/> on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Media.SweepDirection> ObserveSweepDirection(this Avalonia.Media.ArcSegment obj)
    {
        return obj.GetObservable(Avalonia.Media.ArcSegment.SweepDirectionProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.ArcSegment.SweepDirectionProperty"/> property on an object of type <see cref="Avalonia.Media.ArcSegment"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ArcSegment OnSweepDirection(this Avalonia.Media.ArcSegment obj, Action<Avalonia.Media.ArcSegment, IObservable<Avalonia.Media.SweepDirection>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.ArcSegment.SweepDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ArcSegment.SweepDirectionProperty"/> property value to <see cref="Avalonia.Media.SweepDirection.CounterClockwise"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment SweepDirectionCounterClockwise(this Avalonia.Media.ArcSegment obj)
    {
        obj[Avalonia.Media.ArcSegment.SweepDirectionProperty] = Avalonia.Media.SweepDirection.CounterClockwise;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ArcSegment.SweepDirectionProperty"/> property value to <see cref="Avalonia.Media.SweepDirection.Clockwise"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ArcSegment SweepDirectionClockwise(this Avalonia.Media.ArcSegment obj)
    {
        obj[Avalonia.Media.ArcSegment.SweepDirectionProperty] = Avalonia.Media.SweepDirection.Clockwise;
        return obj;
    }
}
