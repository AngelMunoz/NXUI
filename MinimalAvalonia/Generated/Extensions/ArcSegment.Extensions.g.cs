// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ArcSegmentExtensions
{
    // IsLargeArcProperty

    public static Avalonia.Media.ArcSegment IsLargeArc(this Avalonia.Media.ArcSegment obj, System.Boolean value)
    {
        obj[Avalonia.Media.ArcSegment.IsLargeArcProperty] = value;
        return obj;
    }

    public static Avalonia.Media.ArcSegment IsLargeArc(this Avalonia.Media.ArcSegment obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        obj[Avalonia.Media.ArcSegment.IsLargeArcProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding IsLargeArc(this Avalonia.Media.ArcSegment obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ArcSegment.IsLargeArcProperty.Bind().WithMode(mode)];
    }

    // PointProperty

    public static Avalonia.Media.ArcSegment Point(this Avalonia.Media.ArcSegment obj, Avalonia.Point value)
    {
        obj[Avalonia.Media.ArcSegment.PointProperty] = value;
        return obj;
    }

    public static Avalonia.Media.ArcSegment Point(this Avalonia.Media.ArcSegment obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        obj[Avalonia.Media.ArcSegment.PointProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Point(this Avalonia.Media.ArcSegment obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ArcSegment.PointProperty.Bind().WithMode(mode)];
    }

    // RotationAngleProperty

    public static Avalonia.Media.ArcSegment RotationAngle(this Avalonia.Media.ArcSegment obj, System.Double value)
    {
        obj[Avalonia.Media.ArcSegment.RotationAngleProperty] = value;
        return obj;
    }

    public static Avalonia.Media.ArcSegment RotationAngle(this Avalonia.Media.ArcSegment obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        obj[Avalonia.Media.ArcSegment.RotationAngleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding RotationAngle(this Avalonia.Media.ArcSegment obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ArcSegment.RotationAngleProperty.Bind().WithMode(mode)];
    }

    // SizeProperty

    public static Avalonia.Media.ArcSegment Size(this Avalonia.Media.ArcSegment obj, Avalonia.Size value)
    {
        obj[Avalonia.Media.ArcSegment.SizeProperty] = value;
        return obj;
    }

    public static Avalonia.Media.ArcSegment Size(this Avalonia.Media.ArcSegment obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        obj[Avalonia.Media.ArcSegment.SizeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Size(this Avalonia.Media.ArcSegment obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ArcSegment.SizeProperty.Bind().WithMode(mode)];
    }

    // SweepDirectionProperty

    public static Avalonia.Media.ArcSegment SweepDirection(this Avalonia.Media.ArcSegment obj, Avalonia.Media.SweepDirection value)
    {
        obj[Avalonia.Media.ArcSegment.SweepDirectionProperty] = value;
        return obj;
    }

    public static Avalonia.Media.ArcSegment SweepDirection(this Avalonia.Media.ArcSegment obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        obj[Avalonia.Media.ArcSegment.SweepDirectionProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding SweepDirection(this Avalonia.Media.ArcSegment obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ArcSegment.SweepDirectionProperty.Bind().WithMode(mode)];
    }

    public static Avalonia.Media.ArcSegment SweepDirectionCounterClockwise(this Avalonia.Media.ArcSegment obj)
    {
        obj[Avalonia.Media.ArcSegment.SweepDirectionProperty] = Avalonia.Media.SweepDirection.CounterClockwise;
        return obj;
    }

    public static Avalonia.Media.ArcSegment SweepDirectionClockwise(this Avalonia.Media.ArcSegment obj)
    {
        obj[Avalonia.Media.ArcSegment.SweepDirectionProperty] = Avalonia.Media.SweepDirection.Clockwise;
        return obj;
    }
}
