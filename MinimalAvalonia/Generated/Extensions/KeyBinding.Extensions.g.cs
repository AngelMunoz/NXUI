// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class KeyBindingExtensions
{
    // CommandProperty

    public static T Command<T>(this T obj, System.Windows.Input.ICommand value) where T : Avalonia.Input.KeyBinding
    {
        obj[Avalonia.Input.KeyBinding.CommandProperty] = value;
        return obj;
    }

    public static T Command<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.KeyBinding
    {
        obj[Avalonia.Input.KeyBinding.CommandProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Command<T>(this T obj, IObservable<System.Windows.Input.ICommand> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.KeyBinding
    {
        obj[Avalonia.Input.KeyBinding.CommandProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCommand(this Avalonia.Input.KeyBinding obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Input.KeyBinding.CommandProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Windows.Input.ICommand> ObserveCommand(this Avalonia.Input.KeyBinding obj)
    {
        return obj.GetObservable(Avalonia.Input.KeyBinding.CommandProperty);
    }

    public static T OnCommand<T>(this T obj, Action<IObservable<System.Windows.Input.ICommand>> handler) where T : Avalonia.Input.KeyBinding
    {
        var observable = obj.GetObservable(Avalonia.Input.KeyBinding.CommandProperty);
        handler(observable);
        return obj;
    }

    // CommandParameterProperty

    public static T CommandParameter<T>(this T obj, System.Object value) where T : Avalonia.Input.KeyBinding
    {
        obj[Avalonia.Input.KeyBinding.CommandParameterProperty] = value;
        return obj;
    }

    public static T CommandParameter<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.KeyBinding
    {
        obj[Avalonia.Input.KeyBinding.CommandParameterProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CommandParameter<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.KeyBinding
    {
        obj[Avalonia.Input.KeyBinding.CommandParameterProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCommandParameter(this Avalonia.Input.KeyBinding obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Input.KeyBinding.CommandParameterProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveCommandParameter(this Avalonia.Input.KeyBinding obj)
    {
        return obj.GetObservable(Avalonia.Input.KeyBinding.CommandParameterProperty);
    }

    public static T OnCommandParameter<T>(this T obj, Action<IObservable<System.Object>> handler) where T : Avalonia.Input.KeyBinding
    {
        var observable = obj.GetObservable(Avalonia.Input.KeyBinding.CommandParameterProperty);
        handler(observable);
        return obj;
    }

    // GestureProperty

    public static T Gesture<T>(this T obj, Avalonia.Input.KeyGesture value) where T : Avalonia.Input.KeyBinding
    {
        obj[Avalonia.Input.KeyBinding.GestureProperty] = value;
        return obj;
    }

    public static T Gesture<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.KeyBinding
    {
        obj[Avalonia.Input.KeyBinding.GestureProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Gesture<T>(this T obj, IObservable<Avalonia.Input.KeyGesture> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Input.KeyBinding
    {
        obj[Avalonia.Input.KeyBinding.GestureProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindGesture(this Avalonia.Input.KeyBinding obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Input.KeyBinding.GestureProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Input.KeyGesture> ObserveGesture(this Avalonia.Input.KeyBinding obj)
    {
        return obj.GetObservable(Avalonia.Input.KeyBinding.GestureProperty);
    }

    public static T OnGesture<T>(this T obj, Action<IObservable<Avalonia.Input.KeyGesture>> handler) where T : Avalonia.Input.KeyBinding
    {
        var observable = obj.GetObservable(Avalonia.Input.KeyBinding.GestureProperty);
        handler(observable);
        return obj;
    }
}
