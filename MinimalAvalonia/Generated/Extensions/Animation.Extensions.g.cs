// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class AnimationExtensions
{
    // DurationProperty

    public static T Duration<T>(this T obj, System.TimeSpan value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DurationProperty] = value;
        return obj;
    }

    public static T Duration<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DurationProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Duration<T>(this T obj, IObservable<System.TimeSpan> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DurationProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindDuration(this Avalonia.Animation.Animation obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Animation.Animation.DurationProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.TimeSpan> ObserveDuration(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.DurationProperty);
    }

    // IterationCountProperty

    public static T IterationCount<T>(this T obj, Avalonia.Animation.IterationCount value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.IterationCountProperty] = value;
        return obj;
    }

    public static T IterationCount<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.IterationCountProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IterationCount<T>(this T obj, IObservable<Avalonia.Animation.IterationCount> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.IterationCountProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIterationCount(this Avalonia.Animation.Animation obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Animation.Animation.IterationCountProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Animation.IterationCount> ObserveIterationCount(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.IterationCountProperty);
    }

    // PlaybackDirectionProperty

    public static T PlaybackDirection<T>(this T obj, Avalonia.Animation.PlaybackDirection value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = value;
        return obj;
    }

    public static T PlaybackDirection<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlaybackDirection<T>(this T obj, IObservable<Avalonia.Animation.PlaybackDirection> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlaybackDirection(this Avalonia.Animation.Animation obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Animation.Animation.PlaybackDirectionProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Animation.PlaybackDirection> ObservePlaybackDirection(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.PlaybackDirectionProperty);
    }

    public static T PlaybackDirectionNormal<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Normal;
        return obj;
    }

    public static T PlaybackDirectionReverse<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Reverse;
        return obj;
    }

    public static T PlaybackDirectionAlternate<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Alternate;
        return obj;
    }

    public static T PlaybackDirectionAlternateReverse<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.AlternateReverse;
        return obj;
    }

    // FillModeProperty

    public static T FillMode<T>(this T obj, Avalonia.Animation.FillMode value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = value;
        return obj;
    }

    public static T FillMode<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T FillMode<T>(this T obj, IObservable<Avalonia.Animation.FillMode> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFillMode(this Avalonia.Animation.Animation obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Animation.Animation.FillModeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Animation.FillMode> ObserveFillMode(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.FillModeProperty);
    }

    public static T FillModeNone<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.None;
        return obj;
    }

    public static T FillModeForward<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Forward;
        return obj;
    }

    public static T FillModeBackward<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Backward;
        return obj;
    }

    public static T FillModeBoth<T>(this T obj) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Both;
        return obj;
    }

    // EasingProperty

    public static T Easing<T>(this T obj, Avalonia.Animation.Easings.Easing value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.EasingProperty] = value;
        return obj;
    }

    public static T Easing<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.EasingProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Easing<T>(this T obj, IObservable<Avalonia.Animation.Easings.Easing> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.EasingProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindEasing(this Avalonia.Animation.Animation obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Animation.Animation.EasingProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Animation.Easings.Easing> ObserveEasing(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.EasingProperty);
    }

    // DelayProperty

    public static T Delay<T>(this T obj, System.TimeSpan value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DelayProperty] = value;
        return obj;
    }

    public static T Delay<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DelayProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Delay<T>(this T obj, IObservable<System.TimeSpan> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DelayProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindDelay(this Avalonia.Animation.Animation obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Animation.Animation.DelayProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.TimeSpan> ObserveDelay(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.DelayProperty);
    }

    // DelayBetweenIterationsProperty

    public static T DelayBetweenIterations<T>(this T obj, System.TimeSpan value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DelayBetweenIterationsProperty] = value;
        return obj;
    }

    public static T DelayBetweenIterations<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DelayBetweenIterationsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T DelayBetweenIterations<T>(this T obj, IObservable<System.TimeSpan> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.DelayBetweenIterationsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindDelayBetweenIterations(this Avalonia.Animation.Animation obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Animation.Animation.DelayBetweenIterationsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.TimeSpan> ObserveDelayBetweenIterations(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.DelayBetweenIterationsProperty);
    }

    // SpeedRatioProperty

    public static T SpeedRatio<T>(this T obj, System.Double value) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.SpeedRatioProperty] = value;
        return obj;
    }

    public static T SpeedRatio<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.SpeedRatioProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SpeedRatio<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Animation.Animation
    {
        obj[Avalonia.Animation.Animation.SpeedRatioProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSpeedRatio(this Avalonia.Animation.Animation obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Animation.Animation.SpeedRatioProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveSpeedRatio(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.SpeedRatioProperty);
    }
}
