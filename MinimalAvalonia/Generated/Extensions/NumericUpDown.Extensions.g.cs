// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class NumericUpDownExtensions
{
    // ClipValueToMinMaxProperty

    public static T ClipValueToMinMax<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ClipValueToMinMaxProperty] = value;
        return obj;
    }

    public static T ClipValueToMinMax<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ClipValueToMinMaxProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ClipValueToMinMax(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.ClipValueToMinMaxProperty.Bind().WithMode(mode)];
    }

    // NumberFormatProperty

    public static T NumberFormat<T>(this T obj, System.Globalization.NumberFormatInfo value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.NumberFormatProperty] = value;
        return obj;
    }

    public static T NumberFormat<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.NumberFormatProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding NumberFormat(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.NumberFormatProperty.Bind().WithMode(mode)];
    }

    // FormatStringProperty

    public static T FormatString<T>(this T obj, System.String value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.FormatStringProperty] = value;
        return obj;
    }

    public static T FormatString<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.FormatStringProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding FormatString(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.FormatStringProperty.Bind().WithMode(mode)];
    }

    // IncrementProperty

    public static T Increment<T>(this T obj, System.Decimal value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.IncrementProperty] = value;
        return obj;
    }

    public static T Increment<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.IncrementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Increment(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.IncrementProperty.Bind().WithMode(mode)];
    }

    // IsReadOnlyProperty

    public static T IsReadOnly<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.IsReadOnlyProperty] = value;
        return obj;
    }

    public static T IsReadOnly<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.IsReadOnlyProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding IsReadOnly(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.IsReadOnlyProperty.Bind().WithMode(mode)];
    }

    // MaximumProperty

    public static T Maximum<T>(this T obj, System.Decimal value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.MaximumProperty] = value;
        return obj;
    }

    public static T Maximum<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.MaximumProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Maximum(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.MaximumProperty.Bind().WithMode(mode)];
    }

    // MinimumProperty

    public static T Minimum<T>(this T obj, System.Decimal value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.MinimumProperty] = value;
        return obj;
    }

    public static T Minimum<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.MinimumProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Minimum(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.MinimumProperty.Bind().WithMode(mode)];
    }

    // ParsingNumberStyleProperty

    public static T ParsingNumberStyle<T>(this T obj, System.Globalization.NumberStyles value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = value;
        return obj;
    }

    public static T ParsingNumberStyle<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ParsingNumberStyle(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty.Bind().WithMode(mode)];
    }

    public static T ParsingNumberStyleNone<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.None;
        return obj;
    }

    public static T ParsingNumberStyleAllowLeadingWhite<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowLeadingWhite;
        return obj;
    }

    public static T ParsingNumberStyleAllowTrailingWhite<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowTrailingWhite;
        return obj;
    }

    public static T ParsingNumberStyleAllowLeadingSign<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowLeadingSign;
        return obj;
    }

    public static T ParsingNumberStyleInteger<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.Integer;
        return obj;
    }

    public static T ParsingNumberStyleAllowTrailingSign<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowTrailingSign;
        return obj;
    }

    public static T ParsingNumberStyleAllowParentheses<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowParentheses;
        return obj;
    }

    public static T ParsingNumberStyleAllowDecimalPoint<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowDecimalPoint;
        return obj;
    }

    public static T ParsingNumberStyleAllowThousands<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowThousands;
        return obj;
    }

    public static T ParsingNumberStyleNumber<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.Number;
        return obj;
    }

    public static T ParsingNumberStyleAllowExponent<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowExponent;
        return obj;
    }

    public static T ParsingNumberStyleFloat<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.Float;
        return obj;
    }

    public static T ParsingNumberStyleAllowCurrencySymbol<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowCurrencySymbol;
        return obj;
    }

    public static T ParsingNumberStyleCurrency<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.Currency;
        return obj;
    }

    public static T ParsingNumberStyleAny<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.Any;
        return obj;
    }

    public static T ParsingNumberStyleAllowHexSpecifier<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.AllowHexSpecifier;
        return obj;
    }

    public static T ParsingNumberStyleHexNumber<T>(this T obj) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ParsingNumberStyleProperty] = System.Globalization.NumberStyles.HexNumber;
        return obj;
    }

    // TextProperty

    public static T Text<T>(this T obj, System.String value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.TextProperty] = value;
        return obj;
    }

    public static T Text<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.TextProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Text(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.TextProperty.Bind().WithMode(mode)];
    }

    // ValueProperty

    public static T Value<T>(this T obj, System.Decimal value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ValueProperty] = value;
        return obj;
    }

    public static T Value<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.ValueProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Value(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.ValueProperty.Bind().WithMode(mode)];
    }

    // WatermarkProperty

    public static T Watermark<T>(this T obj, System.String value) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.WatermarkProperty] = value;
        return obj;
    }

    public static T Watermark<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NumericUpDown
    {
        obj[Avalonia.Controls.NumericUpDown.WatermarkProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Watermark(this Avalonia.Controls.NumericUpDown obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NumericUpDown.WatermarkProperty.Bind().WithMode(mode)];
    }
}
