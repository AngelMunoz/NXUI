// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class WindowBaseExtensions
{
    // IsActiveProperty

    public static Avalonia.Data.IBinding IsActive(this Avalonia.Controls.WindowBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.WindowBase.IsActiveProperty.Bind().WithMode(mode)];
    }

    // OwnerProperty

    public static T Owner<T>(this T obj, Avalonia.Controls.WindowBase value) where T : Avalonia.Controls.WindowBase
    {
        obj[Avalonia.Controls.WindowBase.OwnerProperty] = value;
        return obj;
    }

    public static T Owner<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.WindowBase
    {
        obj[Avalonia.Controls.WindowBase.OwnerProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Owner(this Avalonia.Controls.WindowBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.WindowBase.OwnerProperty.Bind().WithMode(mode)];
    }

    // TopmostProperty

    public static T Topmost<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.WindowBase
    {
        obj[Avalonia.Controls.WindowBase.TopmostProperty] = value;
        return obj;
    }

    public static T Topmost<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.WindowBase
    {
        obj[Avalonia.Controls.WindowBase.TopmostProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Topmost(this Avalonia.Controls.WindowBase obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.WindowBase.TopmostProperty.Bind().WithMode(mode)];
    }
}
