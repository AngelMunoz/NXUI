// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class RectangleExtensions
{
    // RadiusXProperty

    public static T RadiusX<T>(this T obj, System.Double value) where T : Avalonia.Controls.Shapes.Rectangle
    {
        obj[Avalonia.Controls.Shapes.Rectangle.RadiusXProperty] = value;
        return obj;
    }

    public static T RadiusX<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Rectangle
    {
        obj[Avalonia.Controls.Shapes.Rectangle.RadiusXProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T RadiusX<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Rectangle
    {
        obj[Avalonia.Controls.Shapes.Rectangle.RadiusXProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRadiusX(this Avalonia.Controls.Shapes.Rectangle obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Rectangle.RadiusXProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveRadiusX(this Avalonia.Controls.Shapes.Rectangle obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Rectangle.RadiusXProperty);
    }

    public static T OnRadiusX<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Shapes.Rectangle
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Rectangle.RadiusXProperty);
        handler(observable);
        return obj;
    }

    // RadiusYProperty

    public static T RadiusY<T>(this T obj, System.Double value) where T : Avalonia.Controls.Shapes.Rectangle
    {
        obj[Avalonia.Controls.Shapes.Rectangle.RadiusYProperty] = value;
        return obj;
    }

    public static T RadiusY<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Rectangle
    {
        obj[Avalonia.Controls.Shapes.Rectangle.RadiusYProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T RadiusY<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Shapes.Rectangle
    {
        obj[Avalonia.Controls.Shapes.Rectangle.RadiusYProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRadiusY(this Avalonia.Controls.Shapes.Rectangle obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Shapes.Rectangle.RadiusYProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveRadiusY(this Avalonia.Controls.Shapes.Rectangle obj)
    {
        return obj.GetObservable(Avalonia.Controls.Shapes.Rectangle.RadiusYProperty);
    }

    public static T OnRadiusY<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Shapes.Rectangle
    {
        var observable = obj.GetObservable(Avalonia.Controls.Shapes.Rectangle.RadiusYProperty);
        handler(observable);
        return obj;
    }
}
