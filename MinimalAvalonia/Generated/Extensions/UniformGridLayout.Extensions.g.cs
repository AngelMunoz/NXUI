// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class UniformGridLayoutExtensions
{
    // ItemsJustificationProperty

    public static T ItemsJustification<T>(this T obj, Avalonia.Layout.UniformGridLayoutItemsJustification value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = value;
        return obj;
    }

    public static T ItemsJustification<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ItemsJustification(this Avalonia.Layout.UniformGridLayout obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty.Bind().WithMode(mode)];
    }

    public static T ItemsJustificationStart<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.Start;
        return obj;
    }

    public static T ItemsJustificationCenter<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.Center;
        return obj;
    }

    public static T ItemsJustificationEnd<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.End;
        return obj;
    }

    public static T ItemsJustificationSpaceAround<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceAround;
        return obj;
    }

    public static T ItemsJustificationSpaceBetween<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceBetween;
        return obj;
    }

    public static T ItemsJustificationSpaceEvenly<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceEvenly;
        return obj;
    }

    // ItemsStretchProperty

    public static T ItemsStretch<T>(this T obj, Avalonia.Layout.UniformGridLayoutItemsStretch value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty] = value;
        return obj;
    }

    public static T ItemsStretch<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ItemsStretch(this Avalonia.Layout.UniformGridLayout obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty.Bind().WithMode(mode)];
    }

    public static T ItemsStretchNone<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty] = Avalonia.Layout.UniformGridLayoutItemsStretch.None;
        return obj;
    }

    public static T ItemsStretchFill<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty] = Avalonia.Layout.UniformGridLayoutItemsStretch.Fill;
        return obj;
    }

    public static T ItemsStretchUniform<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty] = Avalonia.Layout.UniformGridLayoutItemsStretch.Uniform;
        return obj;
    }

    // MinColumnSpacingProperty

    public static T MinColumnSpacing<T>(this T obj, System.Double value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty] = value;
        return obj;
    }

    public static T MinColumnSpacing<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding MinColumnSpacing(this Avalonia.Layout.UniformGridLayout obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty.Bind().WithMode(mode)];
    }

    // MinItemHeightProperty

    public static T MinItemHeight<T>(this T obj, System.Double value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinItemHeightProperty] = value;
        return obj;
    }

    public static T MinItemHeight<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinItemHeightProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding MinItemHeight(this Avalonia.Layout.UniformGridLayout obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Layout.UniformGridLayout.MinItemHeightProperty.Bind().WithMode(mode)];
    }

    // MinItemWidthProperty

    public static T MinItemWidth<T>(this T obj, System.Double value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinItemWidthProperty] = value;
        return obj;
    }

    public static T MinItemWidth<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinItemWidthProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding MinItemWidth(this Avalonia.Layout.UniformGridLayout obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Layout.UniformGridLayout.MinItemWidthProperty.Bind().WithMode(mode)];
    }

    // MinRowSpacingProperty

    public static T MinRowSpacing<T>(this T obj, System.Double value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty] = value;
        return obj;
    }

    public static T MinRowSpacing<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding MinRowSpacing(this Avalonia.Layout.UniformGridLayout obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty.Bind().WithMode(mode)];
    }

    // MaximumRowsOrColumnsProperty

    public static T MaximumRowsOrColumns<T>(this T obj, System.Int32 value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty] = value;
        return obj;
    }

    public static T MaximumRowsOrColumns<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding MaximumRowsOrColumns(this Avalonia.Layout.UniformGridLayout obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty.Bind().WithMode(mode)];
    }
}
