// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TextBoxExtensions
{
    // AcceptsReturnProperty

    public static T AcceptsReturn<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsReturnProperty] = value;
        return obj;
    }

    public static T AcceptsReturn<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsReturnProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T AcceptsReturn<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsReturnProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindAcceptsReturn(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.AcceptsReturnProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveAcceptsReturn(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.AcceptsReturnProperty);
    }

    // AcceptsTabProperty

    public static T AcceptsTab<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsTabProperty] = value;
        return obj;
    }

    public static T AcceptsTab<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsTabProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T AcceptsTab<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.AcceptsTabProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindAcceptsTab(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.AcceptsTabProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveAcceptsTab(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.AcceptsTabProperty);
    }

    // CaretIndexProperty

    public static T CaretIndex<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.CaretIndexProperty] = value;
        return obj;
    }

    public static T CaretIndex<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.CaretIndexProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CaretIndex<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.CaretIndexProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCaretIndex(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.CaretIndexProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveCaretIndex(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CaretIndexProperty);
    }

    // IsReadOnlyProperty

    public static T IsReadOnly<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsReadOnlyProperty] = value;
        return obj;
    }

    public static T IsReadOnly<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsReadOnlyProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsReadOnly<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsReadOnlyProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsReadOnly(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.IsReadOnlyProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsReadOnly(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.IsReadOnlyProperty);
    }

    // PasswordCharProperty

    public static T PasswordChar<T>(this T obj, System.Char value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.PasswordCharProperty] = value;
        return obj;
    }

    public static T PasswordChar<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.PasswordCharProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PasswordChar<T>(this T obj, IObservable<System.Char> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.PasswordCharProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPasswordChar(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.PasswordCharProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Char> ObservePasswordChar(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.PasswordCharProperty);
    }

    // SelectionBrushProperty

    public static T SelectionBrush<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionBrushProperty] = value;
        return obj;
    }

    public static T SelectionBrush<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionBrushProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectionBrush<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionBrushProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectionBrush(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.SelectionBrushProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveSelectionBrush(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.SelectionBrushProperty);
    }

    // SelectionForegroundBrushProperty

    public static T SelectionForegroundBrush<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionForegroundBrushProperty] = value;
        return obj;
    }

    public static T SelectionForegroundBrush<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionForegroundBrushProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectionForegroundBrush<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionForegroundBrushProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectionForegroundBrush(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.SelectionForegroundBrushProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveSelectionForegroundBrush(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.SelectionForegroundBrushProperty);
    }

    // CaretBrushProperty

    public static T CaretBrush<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.CaretBrushProperty] = value;
        return obj;
    }

    public static T CaretBrush<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.CaretBrushProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CaretBrush<T>(this T obj, IObservable<Avalonia.Media.IBrush> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.CaretBrushProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCaretBrush(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.CaretBrushProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.IBrush> ObserveCaretBrush(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CaretBrushProperty);
    }

    // SelectionStartProperty

    public static T SelectionStart<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionStartProperty] = value;
        return obj;
    }

    public static T SelectionStart<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionStartProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectionStart<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionStartProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectionStart(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.SelectionStartProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveSelectionStart(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.SelectionStartProperty);
    }

    // SelectionEndProperty

    public static T SelectionEnd<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionEndProperty] = value;
        return obj;
    }

    public static T SelectionEnd<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionEndProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SelectionEnd<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.SelectionEndProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSelectionEnd(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.SelectionEndProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveSelectionEnd(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.SelectionEndProperty);
    }

    // MaxLengthProperty

    public static T MaxLength<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.MaxLengthProperty] = value;
        return obj;
    }

    public static T MaxLength<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.MaxLengthProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T MaxLength<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.MaxLengthProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaxLength(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.MaxLengthProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveMaxLength(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.MaxLengthProperty);
    }

    // MaxLinesProperty

    public static T MaxLines<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.MaxLinesProperty] = value;
        return obj;
    }

    public static T MaxLines<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.MaxLinesProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T MaxLines<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.MaxLinesProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaxLines(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.MaxLinesProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveMaxLines(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.MaxLinesProperty);
    }

    // TextProperty

    public static T Text<T>(this T obj, System.String value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextProperty] = value;
        return obj;
    }

    public static T Text<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Text<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.TextProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindText(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.TextProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveText(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.TextProperty);
    }

    // WatermarkProperty

    public static T Watermark<T>(this T obj, System.String value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.WatermarkProperty] = value;
        return obj;
    }

    public static T Watermark<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.WatermarkProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Watermark<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.WatermarkProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindWatermark(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.WatermarkProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveWatermark(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.WatermarkProperty);
    }

    // UseFloatingWatermarkProperty

    public static T UseFloatingWatermark<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UseFloatingWatermarkProperty] = value;
        return obj;
    }

    public static T UseFloatingWatermark<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UseFloatingWatermarkProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T UseFloatingWatermark<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UseFloatingWatermarkProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindUseFloatingWatermark(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.UseFloatingWatermarkProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveUseFloatingWatermark(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.UseFloatingWatermarkProperty);
    }

    // NewLineProperty

    public static T NewLine<T>(this T obj, System.String value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.NewLineProperty] = value;
        return obj;
    }

    public static T NewLine<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.NewLineProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T NewLine<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.NewLineProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindNewLine(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.NewLineProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveNewLine(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.NewLineProperty);
    }

    // InnerLeftContentProperty

    public static T InnerLeftContent<T>(this T obj, System.Object value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerLeftContentProperty] = value;
        return obj;
    }

    public static T InnerLeftContent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerLeftContentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T InnerLeftContent<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerLeftContentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindInnerLeftContent(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.InnerLeftContentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveInnerLeftContent(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.InnerLeftContentProperty);
    }

    // InnerRightContentProperty

    public static T InnerRightContent<T>(this T obj, System.Object value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerRightContentProperty] = value;
        return obj;
    }

    public static T InnerRightContent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerRightContentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T InnerRightContent<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.InnerRightContentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindInnerRightContent(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.InnerRightContentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveInnerRightContent(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.InnerRightContentProperty);
    }

    // RevealPasswordProperty

    public static T RevealPassword<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.RevealPasswordProperty] = value;
        return obj;
    }

    public static T RevealPassword<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.RevealPasswordProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T RevealPassword<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.RevealPasswordProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRevealPassword(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.RevealPasswordProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveRevealPassword(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.RevealPasswordProperty);
    }

    // CanCutProperty

    public static Avalonia.Data.IBinding BindCanCut(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.TextBox.CanCutProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanCut(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CanCutProperty);
    }

    // CanCopyProperty

    public static Avalonia.Data.IBinding BindCanCopy(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.TextBox.CanCopyProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanCopy(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CanCopyProperty);
    }

    // CanPasteProperty

    public static Avalonia.Data.IBinding BindCanPaste(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.TextBox.CanPasteProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanPaste(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.CanPasteProperty);
    }

    // IsUndoEnabledProperty

    public static T IsUndoEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsUndoEnabledProperty] = value;
        return obj;
    }

    public static T IsUndoEnabled<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsUndoEnabledProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsUndoEnabled<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.IsUndoEnabledProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsUndoEnabled(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.IsUndoEnabledProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsUndoEnabled(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.IsUndoEnabledProperty);
    }

    // UndoLimitProperty

    public static T UndoLimit<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UndoLimitProperty] = value;
        return obj;
    }

    public static T UndoLimit<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UndoLimitProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T UndoLimit<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TextBox
    {
        obj[Avalonia.Controls.TextBox.UndoLimitProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindUndoLimit(this Avalonia.Controls.TextBox obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.TextBox.UndoLimitProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveUndoLimit(this Avalonia.Controls.TextBox obj)
    {
        return obj.GetObservable(Avalonia.Controls.TextBox.UndoLimitProperty);
    }
}
