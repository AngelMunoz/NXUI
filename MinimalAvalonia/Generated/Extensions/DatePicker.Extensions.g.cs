// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class DatePickerExtensions
{
    // DayFormatProperty

    public static T DayFormat<T>(this T obj, System.String value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.DayFormatProperty] = value;
        return obj;
    }

    public static T DayFormat<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.DayFormatProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding DayFormat(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.DayFormatProperty.Bind().WithMode(mode)];
    }

    // DayVisibleProperty

    public static T DayVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.DayVisibleProperty] = value;
        return obj;
    }

    public static T DayVisible<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.DayVisibleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding DayVisible(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.DayVisibleProperty.Bind().WithMode(mode)];
    }

    // HeaderProperty

    public static T Header<T>(this T obj, System.Object value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.HeaderProperty] = value;
        return obj;
    }

    public static T Header<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.HeaderProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Header(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.HeaderProperty.Bind().WithMode(mode)];
    }

    // HeaderTemplateProperty

    public static T HeaderTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.HeaderTemplateProperty] = value;
        return obj;
    }

    public static T HeaderTemplate<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.HeaderTemplateProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding HeaderTemplate(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.HeaderTemplateProperty.Bind().WithMode(mode)];
    }

    // MaxYearProperty

    public static T MaxYear<T>(this T obj, System.DateTimeOffset value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.MaxYearProperty] = value;
        return obj;
    }

    public static T MaxYear<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.MaxYearProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding MaxYear(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.MaxYearProperty.Bind().WithMode(mode)];
    }

    // MinYearProperty

    public static T MinYear<T>(this T obj, System.DateTimeOffset value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.MinYearProperty] = value;
        return obj;
    }

    public static T MinYear<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.MinYearProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding MinYear(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.MinYearProperty.Bind().WithMode(mode)];
    }

    // MonthFormatProperty

    public static T MonthFormat<T>(this T obj, System.String value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.MonthFormatProperty] = value;
        return obj;
    }

    public static T MonthFormat<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.MonthFormatProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding MonthFormat(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.MonthFormatProperty.Bind().WithMode(mode)];
    }

    // MonthVisibleProperty

    public static T MonthVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.MonthVisibleProperty] = value;
        return obj;
    }

    public static T MonthVisible<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.MonthVisibleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding MonthVisible(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.MonthVisibleProperty.Bind().WithMode(mode)];
    }

    // YearFormatProperty

    public static T YearFormat<T>(this T obj, System.String value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.YearFormatProperty] = value;
        return obj;
    }

    public static T YearFormat<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.YearFormatProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding YearFormat(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.YearFormatProperty.Bind().WithMode(mode)];
    }

    // YearVisibleProperty

    public static T YearVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.YearVisibleProperty] = value;
        return obj;
    }

    public static T YearVisible<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.YearVisibleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding YearVisible(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.YearVisibleProperty.Bind().WithMode(mode)];
    }

    // SelectedDateProperty

    public static T SelectedDate<T>(this T obj, System.Nullable<System.DateTimeOffset> value) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.SelectedDateProperty] = value;
        return obj;
    }

    public static T SelectedDate<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DatePicker
    {
        obj[Avalonia.Controls.DatePicker.SelectedDateProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding SelectedDate(this Avalonia.Controls.DatePicker obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DatePicker.SelectedDateProperty.Bind().WithMode(mode)];
    }
}
