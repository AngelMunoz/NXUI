// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class WindowExtensions
{
    // SizeToContentProperty

    public static T SizeToContent<T>(this T obj, Avalonia.Controls.SizeToContent value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = value;
        return obj;
    }

    public static T SizeToContent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SizeToContent<T>(this T obj, IObservable<Avalonia.Controls.SizeToContent> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSizeToContent(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.SizeToContentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.SizeToContent> ObserveSizeToContent(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.SizeToContentProperty);
    }

    public static T OnSizeToContent<T>(this T obj, Action<IObservable<Avalonia.Controls.SizeToContent>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.SizeToContentProperty);
        handler(observable);
        return obj;
    }

    public static T SizeToContentManual<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = Avalonia.Controls.SizeToContent.Manual;
        return obj;
    }

    public static T SizeToContentWidth<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = Avalonia.Controls.SizeToContent.Width;
        return obj;
    }

    public static T SizeToContentHeight<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = Avalonia.Controls.SizeToContent.Height;
        return obj;
    }

    public static T SizeToContentWidthAndHeight<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = Avalonia.Controls.SizeToContent.WidthAndHeight;
        return obj;
    }

    // ExtendClientAreaToDecorationsHintProperty

    public static T ExtendClientAreaToDecorationsHint<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty] = value;
        return obj;
    }

    public static T ExtendClientAreaToDecorationsHint<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ExtendClientAreaToDecorationsHint<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindExtendClientAreaToDecorationsHint(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveExtendClientAreaToDecorationsHint(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty);
    }

    public static T OnExtendClientAreaToDecorationsHint<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty);
        handler(observable);
        return obj;
    }

    // ExtendClientAreaChromeHintsProperty

    public static T ExtendClientAreaChromeHints<T>(this T obj, Avalonia.Platform.ExtendClientAreaChromeHints value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = value;
        return obj;
    }

    public static T ExtendClientAreaChromeHints<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ExtendClientAreaChromeHints<T>(this T obj, IObservable<Avalonia.Platform.ExtendClientAreaChromeHints> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindExtendClientAreaChromeHints(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Platform.ExtendClientAreaChromeHints> ObserveExtendClientAreaChromeHints(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty);
    }

    public static T OnExtendClientAreaChromeHints<T>(this T obj, Action<IObservable<Avalonia.Platform.ExtendClientAreaChromeHints>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty);
        handler(observable);
        return obj;
    }

    public static T ExtendClientAreaChromeHintsNoChrome<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.NoChrome;
        return obj;
    }

    public static T ExtendClientAreaChromeHintsSystemChrome<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.SystemChrome;
        return obj;
    }

    public static T ExtendClientAreaChromeHintsPreferSystemChrome<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.PreferSystemChrome;
        return obj;
    }

    public static T ExtendClientAreaChromeHintsDefault<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.Default;
        return obj;
    }

    public static T ExtendClientAreaChromeHintsOSXThickTitleBar<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.OSXThickTitleBar;
        return obj;
    }

    // ExtendClientAreaTitleBarHeightHintProperty

    public static T ExtendClientAreaTitleBarHeightHint<T>(this T obj, System.Double value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty] = value;
        return obj;
    }

    public static T ExtendClientAreaTitleBarHeightHint<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ExtendClientAreaTitleBarHeightHint<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindExtendClientAreaTitleBarHeightHint(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveExtendClientAreaTitleBarHeightHint(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty);
    }

    public static T OnExtendClientAreaTitleBarHeightHint<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty);
        handler(observable);
        return obj;
    }

    // IsExtendedIntoWindowDecorationsProperty

    public static Avalonia.Data.IBinding BindIsExtendedIntoWindowDecorations(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsExtendedIntoWindowDecorations(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty);
    }

    public static Avalonia.Controls.Window OnIsExtendedIntoWindowDecorations(this Avalonia.Controls.Window obj, Action<IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty);
        handler(observable);
        return obj;
    }

    // WindowDecorationMarginProperty

    public static Avalonia.Data.IBinding BindWindowDecorationMargin(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.Window.WindowDecorationMarginProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Thickness> ObserveWindowDecorationMargin(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.WindowDecorationMarginProperty);
    }

    public static Avalonia.Controls.Window OnWindowDecorationMargin(this Avalonia.Controls.Window obj, Action<IObservable<Avalonia.Thickness>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.WindowDecorationMarginProperty);
        handler(observable);
        return obj;
    }

    // OffScreenMarginProperty

    public static Avalonia.Data.IBinding BindOffScreenMargin(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.Window.OffScreenMarginProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Thickness> ObserveOffScreenMargin(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.OffScreenMarginProperty);
    }

    public static Avalonia.Controls.Window OnOffScreenMargin(this Avalonia.Controls.Window obj, Action<IObservable<Avalonia.Thickness>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.OffScreenMarginProperty);
        handler(observable);
        return obj;
    }

    // SystemDecorationsProperty

    public static T SystemDecorations<T>(this T obj, Avalonia.Controls.SystemDecorations value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty] = value;
        return obj;
    }

    public static T SystemDecorations<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T SystemDecorations<T>(this T obj, IObservable<Avalonia.Controls.SystemDecorations> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindSystemDecorations(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.SystemDecorationsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.SystemDecorations> ObserveSystemDecorations(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.SystemDecorationsProperty);
    }

    public static T OnSystemDecorations<T>(this T obj, Action<IObservable<Avalonia.Controls.SystemDecorations>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.SystemDecorationsProperty);
        handler(observable);
        return obj;
    }

    public static T SystemDecorationsNone<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty] = Avalonia.Controls.SystemDecorations.None;
        return obj;
    }

    public static T SystemDecorationsBorderOnly<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty] = Avalonia.Controls.SystemDecorations.BorderOnly;
        return obj;
    }

    public static T SystemDecorationsFull<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty] = Avalonia.Controls.SystemDecorations.Full;
        return obj;
    }

    // ShowActivatedProperty

    public static T ShowActivated<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ShowActivatedProperty] = value;
        return obj;
    }

    public static T ShowActivated<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ShowActivatedProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ShowActivated<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ShowActivatedProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindShowActivated(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.ShowActivatedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveShowActivated(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ShowActivatedProperty);
    }

    public static T OnShowActivated<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ShowActivatedProperty);
        handler(observable);
        return obj;
    }

    // ShowInTaskbarProperty

    public static T ShowInTaskbar<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ShowInTaskbarProperty] = value;
        return obj;
    }

    public static T ShowInTaskbar<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ShowInTaskbarProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ShowInTaskbar<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ShowInTaskbarProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindShowInTaskbar(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.ShowInTaskbarProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveShowInTaskbar(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ShowInTaskbarProperty);
    }

    public static T OnShowInTaskbar<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ShowInTaskbarProperty);
        handler(observable);
        return obj;
    }

    // WindowStateProperty

    public static T WindowState<T>(this T obj, Avalonia.Controls.WindowState value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = value;
        return obj;
    }

    public static T WindowState<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T WindowState<T>(this T obj, IObservable<Avalonia.Controls.WindowState> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindWindowState(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.WindowStateProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.WindowState> ObserveWindowState(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.WindowStateProperty);
    }

    public static T OnWindowState<T>(this T obj, Action<IObservable<Avalonia.Controls.WindowState>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.WindowStateProperty);
        handler(observable);
        return obj;
    }

    public static T WindowStateNormal<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = Avalonia.Controls.WindowState.Normal;
        return obj;
    }

    public static T WindowStateMinimized<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = Avalonia.Controls.WindowState.Minimized;
        return obj;
    }

    public static T WindowStateMaximized<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = Avalonia.Controls.WindowState.Maximized;
        return obj;
    }

    public static T WindowStateFullScreen<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = Avalonia.Controls.WindowState.FullScreen;
        return obj;
    }

    // TitleProperty

    public static T Title<T>(this T obj, System.String value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.TitleProperty] = value;
        return obj;
    }

    public static T Title<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.TitleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Title<T>(this T obj, IObservable<System.String> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.TitleProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTitle(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.TitleProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.String> ObserveTitle(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.TitleProperty);
    }

    public static T OnTitle<T>(this T obj, Action<IObservable<System.String>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.TitleProperty);
        handler(observable);
        return obj;
    }

    // IconProperty

    public static T Icon<T>(this T obj, Avalonia.Controls.WindowIcon value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.IconProperty] = value;
        return obj;
    }

    public static T Icon<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.IconProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Icon<T>(this T obj, IObservable<Avalonia.Controls.WindowIcon> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.IconProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIcon(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.IconProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.WindowIcon> ObserveIcon(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.IconProperty);
    }

    public static T OnIcon<T>(this T obj, Action<IObservable<Avalonia.Controls.WindowIcon>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.IconProperty);
        handler(observable);
        return obj;
    }

    // WindowStartupLocationProperty

    public static T WindowStartupLocation<T>(this T obj, Avalonia.Controls.WindowStartupLocation value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty] = value;
        return obj;
    }

    public static T WindowStartupLocation<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T WindowStartupLocation<T>(this T obj, IObservable<Avalonia.Controls.WindowStartupLocation> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindWindowStartupLocation(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.WindowStartupLocationProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.WindowStartupLocation> ObserveWindowStartupLocation(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.WindowStartupLocationProperty);
    }

    public static T OnWindowStartupLocation<T>(this T obj, Action<IObservable<Avalonia.Controls.WindowStartupLocation>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.WindowStartupLocationProperty);
        handler(observable);
        return obj;
    }

    public static T WindowStartupLocationManual<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty] = Avalonia.Controls.WindowStartupLocation.Manual;
        return obj;
    }

    public static T WindowStartupLocationCenterScreen<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty] = Avalonia.Controls.WindowStartupLocation.CenterScreen;
        return obj;
    }

    public static T WindowStartupLocationCenterOwner<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty] = Avalonia.Controls.WindowStartupLocation.CenterOwner;
        return obj;
    }

    // CanResizeProperty

    public static T CanResize<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.CanResizeProperty] = value;
        return obj;
    }

    public static T CanResize<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.CanResizeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T CanResize<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.CanResizeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindCanResize(this Avalonia.Controls.Window obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Window.CanResizeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveCanResize(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.CanResizeProperty);
    }

    public static T OnCanResize<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.CanResizeProperty);
        handler(observable);
        return obj;
    }
}
