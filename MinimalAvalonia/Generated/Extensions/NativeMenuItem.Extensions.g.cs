// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class NativeMenuItemExtensions
{
    // MenuProperty

    public static T Menu<T>(this T obj, Avalonia.Controls.NativeMenu value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.MenuProperty] = value;
        return obj;
    }

    public static T Menu<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.MenuProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Menu(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.MenuProperty.Bind().WithMode(mode)];
    }

    // IconProperty

    public static T Icon<T>(this T obj, Avalonia.Media.Imaging.IBitmap value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IconProperty] = value;
        return obj;
    }

    public static T Icon<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IconProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Icon(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.IconProperty.Bind().WithMode(mode)];
    }

    // HeaderProperty

    public static T Header<T>(this T obj, System.String value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.HeaderProperty] = value;
        return obj;
    }

    public static T Header<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.HeaderProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Header(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.HeaderProperty.Bind().WithMode(mode)];
    }

    // GestureProperty

    public static T Gesture<T>(this T obj, Avalonia.Input.KeyGesture value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.GestureProperty] = value;
        return obj;
    }

    public static T Gesture<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.GestureProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Gesture(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.GestureProperty.Bind().WithMode(mode)];
    }

    // IsCheckedProperty

    public static T IsChecked<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsCheckedProperty] = value;
        return obj;
    }

    public static T IsChecked<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsCheckedProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding IsChecked(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.IsCheckedProperty.Bind().WithMode(mode)];
    }

    // ToggleTypeProperty

    public static T ToggleType<T>(this T obj, Avalonia.Controls.NativeMenuItemToggleType value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = value;
        return obj;
    }

    public static T ToggleType<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ToggleType(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty.Bind().WithMode(mode)];
    }

    public static T ToggleTypeNone<T>(this T obj) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.None;
        return obj;
    }

    public static T ToggleTypeCheckBox<T>(this T obj) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.CheckBox;
        return obj;
    }

    public static T ToggleTypeRadio<T>(this T obj) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.ToggleTypeProperty] = Avalonia.Controls.NativeMenuItemToggleType.Radio;
        return obj;
    }

    // CommandProperty

    public static T Command<T>(this T obj, System.Windows.Input.ICommand value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.CommandProperty] = value;
        return obj;
    }

    public static T Command<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.CommandProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Command(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.CommandProperty.Bind().WithMode(mode)];
    }

    // IsEnabledProperty

    public static T IsEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsEnabledProperty] = value;
        return obj;
    }

    public static T IsEnabled<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenuItem
    {
        obj[Avalonia.Controls.NativeMenuItem.IsEnabledProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding IsEnabled(this Avalonia.Controls.NativeMenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenuItem.IsEnabledProperty.Bind().WithMode(mode)];
    }
}
