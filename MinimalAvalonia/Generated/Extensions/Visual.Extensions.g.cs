// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class VisualExtensions
{
    // BoundsProperty

    public static Avalonia.Data.IBinding Bounds(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Visual.BoundsProperty.Bind().WithMode(mode)];
    }

    // TransformedBoundsProperty

    public static Avalonia.Data.IBinding TransformedBounds(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Visual.TransformedBoundsProperty.Bind().WithMode(mode)];
    }

    // ClipToBoundsProperty

    public static T ClipToBounds<T>(this T obj, System.Boolean value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipToBoundsProperty] = value;
        return obj;
    }

    public static T ClipToBounds<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipToBoundsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ClipToBounds(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.ClipToBoundsProperty.Bind().WithMode(mode)];
    }

    // ClipProperty

    public static T Clip<T>(this T obj, Avalonia.Media.Geometry value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipProperty] = value;
        return obj;
    }

    public static T Clip<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Clip(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.ClipProperty.Bind().WithMode(mode)];
    }

    // IsVisibleProperty

    public static T IsVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.IsVisibleProperty] = value;
        return obj;
    }

    public static T IsVisible<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.IsVisibleProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding IsVisible(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.IsVisibleProperty.Bind().WithMode(mode)];
    }

    // OpacityProperty

    public static T Opacity<T>(this T obj, System.Double value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityProperty] = value;
        return obj;
    }

    public static T Opacity<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Opacity(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.OpacityProperty.Bind().WithMode(mode)];
    }

    // OpacityMaskProperty

    public static T OpacityMask<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityMaskProperty] = value;
        return obj;
    }

    public static T OpacityMask<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityMaskProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding OpacityMask(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.OpacityMaskProperty.Bind().WithMode(mode)];
    }

    // HasMirrorTransformProperty

    public static Avalonia.Data.IBinding HasMirrorTransform(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Visual.HasMirrorTransformProperty.Bind().WithMode(mode)];
    }

    // RenderTransformProperty

    public static T RenderTransform<T>(this T obj, Avalonia.Media.ITransform value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformProperty] = value;
        return obj;
    }

    public static T RenderTransform<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding RenderTransform(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.RenderTransformProperty.Bind().WithMode(mode)];
    }

    // RenderTransformOriginProperty

    public static T RenderTransformOrigin<T>(this T obj, Avalonia.RelativePoint value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformOriginProperty] = value;
        return obj;
    }

    public static T RenderTransformOrigin<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformOriginProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding RenderTransformOrigin(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.RenderTransformOriginProperty.Bind().WithMode(mode)];
    }

    // VisualParentProperty

    public static Avalonia.Data.IBinding VisualParent(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Visual.VisualParentProperty.Bind().WithMode(mode)];
    }

    // ZIndexProperty

    public static T ZIndex<T>(this T obj, System.Int32 value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ZIndexProperty] = value;
        return obj;
    }

    public static T ZIndex<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ZIndexProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ZIndex(this Avalonia.Visual obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Visual.ZIndexProperty.Bind().WithMode(mode)];
    }
}
