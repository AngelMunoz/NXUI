// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class VisualBrushExtensions
{
    // VisualProperty

    public static T Visual<T>(this T obj, Avalonia.VisualTree.IVisual value) where T : Avalonia.Media.VisualBrush
    {
        obj[Avalonia.Media.VisualBrush.VisualProperty] = value;
        return obj;
    }

    public static T Visual<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.VisualBrush
    {
        obj[Avalonia.Media.VisualBrush.VisualProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Visual<T>(this T obj, IObservable<Avalonia.VisualTree.IVisual> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.VisualBrush
    {
        obj[Avalonia.Media.VisualBrush.VisualProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindVisual(this Avalonia.Media.VisualBrush obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.VisualBrush.VisualProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.VisualTree.IVisual> ObserveVisual(this Avalonia.Media.VisualBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.VisualBrush.VisualProperty);
    }

    public static T OnVisual<T>(this T obj, Action<IObservable<Avalonia.VisualTree.IVisual>> handler) where T : Avalonia.Media.VisualBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.VisualBrush.VisualProperty);
        handler(observable);
        return obj;
    }
}
