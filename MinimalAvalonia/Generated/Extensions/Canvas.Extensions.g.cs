// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class CanvasExtensions
{
    // LeftProperty

    public static T Left<T>(this T obj, System.Double value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.LeftProperty] = value;
        return obj;
    }

    public static T Left<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.LeftProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Left<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.LeftProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindLeft(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Canvas.LeftProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveLeft(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Canvas.LeftProperty);
    }

    public static T OnLeft<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Canvas.LeftProperty);
        handler(observable);
        return obj;
    }

    // TopProperty

    public static T Top<T>(this T obj, System.Double value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.TopProperty] = value;
        return obj;
    }

    public static T Top<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.TopProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Top<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.TopProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTop(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Canvas.TopProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveTop(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Canvas.TopProperty);
    }

    public static T OnTop<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Canvas.TopProperty);
        handler(observable);
        return obj;
    }

    // RightProperty

    public static T Right<T>(this T obj, System.Double value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.RightProperty] = value;
        return obj;
    }

    public static T Right<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.RightProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Right<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.RightProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRight(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Canvas.RightProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveRight(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Canvas.RightProperty);
    }

    public static T OnRight<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Canvas.RightProperty);
        handler(observable);
        return obj;
    }

    // BottomProperty

    public static T Bottom<T>(this T obj, System.Double value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.BottomProperty] = value;
        return obj;
    }

    public static T Bottom<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.BottomProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Bottom<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Canvas.BottomProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindBottom(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Canvas.BottomProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveBottom(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Canvas.BottomProperty);
    }

    public static T OnBottom<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.Canvas.BottomProperty);
        handler(observable);
        return obj;
    }
}
