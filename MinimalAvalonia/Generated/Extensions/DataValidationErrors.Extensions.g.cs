// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class DataValidationErrorsExtensions
{
    // ErrorsProperty

    public static T Errors<T>(this T obj, System.Collections.Generic.IEnumerable<System.Object> value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorsProperty] = value;
        return obj;
    }

    public static T Errors<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Errors<T>(this T obj, IObservable<System.Collections.Generic.IEnumerable<System.Object>> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindErrors(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DataValidationErrors.ErrorsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Collections.Generic.IEnumerable<System.Object>> ObserveErrors(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataValidationErrors.ErrorsProperty);
    }

    public static T OnErrors<T>(this T obj, Action<IObservable<System.Collections.Generic.IEnumerable<System.Object>>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataValidationErrors.ErrorsProperty);
        handler(observable);
        return obj;
    }

    // HasErrorsProperty

    public static T HasErrors<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.HasErrorsProperty] = value;
        return obj;
    }

    public static T HasErrors<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.HasErrorsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T HasErrors<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.HasErrorsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindHasErrors(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DataValidationErrors.HasErrorsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveHasErrors(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataValidationErrors.HasErrorsProperty);
    }

    public static T OnHasErrors<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataValidationErrors.HasErrorsProperty);
        handler(observable);
        return obj;
    }

    // ErrorTemplateProperty

    public static T ErrorTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorTemplateProperty] = value;
        return obj;
    }

    public static T ErrorTemplate<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorTemplateProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ErrorTemplate<T>(this T obj, IObservable<Avalonia.Controls.Templates.IDataTemplate> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorTemplateProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindErrorTemplate(this Avalonia.Controls.DataValidationErrors obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DataValidationErrors.ErrorTemplateProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObserveErrorTemplate(this Avalonia.Controls.DataValidationErrors obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataValidationErrors.ErrorTemplateProperty);
    }

    public static T OnErrorTemplate<T>(this T obj, Action<IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.DataValidationErrors
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataValidationErrors.ErrorTemplateProperty);
        handler(observable);
        return obj;
    }

    // OwnerProperty

    public static T Owner<T>(this T obj, Avalonia.Controls.Control value) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.OwnerProperty] = value;
        return obj;
    }

    public static T Owner<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.OwnerProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Owner<T>(this T obj, IObservable<Avalonia.Controls.Control> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.OwnerProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOwner(this Avalonia.Controls.DataValidationErrors obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DataValidationErrors.OwnerProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Control> ObserveOwner(this Avalonia.Controls.DataValidationErrors obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataValidationErrors.OwnerProperty);
    }

    public static T OnOwner<T>(this T obj, Action<IObservable<Avalonia.Controls.Control>> handler) where T : Avalonia.Controls.DataValidationErrors
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataValidationErrors.OwnerProperty);
        handler(observable);
        return obj;
    }
}
