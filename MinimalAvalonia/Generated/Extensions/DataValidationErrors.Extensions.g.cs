// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class DataValidationErrorsExtensions
{
    // ErrorsProperty

    public static T Errors<T>(this T obj, System.Collections.Generic.IEnumerable<System.Object> value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorsProperty] = value;
        return obj;
    }

    public static T Errors<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Errors(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DataValidationErrors.ErrorsProperty.Bind().WithMode(mode)];
    }

    // HasErrorsProperty

    public static T HasErrors<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.HasErrorsProperty] = value;
        return obj;
    }

    public static T HasErrors<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.DataValidationErrors.HasErrorsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding HasErrors(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DataValidationErrors.HasErrorsProperty.Bind().WithMode(mode)];
    }

    // ErrorTemplateProperty

    public static T ErrorTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorTemplateProperty] = value;
        return obj;
    }

    public static T ErrorTemplate<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.ErrorTemplateProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ErrorTemplate(this Avalonia.Controls.DataValidationErrors obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DataValidationErrors.ErrorTemplateProperty.Bind().WithMode(mode)];
    }

    // OwnerProperty

    public static T Owner<T>(this T obj, Avalonia.Controls.Control value) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.OwnerProperty] = value;
        return obj;
    }

    public static T Owner<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.DataValidationErrors
    {
        obj[Avalonia.Controls.DataValidationErrors.OwnerProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Owner(this Avalonia.Controls.DataValidationErrors obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.DataValidationErrors.OwnerProperty.Bind().WithMode(mode)];
    }
}
