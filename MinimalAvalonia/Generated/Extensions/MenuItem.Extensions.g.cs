// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class MenuItemExtensions
{
    // CommandProperty

    public static T Command<T>(this T obj, System.Windows.Input.ICommand value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.CommandProperty] = value;
        return obj;
    }

    public static T Command<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.CommandProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Command(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.CommandProperty.Bind().WithMode(mode)];
    }

    // IconProperty

    public static T Icon<T>(this T obj, System.Object value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IconProperty] = value;
        return obj;
    }

    public static T Icon<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IconProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Icon(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.IconProperty.Bind().WithMode(mode)];
    }

    // InputGestureProperty

    public static T InputGesture<T>(this T obj, Avalonia.Input.KeyGesture value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.InputGestureProperty] = value;
        return obj;
    }

    public static T InputGesture<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.InputGestureProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding InputGesture(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.InputGestureProperty.Bind().WithMode(mode)];
    }

    // IsSubMenuOpenProperty

    public static T IsSubMenuOpen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IsSubMenuOpenProperty] = value;
        return obj;
    }

    public static T IsSubMenuOpen<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.IsSubMenuOpenProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding IsSubMenuOpen(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.IsSubMenuOpenProperty.Bind().WithMode(mode)];
    }

    // StaysOpenOnClickProperty

    public static T StaysOpenOnClick<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.StaysOpenOnClickProperty] = value;
        return obj;
    }

    public static T StaysOpenOnClick<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.MenuItem
    {
        obj[Avalonia.Controls.MenuItem.StaysOpenOnClickProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding StaysOpenOnClick(this Avalonia.Controls.MenuItem obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.MenuItem.StaysOpenOnClickProperty.Bind().WithMode(mode)];
    }
}
