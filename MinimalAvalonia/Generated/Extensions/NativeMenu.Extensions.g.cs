// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class NativeMenuExtensions
{
    // ParentProperty

    public static T Parent<T>(this T obj, Avalonia.Controls.NativeMenuItem value) where T : Avalonia.Controls.NativeMenu
    {
        obj[Avalonia.Controls.NativeMenu.ParentProperty] = value;
        return obj;
    }

    public static T Parent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenu
    {
        obj[Avalonia.Controls.NativeMenu.ParentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Parent<T>(this T obj, IObservable<Avalonia.Controls.NativeMenuItem> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.NativeMenu
    {
        obj[Avalonia.Controls.NativeMenu.ParentProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindParent(this Avalonia.Controls.NativeMenu obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenu.ParentProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.NativeMenuItem> ObserveParent(this Avalonia.Controls.NativeMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenu.ParentProperty);
    }

    public static T OnParent<T>(this T obj, Action<IObservable<Avalonia.Controls.NativeMenuItem>> handler) where T : Avalonia.Controls.NativeMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenu.ParentProperty);
        handler(observable);
        return obj;
    }

    // IsNativeMenuExportedProperty

    public static T IsNativeMenuExported<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TopLevel
    {
        obj[Avalonia.Controls.NativeMenu.IsNativeMenuExportedProperty] = value;
        return obj;
    }

    public static T IsNativeMenuExported<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TopLevel
    {
        obj[Avalonia.Controls.NativeMenu.IsNativeMenuExportedProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsNativeMenuExported<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.TopLevel
    {
        obj[Avalonia.Controls.NativeMenu.IsNativeMenuExportedProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsNativeMenuExported(this Avalonia.Controls.TopLevel obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenu.IsNativeMenuExportedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsNativeMenuExported(this Avalonia.Controls.TopLevel obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenu.IsNativeMenuExportedProperty);
    }

    public static T OnIsNativeMenuExported<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TopLevel
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenu.IsNativeMenuExportedProperty);
        handler(observable);
        return obj;
    }

    // MenuProperty

    public static T Menu<T>(this T obj, Avalonia.Controls.NativeMenu value) where T : Avalonia.AvaloniaObject
    {
        obj[Avalonia.Controls.NativeMenu.MenuProperty] = value;
        return obj;
    }

    public static T Menu<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.AvaloniaObject
    {
        obj[Avalonia.Controls.NativeMenu.MenuProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Menu<T>(this T obj, IObservable<Avalonia.Controls.NativeMenu> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.AvaloniaObject
    {
        obj[Avalonia.Controls.NativeMenu.MenuProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMenu(this Avalonia.AvaloniaObject obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.NativeMenu.MenuProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.NativeMenu> ObserveMenu(this Avalonia.AvaloniaObject obj)
    {
        return obj.GetObservable(Avalonia.Controls.NativeMenu.MenuProperty);
    }

    public static T OnMenu<T>(this T obj, Action<IObservable<Avalonia.Controls.NativeMenu>> handler) where T : Avalonia.AvaloniaObject
    {
        var observable = obj.GetObservable(Avalonia.Controls.NativeMenu.MenuProperty);
        handler(observable);
        return obj;
    }
}
