// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class TrackExtensions
{
    // MinimumProperty

    public static T Minimum<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.MinimumProperty] = value;
        return obj;
    }

    public static T Minimum<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.MinimumProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Minimum<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.MinimumProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMinimum(this Avalonia.Controls.Primitives.Track obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Track.MinimumProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveMinimum(this Avalonia.Controls.Primitives.Track obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Track.MinimumProperty);
    }

    public static T OnMinimum<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.Track
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Track.MinimumProperty);
        handler(observable);
        return obj;
    }

    // MaximumProperty

    public static T Maximum<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.MaximumProperty] = value;
        return obj;
    }

    public static T Maximum<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.MaximumProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Maximum<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.MaximumProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaximum(this Avalonia.Controls.Primitives.Track obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Track.MaximumProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveMaximum(this Avalonia.Controls.Primitives.Track obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Track.MaximumProperty);
    }

    public static T OnMaximum<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.Track
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Track.MaximumProperty);
        handler(observable);
        return obj;
    }

    // ValueProperty

    public static T Value<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.ValueProperty] = value;
        return obj;
    }

    public static T Value<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.ValueProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Value<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.ValueProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindValue(this Avalonia.Controls.Primitives.Track obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Track.ValueProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveValue(this Avalonia.Controls.Primitives.Track obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Track.ValueProperty);
    }

    public static T OnValue<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.Track
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Track.ValueProperty);
        handler(observable);
        return obj;
    }

    // ThumbProperty

    public static T Thumb<T>(this T obj, Avalonia.Controls.Primitives.Thumb value) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.ThumbProperty] = value;
        return obj;
    }

    public static T Thumb<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.ThumbProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Thumb<T>(this T obj, IObservable<Avalonia.Controls.Primitives.Thumb> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.ThumbProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindThumb(this Avalonia.Controls.Primitives.Track obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Track.ThumbProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.Thumb> ObserveThumb(this Avalonia.Controls.Primitives.Track obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Track.ThumbProperty);
    }

    public static T OnThumb<T>(this T obj, Action<IObservable<Avalonia.Controls.Primitives.Thumb>> handler) where T : Avalonia.Controls.Primitives.Track
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Track.ThumbProperty);
        handler(observable);
        return obj;
    }

    // IncreaseButtonProperty

    public static T IncreaseButton<T>(this T obj, Avalonia.Controls.Button value) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.IncreaseButtonProperty] = value;
        return obj;
    }

    public static T IncreaseButton<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.IncreaseButtonProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IncreaseButton<T>(this T obj, IObservable<Avalonia.Controls.Button> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.IncreaseButtonProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIncreaseButton(this Avalonia.Controls.Primitives.Track obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Track.IncreaseButtonProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Button> ObserveIncreaseButton(this Avalonia.Controls.Primitives.Track obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Track.IncreaseButtonProperty);
    }

    public static T OnIncreaseButton<T>(this T obj, Action<IObservable<Avalonia.Controls.Button>> handler) where T : Avalonia.Controls.Primitives.Track
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Track.IncreaseButtonProperty);
        handler(observable);
        return obj;
    }

    // DecreaseButtonProperty

    public static T DecreaseButton<T>(this T obj, Avalonia.Controls.Button value) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.DecreaseButtonProperty] = value;
        return obj;
    }

    public static T DecreaseButton<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.DecreaseButtonProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T DecreaseButton<T>(this T obj, IObservable<Avalonia.Controls.Button> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.DecreaseButtonProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindDecreaseButton(this Avalonia.Controls.Primitives.Track obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Track.DecreaseButtonProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Button> ObserveDecreaseButton(this Avalonia.Controls.Primitives.Track obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Track.DecreaseButtonProperty);
    }

    public static T OnDecreaseButton<T>(this T obj, Action<IObservable<Avalonia.Controls.Button>> handler) where T : Avalonia.Controls.Primitives.Track
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Track.DecreaseButtonProperty);
        handler(observable);
        return obj;
    }

    // IsDirectionReversedProperty

    public static T IsDirectionReversed<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty] = value;
        return obj;
    }

    public static T IsDirectionReversed<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsDirectionReversed<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsDirectionReversed(this Avalonia.Controls.Primitives.Track obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsDirectionReversed(this Avalonia.Controls.Primitives.Track obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty);
    }

    public static T OnIsDirectionReversed<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.Track
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Track.IsDirectionReversedProperty);
        handler(observable);
        return obj;
    }

    // IgnoreThumbDragProperty

    public static T IgnoreThumbDrag<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty] = value;
        return obj;
    }

    public static T IgnoreThumbDrag<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IgnoreThumbDrag<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.Track
    {
        obj[Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIgnoreThumbDrag(this Avalonia.Controls.Primitives.Track obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIgnoreThumbDrag(this Avalonia.Controls.Primitives.Track obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty);
    }

    public static T OnIgnoreThumbDrag<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Primitives.Track
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Track.IgnoreThumbDragProperty);
        handler(observable);
        return obj;
    }
}
