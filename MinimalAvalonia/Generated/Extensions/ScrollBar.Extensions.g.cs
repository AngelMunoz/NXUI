// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ScrollBarExtensions
{
    // ViewportSizeProperty

    public static T ViewportSize<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.ViewportSizeProperty] = value;
        return obj;
    }

    public static T ViewportSize<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.ViewportSizeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ViewportSize<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.ViewportSizeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindViewportSize(this Avalonia.Controls.Primitives.ScrollBar obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.ScrollBar.ViewportSizeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveViewportSize(this Avalonia.Controls.Primitives.ScrollBar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ScrollBar.ViewportSizeProperty);
    }

    // VisibilityProperty

    public static T Visibility<T>(this T obj, Avalonia.Controls.Primitives.ScrollBarVisibility value) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty] = value;
        return obj;
    }

    public static T Visibility<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Visibility<T>(this T obj, IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindVisibility(this Avalonia.Controls.Primitives.ScrollBar obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> ObserveVisibility(this Avalonia.Controls.Primitives.ScrollBar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty);
    }

    public static T VisibilityDisabled<T>(this T obj) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled;
        return obj;
    }

    public static T VisibilityAuto<T>(this T obj) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Auto;
        return obj;
    }

    public static T VisibilityHidden<T>(this T obj) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden;
        return obj;
    }

    public static T VisibilityVisible<T>(this T obj) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Visible;
        return obj;
    }

    // OrientationProperty

    public static T Orientation<T>(this T obj, Avalonia.Layout.Orientation value) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.OrientationProperty] = value;
        return obj;
    }

    public static T Orientation<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.OrientationProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Orientation<T>(this T obj, IObservable<Avalonia.Layout.Orientation> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.OrientationProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindOrientation(this Avalonia.Controls.Primitives.ScrollBar obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.ScrollBar.OrientationProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Layout.Orientation> ObserveOrientation(this Avalonia.Controls.Primitives.ScrollBar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ScrollBar.OrientationProperty);
    }

    public static T OrientationHorizontal<T>(this T obj) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.OrientationProperty] = Avalonia.Layout.Orientation.Horizontal;
        return obj;
    }

    public static T OrientationVertical<T>(this T obj) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.OrientationProperty] = Avalonia.Layout.Orientation.Vertical;
        return obj;
    }

    // IsExpandedProperty

    public static Avalonia.Data.IBinding BindIsExpanded(this Avalonia.Controls.Primitives.ScrollBar obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay)
    {
        return obj[Avalonia.Controls.Primitives.ScrollBar.IsExpandedProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsExpanded(this Avalonia.Controls.Primitives.ScrollBar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ScrollBar.IsExpandedProperty);
    }

    // AllowAutoHideProperty

    public static T AllowAutoHide<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.AllowAutoHideProperty] = value;
        return obj;
    }

    public static T AllowAutoHide<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.AllowAutoHideProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T AllowAutoHide<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.AllowAutoHideProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindAllowAutoHide(this Avalonia.Controls.Primitives.ScrollBar obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.ScrollBar.AllowAutoHideProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveAllowAutoHide(this Avalonia.Controls.Primitives.ScrollBar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ScrollBar.AllowAutoHideProperty);
    }

    // HideDelayProperty

    public static T HideDelay<T>(this T obj, System.TimeSpan value) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.HideDelayProperty] = value;
        return obj;
    }

    public static T HideDelay<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.HideDelayProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T HideDelay<T>(this T obj, IObservable<System.TimeSpan> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.HideDelayProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindHideDelay(this Avalonia.Controls.Primitives.ScrollBar obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.ScrollBar.HideDelayProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.TimeSpan> ObserveHideDelay(this Avalonia.Controls.Primitives.ScrollBar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ScrollBar.HideDelayProperty);
    }

    // ShowDelayProperty

    public static T ShowDelay<T>(this T obj, System.TimeSpan value) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.ShowDelayProperty] = value;
        return obj;
    }

    public static T ShowDelay<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.ShowDelayProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ShowDelay<T>(this T obj, IObservable<System.TimeSpan> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Primitives.ScrollBar
    {
        obj[Avalonia.Controls.Primitives.ScrollBar.ShowDelayProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindShowDelay(this Avalonia.Controls.Primitives.ScrollBar obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Primitives.ScrollBar.ShowDelayProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.TimeSpan> ObserveShowDelay(this Avalonia.Controls.Primitives.ScrollBar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ScrollBar.ShowDelayProperty);
    }
}
