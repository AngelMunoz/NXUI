// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ToolTipExtensions
{
    // TipProperty

    public static T Tip<T>(this T obj, System.Object value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.TipProperty] = value;
        return obj;
    }

    public static T Tip<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.TipProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Tip<T>(this T obj, IObservable<System.Object> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.TipProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTip(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ToolTip.TipProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Object> ObserveTip(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ToolTip.TipProperty);
    }

    public static T OnTip<T>(this T obj, Action<IObservable<System.Object>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ToolTip.TipProperty);
        handler(observable);
        return obj;
    }

    // IsOpenProperty

    public static T IsOpen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.IsOpenProperty] = value;
        return obj;
    }

    public static T IsOpen<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.IsOpenProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsOpen<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.IsOpenProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsOpen(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ToolTip.IsOpenProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsOpen(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ToolTip.IsOpenProperty);
    }

    public static T OnIsOpen<T>(this T obj, Action<IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ToolTip.IsOpenProperty);
        handler(observable);
        return obj;
    }

    // PlacementProperty

    public static T Placement<T>(this T obj, Avalonia.Controls.PlacementMode value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.PlacementProperty] = value;
        return obj;
    }

    public static T Placement<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.PlacementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Placement<T>(this T obj, IObservable<Avalonia.Controls.PlacementMode> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.PlacementProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlacement(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ToolTip.PlacementProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.PlacementMode> ObservePlacement(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ToolTip.PlacementProperty);
    }

    public static T OnPlacement<T>(this T obj, Action<IObservable<Avalonia.Controls.PlacementMode>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ToolTip.PlacementProperty);
        handler(observable);
        return obj;
    }

    public static T PlacementPointer<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.PlacementProperty] = Avalonia.Controls.PlacementMode.Pointer;
        return obj;
    }

    public static T PlacementBottom<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.PlacementProperty] = Avalonia.Controls.PlacementMode.Bottom;
        return obj;
    }

    public static T PlacementRight<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.PlacementProperty] = Avalonia.Controls.PlacementMode.Right;
        return obj;
    }

    public static T PlacementLeft<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.PlacementProperty] = Avalonia.Controls.PlacementMode.Left;
        return obj;
    }

    public static T PlacementTop<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.PlacementProperty] = Avalonia.Controls.PlacementMode.Top;
        return obj;
    }

    public static T PlacementAnchorAndGravity<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.PlacementProperty] = Avalonia.Controls.PlacementMode.AnchorAndGravity;
        return obj;
    }

    // HorizontalOffsetProperty

    public static T HorizontalOffset<T>(this T obj, System.Double value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.HorizontalOffsetProperty] = value;
        return obj;
    }

    public static T HorizontalOffset<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.HorizontalOffsetProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T HorizontalOffset<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.HorizontalOffsetProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindHorizontalOffset(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ToolTip.HorizontalOffsetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveHorizontalOffset(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ToolTip.HorizontalOffsetProperty);
    }

    public static T OnHorizontalOffset<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ToolTip.HorizontalOffsetProperty);
        handler(observable);
        return obj;
    }

    // VerticalOffsetProperty

    public static T VerticalOffset<T>(this T obj, System.Double value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.VerticalOffsetProperty] = value;
        return obj;
    }

    public static T VerticalOffset<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.VerticalOffsetProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T VerticalOffset<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.VerticalOffsetProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindVerticalOffset(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ToolTip.VerticalOffsetProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveVerticalOffset(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ToolTip.VerticalOffsetProperty);
    }

    public static T OnVerticalOffset<T>(this T obj, Action<IObservable<System.Double>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ToolTip.VerticalOffsetProperty);
        handler(observable);
        return obj;
    }

    // ShowDelayProperty

    public static T ShowDelay<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.ShowDelayProperty] = value;
        return obj;
    }

    public static T ShowDelay<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.ShowDelayProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ShowDelay<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.ToolTip.ShowDelayProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindShowDelay(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.ToolTip.ShowDelayProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveShowDelay(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.ToolTip.ShowDelayProperty);
    }

    public static T OnShowDelay<T>(this T obj, Action<IObservable<System.Int32>> handler) where T : Avalonia.Controls.Control
    {
        var observable = obj.GetObservable(Avalonia.Controls.ToolTip.ShowDelayProperty);
        handler(observable);
        return obj;
    }
}
