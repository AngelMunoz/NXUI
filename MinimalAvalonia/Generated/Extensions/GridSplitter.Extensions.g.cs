// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class GridSplitterExtensions
{
    // ResizeDirectionProperty

    public static T ResizeDirection<T>(this T obj, Avalonia.Controls.GridResizeDirection value) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeDirectionProperty] = value;
        return obj;
    }

    public static T ResizeDirection<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeDirectionProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ResizeDirection(this Avalonia.Controls.GridSplitter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.GridSplitter.ResizeDirectionProperty.Bind().WithMode(mode)];
    }

    public static T ResizeDirectionAuto<T>(this T obj) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeDirectionProperty] = Avalonia.Controls.GridResizeDirection.Auto;
        return obj;
    }

    public static T ResizeDirectionColumns<T>(this T obj) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeDirectionProperty] = Avalonia.Controls.GridResizeDirection.Columns;
        return obj;
    }

    public static T ResizeDirectionRows<T>(this T obj) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeDirectionProperty] = Avalonia.Controls.GridResizeDirection.Rows;
        return obj;
    }

    // ResizeBehaviorProperty

    public static T ResizeBehavior<T>(this T obj, Avalonia.Controls.GridResizeBehavior value) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeBehaviorProperty] = value;
        return obj;
    }

    public static T ResizeBehavior<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeBehaviorProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ResizeBehavior(this Avalonia.Controls.GridSplitter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.GridSplitter.ResizeBehaviorProperty.Bind().WithMode(mode)];
    }

    public static T ResizeBehaviorBasedOnAlignment<T>(this T obj) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeBehaviorProperty] = Avalonia.Controls.GridResizeBehavior.BasedOnAlignment;
        return obj;
    }

    public static T ResizeBehaviorCurrentAndNext<T>(this T obj) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeBehaviorProperty] = Avalonia.Controls.GridResizeBehavior.CurrentAndNext;
        return obj;
    }

    public static T ResizeBehaviorPreviousAndCurrent<T>(this T obj) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeBehaviorProperty] = Avalonia.Controls.GridResizeBehavior.PreviousAndCurrent;
        return obj;
    }

    public static T ResizeBehaviorPreviousAndNext<T>(this T obj) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ResizeBehaviorProperty] = Avalonia.Controls.GridResizeBehavior.PreviousAndNext;
        return obj;
    }

    // ShowsPreviewProperty

    public static T ShowsPreview<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ShowsPreviewProperty] = value;
        return obj;
    }

    public static T ShowsPreview<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.ShowsPreviewProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ShowsPreview(this Avalonia.Controls.GridSplitter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.GridSplitter.ShowsPreviewProperty.Bind().WithMode(mode)];
    }

    // KeyboardIncrementProperty

    public static T KeyboardIncrement<T>(this T obj, System.Double value) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.KeyboardIncrementProperty] = value;
        return obj;
    }

    public static T KeyboardIncrement<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.KeyboardIncrementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding KeyboardIncrement(this Avalonia.Controls.GridSplitter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.GridSplitter.KeyboardIncrementProperty.Bind().WithMode(mode)];
    }

    // DragIncrementProperty

    public static T DragIncrement<T>(this T obj, System.Double value) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.DragIncrementProperty] = value;
        return obj;
    }

    public static T DragIncrement<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.DragIncrementProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding DragIncrement(this Avalonia.Controls.GridSplitter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.GridSplitter.DragIncrementProperty.Bind().WithMode(mode)];
    }

    // PreviewContentProperty

    public static T PreviewContent<T>(this T obj, Avalonia.Controls.ITemplate<Avalonia.Controls.IControl> value) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.PreviewContentProperty] = value;
        return obj;
    }

    public static T PreviewContent<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.GridSplitter
    {
        obj[Avalonia.Controls.GridSplitter.PreviewContentProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding PreviewContent(this Avalonia.Controls.GridSplitter obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.GridSplitter.PreviewContentProperty.Bind().WithMode(mode)];
    }
}
