// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class WindowNotificationManagerExtensions
{
    // PositionProperty

    public static T Position<T>(this T obj, Avalonia.Controls.Notifications.NotificationPosition value) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty] = value;
        return obj;
    }

    public static T Position<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Position<T>(this T obj, IObservable<Avalonia.Controls.Notifications.NotificationPosition> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPosition(this Avalonia.Controls.Notifications.WindowNotificationManager obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Controls.Notifications.NotificationPosition> ObservePosition(this Avalonia.Controls.Notifications.WindowNotificationManager obj)
    {
        return obj.GetObservable(Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty);
    }

    public static T OnPosition<T>(this T obj, Action<IObservable<Avalonia.Controls.Notifications.NotificationPosition>> handler) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        var observable = obj.GetObservable(Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty);
        handler(observable);
        return obj;
    }

    public static T PositionTopLeft<T>(this T obj) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty] = Avalonia.Controls.Notifications.NotificationPosition.TopLeft;
        return obj;
    }

    public static T PositionTopRight<T>(this T obj) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty] = Avalonia.Controls.Notifications.NotificationPosition.TopRight;
        return obj;
    }

    public static T PositionBottomLeft<T>(this T obj) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty] = Avalonia.Controls.Notifications.NotificationPosition.BottomLeft;
        return obj;
    }

    public static T PositionBottomRight<T>(this T obj) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.PositionProperty] = Avalonia.Controls.Notifications.NotificationPosition.BottomRight;
        return obj;
    }

    // MaxItemsProperty

    public static T MaxItems<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.MaxItemsProperty] = value;
        return obj;
    }

    public static T MaxItems<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.MaxItemsProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T MaxItems<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        obj[Avalonia.Controls.Notifications.WindowNotificationManager.MaxItemsProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaxItems(this Avalonia.Controls.Notifications.WindowNotificationManager obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Notifications.WindowNotificationManager.MaxItemsProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveMaxItems(this Avalonia.Controls.Notifications.WindowNotificationManager obj)
    {
        return obj.GetObservable(Avalonia.Controls.Notifications.WindowNotificationManager.MaxItemsProperty);
    }

    public static T OnMaxItems<T>(this T obj, Action<IObservable<System.Int32>> handler) where T : Avalonia.Controls.Notifications.WindowNotificationManager
    {
        var observable = obj.GetObservable(Avalonia.Controls.Notifications.WindowNotificationManager.MaxItemsProperty);
        handler(observable);
        return obj;
    }
}
