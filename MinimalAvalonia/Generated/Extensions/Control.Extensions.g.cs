// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ControlExtensions
{
    // FocusAdornerProperty

    public static T FocusAdorner<T>(this T obj, Avalonia.Controls.ITemplate<Avalonia.Controls.IControl> value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.FocusAdornerProperty] = value;
        return obj;
    }

    public static T FocusAdorner<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.FocusAdornerProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding FocusAdorner(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Control.FocusAdornerProperty.Bind().WithMode(mode)];
    }

    // TagProperty

    public static T Tag<T>(this T obj, System.Object value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.TagProperty] = value;
        return obj;
    }

    public static T Tag<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.TagProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding Tag(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Control.TagProperty.Bind().WithMode(mode)];
    }

    // ContextMenuProperty

    public static T ContextMenu<T>(this T obj, Avalonia.Controls.ContextMenu value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextMenuProperty] = value;
        return obj;
    }

    public static T ContextMenu<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextMenuProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ContextMenu(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Control.ContextMenuProperty.Bind().WithMode(mode)];
    }

    // ContextFlyoutProperty

    public static T ContextFlyout<T>(this T obj, Avalonia.Controls.Primitives.FlyoutBase value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextFlyoutProperty] = value;
        return obj;
    }

    public static T ContextFlyout<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.ContextFlyoutProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding ContextFlyout(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Control.ContextFlyoutProperty.Bind().WithMode(mode)];
    }

    // FlowDirectionProperty

    public static T FlowDirection<T>(this T obj, Avalonia.Media.FlowDirection value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.FlowDirectionProperty] = value;
        return obj;
    }

    public static T FlowDirection<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.FlowDirectionProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static Avalonia.Data.IBinding FlowDirection(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Control.FlowDirectionProperty.Bind().WithMode(mode)];
    }

    public static T FlowDirectionLeftToRight<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.FlowDirectionProperty] = Avalonia.Media.FlowDirection.LeftToRight;
        return obj;
    }

    public static T FlowDirectionRightToLeft<T>(this T obj) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Control.FlowDirectionProperty] = Avalonia.Media.FlowDirection.RightToLeft;
        return obj;
    }
}
