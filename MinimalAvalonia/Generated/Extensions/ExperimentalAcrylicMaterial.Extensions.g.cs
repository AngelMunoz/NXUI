// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class ExperimentalAcrylicMaterialExtensions
{
    // TintColorProperty

    public static T TintColor<T>(this T obj, Avalonia.Media.Color value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty] = value;
        return obj;
    }

    public static T TintColor<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TintColor<T>(this T obj, IObservable<Avalonia.Media.Color> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTintColor(this Avalonia.Media.ExperimentalAcrylicMaterial obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Color> ObserveTintColor(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty);
    }

    // BackgroundSourceProperty

    public static T BackgroundSource<T>(this T obj, Avalonia.Media.AcrylicBackgroundSource value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty] = value;
        return obj;
    }

    public static T BackgroundSource<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T BackgroundSource<T>(this T obj, IObservable<Avalonia.Media.AcrylicBackgroundSource> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindBackgroundSource(this Avalonia.Media.ExperimentalAcrylicMaterial obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.AcrylicBackgroundSource> ObserveBackgroundSource(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty);
    }

    public static T BackgroundSourceNone<T>(this T obj) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty] = Avalonia.Media.AcrylicBackgroundSource.None;
        return obj;
    }

    public static T BackgroundSourceDigger<T>(this T obj) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty] = Avalonia.Media.AcrylicBackgroundSource.Digger;
        return obj;
    }

    // TintOpacityProperty

    public static T TintOpacity<T>(this T obj, System.Double value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty] = value;
        return obj;
    }

    public static T TintOpacity<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T TintOpacity<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindTintOpacity(this Avalonia.Media.ExperimentalAcrylicMaterial obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveTintOpacity(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty);
    }

    // MaterialOpacityProperty

    public static T MaterialOpacity<T>(this T obj, System.Double value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty] = value;
        return obj;
    }

    public static T MaterialOpacity<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T MaterialOpacity<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindMaterialOpacity(this Avalonia.Media.ExperimentalAcrylicMaterial obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObserveMaterialOpacity(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty);
    }

    // PlatformTransparencyCompensationLevelProperty

    public static T PlatformTransparencyCompensationLevel<T>(this T obj, System.Double value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty] = value;
        return obj;
    }

    public static T PlatformTransparencyCompensationLevel<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T PlatformTransparencyCompensationLevel<T>(this T obj, IObservable<System.Double> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindPlatformTransparencyCompensationLevel(this Avalonia.Media.ExperimentalAcrylicMaterial obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Double> ObservePlatformTransparencyCompensationLevel(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty);
    }

    // FallbackColorProperty

    public static T FallbackColor<T>(this T obj, Avalonia.Media.Color value) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty] = value;
        return obj;
    }

    public static T FallbackColor<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T FallbackColor<T>(this T obj, IObservable<Avalonia.Media.Color> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Media.ExperimentalAcrylicMaterial
    {
        obj[Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindFallbackColor(this Avalonia.Media.ExperimentalAcrylicMaterial obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty.Bind().WithMode(mode)];
    }

    public static IObservable<Avalonia.Media.Color> ObserveFallbackColor(this Avalonia.Media.ExperimentalAcrylicMaterial obj)
    {
        return obj.GetObservable(Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty);
    }
}
