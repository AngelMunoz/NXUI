// <auto-generated />
namespace MinimalAvalonia.Extensions;

public static partial class GridExtensions
{
    // ShowGridLinesProperty

    public static T ShowGridLines<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Grid
    {
        obj[Avalonia.Controls.Grid.ShowGridLinesProperty] = value;
        return obj;
    }

    public static T ShowGridLines<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Grid
    {
        obj[Avalonia.Controls.Grid.ShowGridLinesProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ShowGridLines<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Grid
    {
        obj[Avalonia.Controls.Grid.ShowGridLinesProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindShowGridLines(this Avalonia.Controls.Grid obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Grid.ShowGridLinesProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveShowGridLines(this Avalonia.Controls.Grid obj)
    {
        return obj.GetObservable(Avalonia.Controls.Grid.ShowGridLinesProperty);
    }

    // ColumnProperty

    public static T Column<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.ColumnProperty] = value;
        return obj;
    }

    public static T Column<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.ColumnProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Column<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.ColumnProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindColumn(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Grid.ColumnProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveColumn(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Grid.ColumnProperty);
    }

    // RowProperty

    public static T Row<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.RowProperty] = value;
        return obj;
    }

    public static T Row<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.RowProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T Row<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.RowProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRow(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Grid.RowProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveRow(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Grid.RowProperty);
    }

    // ColumnSpanProperty

    public static T ColumnSpan<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.ColumnSpanProperty] = value;
        return obj;
    }

    public static T ColumnSpan<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.ColumnSpanProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T ColumnSpan<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.ColumnSpanProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindColumnSpan(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Grid.ColumnSpanProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveColumnSpan(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Grid.ColumnSpanProperty);
    }

    // RowSpanProperty

    public static T RowSpan<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.RowSpanProperty] = value;
        return obj;
    }

    public static T RowSpan<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.RowSpanProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T RowSpan<T>(this T obj, IObservable<System.Int32> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.RowSpanProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindRowSpan(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Grid.RowSpanProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Int32> ObserveRowSpan(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Grid.RowSpanProperty);
    }

    // IsSharedSizeScopeProperty

    public static T IsSharedSizeScope<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.IsSharedSizeScopeProperty] = value;
        return obj;
    }

    public static T IsSharedSizeScope<T>(this T obj, Avalonia.Data.IBinding binding, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.IsSharedSizeScopeProperty.Bind().WithMode(mode)] = binding;
        return obj;
    }

    public static T IsSharedSizeScope<T>(this T obj, IObservable<System.Boolean> observable, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay) where T : Avalonia.Controls.Control
    {
        obj[Avalonia.Controls.Grid.IsSharedSizeScopeProperty.Bind().WithMode(mode)] = observable.ToBinding();
        return obj;
    }

    public static Avalonia.Data.IBinding BindIsSharedSizeScope(this Avalonia.Controls.Control obj, Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay)
    {
        return obj[Avalonia.Controls.Grid.IsSharedSizeScopeProperty.Bind().WithMode(mode)];
    }

    public static IObservable<System.Boolean> ObserveIsSharedSizeScope(this Avalonia.Controls.Control obj)
    {
        return obj.GetObservable(Avalonia.Controls.Grid.IsSharedSizeScopeProperty);
    }
}
